{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.0", "generated_at": "2022-08-12T17:07:39.947322Z", "invocation_id": "cd604f0b-5289-44c7-83ff-a52ae0ea28af", "env": {}, "project_id": "9bf57d857f8bb3abf75f1b334ad30f3c", "user_id": "535a716f-60c0-47b9-9763-5e1b450166b6", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.ad_reporting_integration_tests.twitter_line_item_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_line_item_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_line_item_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "twitter_line_item_history_data.csv", "original_file_path": "seeds/twitter_line_item_history_data.csv", "name": "twitter_line_item_history_data", "alias": "twitter_line_item_history_data", "checksum": {"name": "sha256", "checksum": "b22edb0c149ef5e3c14f3e5bea6d34447db94ad0f89d00bb074b0f72b2044fee"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.3205462, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_line_item_history_data`"}, "seed.ad_reporting_integration_tests.apple_ad_group_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"modification_time": "timestamp", "start_time": "timestamp", "end_time": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "apple_ad_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.apple_ad_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "apple_ad_group_history_data.csv", "original_file_path": "seeds/apple_ad_group_history_data.csv", "name": "apple_ad_group_history_data", "alias": "apple_ad_group_history_data", "checksum": {"name": "sha256", "checksum": "a9cfeb9cc85210420753798963e582f647bc3fe966ef725b7d3cd061f65325c4"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"modification_time": "timestamp", "start_time": "timestamp", "end_time": "timestamp"}}, "created_at": 1660323530.3298292, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`apple_ad_group_history_data`"}, "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp", "account_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "linkedin_campaign_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "linkedin_campaign_group_history_data.csv", "original_file_path": "seeds/linkedin_campaign_group_history_data.csv", "name": "linkedin_campaign_group_history_data", "alias": "linkedin_campaign_group_history_data", "checksum": {"name": "sha256", "checksum": "a3e2f426d56d779f1bcb3013b2d4862e7a8203c0372c4892e598165fedab1744"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.331839, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`linkedin_campaign_group_history_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "int64", "account_id": "int64", "ad_set_id": "int64", "campaign_id": "int64", "creative_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_ad_history_data.csv", "original_file_path": "seeds/facebook_ads_ad_history_data.csv", "name": "facebook_ads_ad_history_data", "alias": "facebook_ads_ad_history_data", "checksum": {"name": "sha256", "checksum": "25b7f0feecd46923840679a47529564155c8763cead441b31aa21611c7c7a701"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "ad_set_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "creative_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.333889, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_ad_history_data`"}, "seed.ad_reporting_integration_tests.linkedin_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "linkedin_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "linkedin_account_history_data.csv", "original_file_path": "seeds/linkedin_account_history_data.csv", "name": "linkedin_account_history_data", "alias": "linkedin_account_history_data", "checksum": {"name": "sha256", "checksum": "e00ceef7b82a006c9fb463fe928e58f1d0bdaeddb0541508934c62d0142084fb"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}}, "created_at": 1660323530.335928, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`linkedin_account_history_data`"}, "seed.ad_reporting_integration_tests.apple_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"modification_time": "timestamp", "start_time": "timestamp", "end_time": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "apple_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.apple_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "apple_campaign_history_data.csv", "original_file_path": "seeds/apple_campaign_history_data.csv", "name": "apple_campaign_history_data", "alias": "apple_campaign_history_data", "checksum": {"name": "sha256", "checksum": "56fa1720930e88d590eb11b16d93d5c7e28e5f9bec57866047040a1a183ad3f3"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"modification_time": "timestamp", "start_time": "timestamp", "end_time": "timestamp"}}, "created_at": 1660323530.338197, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`apple_campaign_history_data`"}, "seed.ad_reporting_integration_tests.linkedin_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp", "account_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "linkedin_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "linkedin_campaign_history_data.csv", "original_file_path": "seeds/linkedin_campaign_history_data.csv", "name": "linkedin_campaign_history_data", "alias": "linkedin_campaign_history_data", "checksum": {"name": "sha256", "checksum": "063da5a71a42213130cf9f604668ddf280be6c4695956520418390ce6f3d1e87"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.3401868, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`linkedin_campaign_history_data`"}, "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ad_group_id": "INT64", "campaign_id": "INT64", "external_customer_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_final_url_performance_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "google_ads_final_url_performance_data.csv", "original_file_path": "seeds/google_ads_final_url_performance_data.csv", "name": "google_ads_final_url_performance_data", "alias": "google_ads_final_url_performance_data", "checksum": {"name": "sha256", "checksum": "6e58d77f59b6bf4e9c721a8e5eadd66ae0a9c1a73f055606d703e3abac1e10ea"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "external_customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.342208, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`google_ads_final_url_performance_data`"}, "seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_ad_squad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "snapchat_ad_squad_history_data.csv", "original_file_path": "seeds/snapchat_ad_squad_history_data.csv", "name": "snapchat_ad_squad_history_data", "alias": "snapchat_ad_squad_history_data", "checksum": {"name": "sha256", "checksum": "0e83ca691f2153480e7b63173f1c7ed8c38c0dc247d41a6f2fd46afc1e5963b1"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.3442152, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_ad_squad_history_data`"}, "seed.ad_reporting_integration_tests.twitter_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "twitter_campaign_history_data.csv", "original_file_path": "seeds/twitter_campaign_history_data.csv", "name": "twitter_campaign_history_data", "alias": "twitter_campaign_history_data", "checksum": {"name": "sha256", "checksum": "92a9f18103e025ab35199a59f71a0eac8f5a7517a7a6f0bd0c9367b43e0045ed"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.34631, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_campaign_history_data`"}, "seed.ad_reporting_integration_tests.apple_keyword_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"modification_time": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "apple_keyword_history_data"], "unique_id": "seed.ad_reporting_integration_tests.apple_keyword_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "apple_keyword_history_data.csv", "original_file_path": "seeds/apple_keyword_history_data.csv", "name": "apple_keyword_history_data", "alias": "apple_keyword_history_data", "checksum": {"name": "sha256", "checksum": "9ad23801ae95fc44211fac6c893f67825e34df0e6ba4e967eeb4fe5c3391b86b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"modification_time": "timestamp"}}, "created_at": 1660323530.348298, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`apple_keyword_history_data`"}, "seed.ad_reporting_integration_tests.linkedin_creative_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "linkedin_creative_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_creative_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "linkedin_creative_history_data.csv", "original_file_path": "seeds/linkedin_creative_history_data.csv", "name": "linkedin_creative_history_data", "alias": "linkedin_creative_history_data", "checksum": {"name": "sha256", "checksum": "7c80b5be327ce6a841cc2c17fec12807e8fa09a4a9622d50e0a4768293deee3b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}}, "created_at": 1660323530.3502889, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`linkedin_creative_history_data`"}, "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_account_history_data.csv", "original_file_path": "seeds/microsoft_ads_account_history_data.csv", "name": "microsoft_ads_account_history_data", "alias": "microsoft_ads_account_history_data", "checksum": {"name": "sha256", "checksum": "2de08fa142cabec96d61b080a788ea37294b7983743727a44410737713510ea7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.3522408, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`microsoft_ads_account_history_data`"}, "seed.ad_reporting_integration_tests.tiktok_ad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "tiktok_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.tiktok_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "tiktok_ad_history_data.csv", "original_file_path": "seeds/tiktok_ad_history_data.csv", "name": "tiktok_ad_history_data", "alias": "tiktok_ad_history_data", "checksum": {"name": "sha256", "checksum": "e7decb78ac655fe1273ebe66de74179a344a7c42221f005099325e2f09fac937"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.3543491, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_ad_history_data`"}, "seed.ad_reporting_integration_tests.pin_promotion_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ID": "int64", "AD_GROUP_ID": "int64", "PIN_ID": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "pin_promotion_history_data"], "unique_id": "seed.ad_reporting_integration_tests.pin_promotion_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "pin_promotion_history_data.csv", "original_file_path": "seeds/pin_promotion_history_data.csv", "name": "pin_promotion_history_data", "alias": "pin_promotion_history_data", "checksum": {"name": "sha256", "checksum": "9dd8d1c6e9c07f7eaee989bbfb1eec635928eb2f9f0c4fade7fe720e36b6710f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "AD_GROUP_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "PIN_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.356291, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`pin_promotion_history_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"page_link": "string", "template_page_link": "string", "id": "int64", "account_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_creative_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_creative_history_data.csv", "original_file_path": "seeds/facebook_ads_creative_history_data.csv", "name": "facebook_ads_creative_history_data", "alias": "facebook_ads_creative_history_data", "checksum": {"name": "path", "checksum": "seeds/facebook_ads_creative_history_data.csv"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"page_link": "{{ 'string' if target.name in ['bigquery','spark'] else 'varchar' }}", "template_page_link": "{{ 'string' if target.name in ['bigquery','spark'] else 'varchar' }}", "id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.3582878, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_creative_history_data`"}, "seed.ad_reporting_integration_tests.tiktok_adgroup_report_hourly_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "tiktok_adgroup_report_hourly_data"], "unique_id": "seed.ad_reporting_integration_tests.tiktok_adgroup_report_hourly_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "tiktok_adgroup_report_hourly_data.csv", "original_file_path": "seeds/tiktok_adgroup_report_hourly_data.csv", "name": "tiktok_adgroup_report_hourly_data", "alias": "tiktok_adgroup_report_hourly_data", "checksum": {"name": "sha256", "checksum": "115ceb73e027a9ec64266c689bfd3d3f5c9ecb31fc59d349c128026ef0ebde6c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.360257, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_adgroup_report_hourly_data`"}, "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"tweet_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_promoted_tweet_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "twitter_promoted_tweet_history_data.csv", "original_file_path": "seeds/twitter_promoted_tweet_history_data.csv", "name": "twitter_promoted_tweet_history_data", "alias": "twitter_promoted_tweet_history_data", "checksum": {"name": "sha256", "checksum": "c86c8537ad1859822edecc33c3770ff89482970d11e866b85f35a0882a2725ca"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"tweet_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.3623831, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_promoted_tweet_history_data`"}, "seed.ad_reporting_integration_tests.tiktok_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "tiktok_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.tiktok_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "tiktok_campaign_history_data.csv", "original_file_path": "seeds/tiktok_campaign_history_data.csv", "name": "tiktok_campaign_history_data", "alias": "tiktok_campaign_history_data", "checksum": {"name": "sha256", "checksum": "e41829f211b9a07f761121b42034f696822b01b5d7494a188eb90a826680cd48"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.364343, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_campaign_history_data`"}, "seed.ad_reporting_integration_tests.tiktok_advertiser_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "tiktok_advertiser_data"], "unique_id": "seed.ad_reporting_integration_tests.tiktok_advertiser_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "tiktok_advertiser_data.csv", "original_file_path": "seeds/tiktok_advertiser_data.csv", "name": "tiktok_advertiser_data", "alias": "tiktok_advertiser_data", "checksum": {"name": "sha256", "checksum": "3272c4a8fcdabfb2b2b5244fe8ff5df3329769727883bbc4d510ca01379a7ba0"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.3662841, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_advertiser_data`"}, "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_promoted_tweet_report_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "twitter_promoted_tweet_report_data.csv", "original_file_path": "seeds/twitter_promoted_tweet_report_data.csv", "name": "twitter_promoted_tweet_report_data", "alias": "twitter_promoted_tweet_report_data", "checksum": {"name": "sha256", "checksum": "a2e76c3f8c81841095f0c4108cb566e2f51c06729dc83cb34da22db21308f519"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.368132, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_promoted_tweet_report_data`"}, "seed.ad_reporting_integration_tests.apple_ad_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "apple_ad_report_data"], "unique_id": "seed.ad_reporting_integration_tests.apple_ad_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "apple_ad_report_data.csv", "original_file_path": "seeds/apple_ad_report_data.csv", "name": "apple_ad_report_data", "alias": "apple_ad_report_data", "checksum": {"name": "sha256", "checksum": "ec24d0fbd8070dcf8239764cc8d0cf51169447dd1855fb8d4a3aef8a390711f3"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.3700988, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`apple_ad_report_data`"}, "seed.ad_reporting_integration_tests.google_ads_ad_stats_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"customer_id": "INT64", "ad_id": "INT64", "campaign_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_ad_stats_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_ad_stats_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "google_ads_ad_stats_data.csv", "original_file_path": "seeds/google_ads_ad_stats_data.csv", "name": "google_ads_ad_stats_data", "alias": "google_ads_ad_stats_data", "checksum": {"name": "sha256", "checksum": "57f977d336374f41000bdce5167f77a877dea7d21f144475dcbaad2c9e407c54"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.372511, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`google_ads_ad_stats_data`"}, "seed.ad_reporting_integration_tests.ad_group_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ID": "int64", "CAMPAIGN_ID": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "ad_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.ad_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "ad_group_history_data.csv", "original_file_path": "seeds/ad_group_history_data.csv", "name": "ad_group_history_data", "alias": "ad_group_history_data", "checksum": {"name": "sha256", "checksum": "ef23777af254918465840a752893efe60d8eb29387c96fab44635175c5cee6e6"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "CAMPAIGN_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.3745139, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`ad_group_history_data`"}, "seed.ad_reporting_integration_tests.google_ads_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "google_ads_account_history_data.csv", "original_file_path": "seeds/google_ads_account_history_data.csv", "name": "google_ads_account_history_data", "alias": "google_ads_account_history_data", "checksum": {"name": "sha256", "checksum": "bf0559a512f089514aa67964b7ae5aef0fee8deb6e0874c01e853ed78dd7883d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.376488, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`google_ads_account_history_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "int64", "account_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_campaign_history_data.csv", "original_file_path": "seeds/facebook_ads_campaign_history_data.csv", "name": "facebook_ads_campaign_history_data", "alias": "facebook_ads_campaign_history_data", "checksum": {"name": "sha256", "checksum": "0fc07559cd2c4d2d19ee30743b3d37bc40891faa670fac0ecf53b2c2df66bee5"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.3784761, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_campaign_history_data`"}, "seed.ad_reporting_integration_tests.twitter_tweet_url_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"tweet_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_tweet_url_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_tweet_url_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "twitter_tweet_url_data.csv", "original_file_path": "seeds/twitter_tweet_url_data.csv", "name": "twitter_tweet_url_data", "alias": "twitter_tweet_url_data", "checksum": {"name": "sha256", "checksum": "58b1b79764a2e24bf990e3940fc1766f4d5331631d872a3cac60ad9c56b3d943"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"tweet_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.408253, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_tweet_url_data`"}, "seed.ad_reporting_integration_tests.campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ID": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "campaign_history_data.csv", "original_file_path": "seeds/campaign_history_data.csv", "name": "campaign_history_data", "alias": "campaign_history_data", "checksum": {"name": "sha256", "checksum": "b6968916ef6c8933ac5b2331237af6db1614cedd5d9ad61bdbe574d6cfd6d8e1"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.411304, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`campaign_history_data`"}, "seed.ad_reporting_integration_tests.google_ads_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "INT64", "base_campaign_id": "INT64", "customer_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "google_ads_campaign_history_data.csv", "original_file_path": "seeds/google_ads_campaign_history_data.csv", "name": "google_ads_campaign_history_data", "alias": "google_ads_campaign_history_data", "checksum": {"name": "sha256", "checksum": "82df483d8e75d5ae32ebe80450b4238bb724f61d2ea883c275097d398d5623be"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "base_campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.4142988, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`google_ads_campaign_history_data`"}, "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"day": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "linkedin_ad_analytics_by_creative_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "linkedin_ad_analytics_by_creative_data.csv", "original_file_path": "seeds/linkedin_ad_analytics_by_creative_data.csv", "name": "linkedin_ad_analytics_by_creative_data", "alias": "linkedin_ad_analytics_by_creative_data", "checksum": {"name": "sha256", "checksum": "90a1a324923b47307989ab10594f537f8c45262ffcdfd8ffbe09bae7f05760f7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"day": "timestamp"}}, "created_at": 1660323530.417526, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`linkedin_ad_analytics_by_creative_data`"}, "seed.ad_reporting_integration_tests.snapchat_ad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "snapchat_ad_history_data.csv", "original_file_path": "seeds/snapchat_ad_history_data.csv", "name": "snapchat_ad_history_data", "alias": "snapchat_ad_history_data", "checksum": {"name": "sha256", "checksum": "839c0910ff6ff3cff2580bd9144223132dd1d87f003aeea329e47ba858a2dc23"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.4204092, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_ad_history_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "int64", "name": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_account_history_data.csv", "original_file_path": "seeds/facebook_ads_account_history_data.csv", "name": "facebook_ads_account_history_data", "alias": "facebook_ads_account_history_data", "checksum": {"name": "sha256", "checksum": "92f318955a317f351b928ce94de43eae07f29dc3cadbd0f1a26e62fdba1dc4b1"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "name": "{{ 'string' if target.name in ['bigquery','spark'] else 'varchar' }}"}}, "created_at": 1660323530.4232461, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_account_history_data`"}, "seed.ad_reporting_integration_tests.google_ads_ad_group_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "INT64", "campaign_id": "INT64", "base_ad_group_id": "INT64", "base_campaign_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_ad_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_ad_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "google_ads_ad_group_history_data.csv", "original_file_path": "seeds/google_ads_ad_group_history_data.csv", "name": "google_ads_ad_group_history_data", "alias": "google_ads_ad_group_history_data", "checksum": {"name": "sha256", "checksum": "016b74b30b9c7723887f27134a5ba7ee40e363a316c692c299bc0209e983def5"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "base_ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "base_campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.426157, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`google_ads_ad_group_history_data`"}, "seed.ad_reporting_integration_tests.snapchat_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "snapchat_campaign_history_data.csv", "original_file_path": "seeds/snapchat_campaign_history_data.csv", "name": "snapchat_campaign_history_data", "alias": "snapchat_campaign_history_data", "checksum": {"name": "sha256", "checksum": "640eb2ec082938ad70c430a6b3441711f6fed19eb6e28d7622f03294e92e5b70"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.429287, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_campaign_history_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ad_id": "int64", "account_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_basic_ad_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_basic_ad_data.csv", "original_file_path": "seeds/facebook_ads_basic_ad_data.csv", "name": "facebook_ads_basic_ad_data", "alias": "facebook_ads_basic_ad_data", "checksum": {"name": "sha256", "checksum": "0c4ee00ee3a1d9f3a5ccd76384a745b8dddf21eaa9f73ea0f9eabcc3df2968a4"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ad_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.4321249, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_basic_ad_data`"}, "seed.ad_reporting_integration_tests.tiktok_ad_report_hourly_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "tiktok_ad_report_hourly_data"], "unique_id": "seed.ad_reporting_integration_tests.tiktok_ad_report_hourly_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "tiktok_ad_report_hourly_data.csv", "original_file_path": "seeds/tiktok_ad_report_hourly_data.csv", "name": "tiktok_ad_report_hourly_data", "alias": "tiktok_ad_report_hourly_data", "checksum": {"name": "sha256", "checksum": "39ed8b9dadd5bfec63a2439efdd1410e5f02c8f13d3048a1b6d8e1d546bd876d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.434923, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_ad_report_hourly_data`"}, "seed.ad_reporting_integration_tests.google_ads_click_performance_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ad_group_id": "INT64", "campaign_id": "INT64", "criteria_id": "INT64", "external_customer_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_click_performance_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_click_performance_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "google_ads_click_performance_data.csv", "original_file_path": "seeds/google_ads_click_performance_data.csv", "name": "google_ads_click_performance_data", "alias": "google_ads_click_performance_data", "checksum": {"name": "sha256", "checksum": "97e9bb010087b2022acfead14656b057cca0e26628841ddc3ca07d9682fc78ec"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "criteria_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "external_customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.437564, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`google_ads_click_performance_data`"}, "seed.ad_reporting_integration_tests.twitter_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "twitter_account_history_data.csv", "original_file_path": "seeds/twitter_account_history_data.csv", "name": "twitter_account_history_data", "alias": "twitter_account_history_data", "checksum": {"name": "sha256", "checksum": "0901eba818791fcdb5ceae038d0d2dc86f889a4e8c5535a6797ff60858c0877d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.440436, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_account_history_data`"}, "seed.ad_reporting_integration_tests.snapchat_creative_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_creative_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_creative_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "snapchat_creative_history_data.csv", "original_file_path": "seeds/snapchat_creative_history_data.csv", "name": "snapchat_creative_history_data", "alias": "snapchat_creative_history_data", "checksum": {"name": "sha256", "checksum": "0b004197010e194cabc6308d7aa7db9fe0f5debd8bdd66ea5dd9bf6d21b3a785"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.442867, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_creative_history_data`"}, "seed.ad_reporting_integration_tests.apple_keyword_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "apple_keyword_report_data"], "unique_id": "seed.ad_reporting_integration_tests.apple_keyword_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "apple_keyword_report_data.csv", "original_file_path": "seeds/apple_keyword_report_data.csv", "name": "apple_keyword_report_data", "alias": "apple_keyword_report_data", "checksum": {"name": "sha256", "checksum": "6aafe7098ea6f18764856a6631b190de106462f83f8bb1d3c8fb91e2d3cfffee"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.4451652, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`apple_keyword_report_data`"}, "seed.ad_reporting_integration_tests.google_ads_ad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "INT64", "ad_group_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "google_ads_ad_history_data.csv", "original_file_path": "seeds/google_ads_ad_history_data.csv", "name": "google_ads_ad_history_data", "alias": "google_ads_ad_history_data", "checksum": {"name": "sha256", "checksum": "a4c23fae9da0557efb50a99043b22d19d975068f0d194fcb8bbf6dd3cb80920f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.447513, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`google_ads_ad_history_data`"}, "seed.ad_reporting_integration_tests.apple_search_term_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "apple_search_term_report_data"], "unique_id": "seed.ad_reporting_integration_tests.apple_search_term_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "apple_search_term_report_data.csv", "original_file_path": "seeds/apple_search_term_report_data.csv", "name": "apple_search_term_report_data", "alias": "apple_search_term_report_data", "checksum": {"name": "sha256", "checksum": "6add75b68a0f9a6f153a9fb83a682387a76a5b89d6dcd14fdbbcb5b418bb3b5a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.450094, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`apple_search_term_report_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "int64", "account_id": "int64", "campaign_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_ad_set_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_ad_set_history_data.csv", "original_file_path": "seeds/facebook_ads_ad_set_history_data.csv", "name": "facebook_ads_ad_set_history_data", "alias": "facebook_ads_ad_set_history_data", "checksum": {"name": "sha256", "checksum": "fa5715da546f5758e2191b632fd1f333e30c2b20b8f2c4f3077591a529f51551"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.452451, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_ad_set_history_data`"}, "seed.ad_reporting_integration_tests.apple_ad_group_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "apple_ad_group_report_data"], "unique_id": "seed.ad_reporting_integration_tests.apple_ad_group_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "apple_ad_group_report_data.csv", "original_file_path": "seeds/apple_ad_group_report_data.csv", "name": "apple_ad_group_report_data", "alias": "apple_ad_group_report_data", "checksum": {"name": "sha256", "checksum": "135ee77ac9c3aa146d4f0281b04312c1034c271276f215b27145bb99f83534f5"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.454818, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`apple_ad_group_report_data`"}, "seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_ad_hourly_report_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "snapchat_ad_hourly_report_data.csv", "original_file_path": "seeds/snapchat_ad_hourly_report_data.csv", "name": "snapchat_ad_hourly_report_data", "alias": "snapchat_ad_hourly_report_data", "checksum": {"name": "sha256", "checksum": "1f2f808727dc7d9d45ba0ac10bba717da6454110d8fb242ee54986b8b60d7f9d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"date": "timestamp"}}, "created_at": 1660323530.457163, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_ad_hourly_report_data`"}, "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"account_id": "INT64", "campaign_id": "INT64", "ad_group_id": "INT64", "ad_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_ad_performance_daily_report_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_ad_performance_daily_report_data.csv", "original_file_path": "seeds/microsoft_ads_ad_performance_daily_report_data.csv", "name": "microsoft_ads_ad_performance_daily_report_data", "alias": "microsoft_ads_ad_performance_daily_report_data", "checksum": {"name": "sha256", "checksum": "0b3585b6ed6c3d18c8c892a3a446231fd7d6b32b470f55f933214dfb7df0af91"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"account_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.459574, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`microsoft_ads_ad_performance_daily_report_data`"}, "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "INT64", "ad_group_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_ad_history_data.csv", "original_file_path": "seeds/microsoft_ads_ad_history_data.csv", "name": "microsoft_ads_ad_history_data", "alias": "microsoft_ads_ad_history_data", "checksum": {"name": "sha256", "checksum": "46fa2ec5ff1aa5ce0476d8a3c1c06f3fa502c1a46606bff897dfe99a06bfda35"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.462084, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`microsoft_ads_ad_history_data`"}, "seed.ad_reporting_integration_tests.snapchat_ad_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_ad_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_ad_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "snapchat_ad_account_history_data.csv", "original_file_path": "seeds/snapchat_ad_account_history_data.csv", "name": "snapchat_ad_account_history_data", "alias": "snapchat_ad_account_history_data", "checksum": {"name": "sha256", "checksum": "0e1f3a58ee6a4863bb59fbd30c286606f0de77040fbb2903ab312e5d248454cb"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.4642031, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_ad_account_history_data`"}, "seed.ad_reporting_integration_tests.apple_campaign_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "apple_campaign_report_data"], "unique_id": "seed.ad_reporting_integration_tests.apple_campaign_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "apple_campaign_report_data.csv", "original_file_path": "seeds/apple_campaign_report_data.csv", "name": "apple_campaign_report_data", "alias": "apple_campaign_report_data", "checksum": {"name": "sha256", "checksum": "a4a374475156eb8d9ddc40c43cadbcc843efcf7a55180346d2d4b875c2791ab1"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.466149, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`apple_campaign_report_data`"}, "seed.ad_reporting_integration_tests.pin_promotion_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"PIN_PROMOTION_ID": "int64", "AD_GROUP_ID": "int64", "CAMPAIGN_ID": "int64", "ADVERTISER_ID": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "pin_promotion_report_data"], "unique_id": "seed.ad_reporting_integration_tests.pin_promotion_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "pin_promotion_report_data.csv", "original_file_path": "seeds/pin_promotion_report_data.csv", "name": "pin_promotion_report_data", "alias": "pin_promotion_report_data", "checksum": {"name": "sha256", "checksum": "4aa4efcd681cab55f7e446763ed01bb5100e470b613842b655c4960674b864ac"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"PIN_PROMOTION_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "AD_GROUP_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "CAMPAIGN_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "ADVERTISER_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.46805, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`pin_promotion_report_data`"}, "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ad_group_id": "INT64", "campaign_id": "INT64", "external_customer_id": "INT64", "id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_criteria_performance_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "google_ads_criteria_performance_data.csv", "original_file_path": "seeds/google_ads_criteria_performance_data.csv", "name": "google_ads_criteria_performance_data", "alias": "google_ads_criteria_performance_data", "checksum": {"name": "sha256", "checksum": "be2dab9389efd247f0a9b6e75d28ccbe242446dee9969b8353515b1fd096d628"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "external_customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.47024, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`google_ads_criteria_performance_data`"}, "seed.ad_reporting_integration_tests.apple_organization_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "apple_organization_data"], "unique_id": "seed.ad_reporting_integration_tests.apple_organization_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "apple_organization_data.csv", "original_file_path": "seeds/apple_organization_data.csv", "name": "apple_organization_data", "alias": "apple_organization_data", "checksum": {"name": "sha256", "checksum": "bbb5878ab9c07bd1f391181a8321ea50476f37d25f36fd1d66e58d513336699c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.4722571, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`apple_organization_data`"}, "seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_creative_url_tag_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "snapchat_creative_url_tag_history_data.csv", "original_file_path": "seeds/snapchat_creative_url_tag_history_data.csv", "name": "snapchat_creative_url_tag_history_data", "alias": "snapchat_creative_url_tag_history_data", "checksum": {"name": "sha256", "checksum": "3aeaa866b995d0a735ff68d813641b1893121a6ec8733385e30e52d3e8f864fc"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.474051, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_creative_url_tag_history_data`"}, "seed.ad_reporting_integration_tests.tiktok_campaign_report_hourly_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "tiktok_campaign_report_hourly_data"], "unique_id": "seed.ad_reporting_integration_tests.tiktok_campaign_report_hourly_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "tiktok_campaign_report_hourly_data.csv", "original_file_path": "seeds/tiktok_campaign_report_hourly_data.csv", "name": "tiktok_campaign_report_hourly_data", "alias": "tiktok_campaign_report_hourly_data", "checksum": {"name": "sha256", "checksum": "24c3b6a29f99706b05478a2122a81f6e55acaa1a6d75a4e3de74bac8fbde1463"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.4758348, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_campaign_report_hourly_data`"}, "seed.ad_reporting_integration_tests.apple_ad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"creation_time": "timestamp", "modification_time": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "apple_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.apple_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "apple_ad_history_data.csv", "original_file_path": "seeds/apple_ad_history_data.csv", "name": "apple_ad_history_data", "alias": "apple_ad_history_data", "checksum": {"name": "sha256", "checksum": "6b7e388b2b1ac23dd3f2e0cc1a781099a525e921a36da2fe83f52bd207066ea8"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"creation_time": "timestamp", "modification_time": "timestamp"}}, "created_at": 1660323530.4778628, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`apple_ad_history_data`"}, "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_campaign_history_data.csv", "original_file_path": "seeds/microsoft_ads_campaign_history_data.csv", "name": "microsoft_ads_campaign_history_data", "alias": "microsoft_ads_campaign_history_data", "checksum": {"name": "sha256", "checksum": "c5b3e24279ba9df8926fe7e4c58165b0f8fa09172b222cebc2202866cb266e19"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.479792, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`microsoft_ads_campaign_history_data`"}, "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "INT64", "campaign_id": "INT64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_ad_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_ad_group_history_data.csv", "original_file_path": "seeds/microsoft_ads_ad_group_history_data.csv", "name": "microsoft_ads_ad_group_history_data", "alias": "microsoft_ads_ad_group_history_data", "checksum": {"name": "sha256", "checksum": "f63ae5a2597243253d5396752c86a4784abfc3543ba36fe9affeeec09f0cb3c8"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1660323530.48177, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`microsoft_ads_ad_group_history_data`"}, "seed.ad_reporting_integration_tests.tiktok_adgroup_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "tiktok_adgroup_history_data"], "unique_id": "seed.ad_reporting_integration_tests.tiktok_adgroup_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests", "path": "tiktok_adgroup_history_data.csv", "original_file_path": "seeds/tiktok_adgroup_history_data.csv", "name": "tiktok_adgroup_history_data", "alias": "tiktok_adgroup_history_data", "checksum": {"name": "sha256", "checksum": "eb8c0708d9aa337c0314edd8232a825c37d15acac0cc8717facfaa452747e5dc"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}"}, "created_at": 1660323530.483695, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_adgroup_history_data`"}, "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__account_daily_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__account_daily_report_tmp')),\n                staging_columns=get_account_daily_report_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        device_os,\n        device_type,\n        network,\n        currency_code, \n        ad_distribution,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks, \n        impressions,\n        spend\n        \n        {{ fivetran_utils.fill_pass_through_columns('microsoft_ads__account_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_account_daily_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__account_daily_report"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__account_daily_report.sql", "original_file_path": "models/stg_microsoft_ads__account_daily_report.sql", "name": "stg_microsoft_ads__account_daily_report", "alias": "stg_microsoft_ads__account_daily_report", "checksum": {"name": "sha256", "checksum": "13f0f5b9c0d3c8e1474867c8492a360d07f6cb1756022a352c821be8cda7af26"}, "tags": [], "refs": [["stg_microsoft_ads__account_daily_report_tmp"], ["stg_microsoft_ads__account_daily_report_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance by account and all non-metric columns.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__account_daily_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.9216352, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_daily_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_distribution\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_match_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency_code\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    delivered_match_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_os\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    string\n) as \n    \n    network\n    \n , \n    cast(null as \n    float64\n) as \n    \n    spend\n    \n , \n    cast(null as \n    string\n) as \n    \n    top_vs_other\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        device_os,\n        device_type,\n        network,\n        currency_code, \n        ad_distribution,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks, \n        impressions,\n        spend\n        \n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_daily_report`"}, "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__search_daily_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__search_daily_report_tmp')),\n                staging_columns=get_search_daily_report_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        keyword_id,\n        search_query,\n        device_os,\n        device_type,\n        network,\n        language,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks,\n        impressions,\n        spend\n\n        {{ fivetran_utils.fill_pass_through_columns('microsoft_ads__search_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_search_daily_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__search_daily_report"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__search_daily_report.sql", "original_file_path": "models/stg_microsoft_ads__search_daily_report.sql", "name": "stg_microsoft_ads__search_daily_report", "alias": "stg_microsoft_ads__search_daily_report", "checksum": {"name": "sha256", "checksum": "c776b1595930feed1c4dfa76f94f9c346ff92e0ccfe2c52275bfef45ddf71c7c"}, "tags": [], "refs": [["stg_microsoft_ads__search_daily_report_tmp"], ["stg_microsoft_ads__search_daily_report_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance by account, campaign, ad group, ad, keyword and all non-metric columns.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "The ID of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_query": {"name": "search_query", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "The language that the associated ad was viewed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__search_daily_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.9670882, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__search_daily_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_match_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    delivered_match_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_os\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    int64\n) as \n    \n    keyword_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    language\n    \n , \n    cast(null as \n    string\n) as \n    \n    network\n    \n , \n    cast(null as \n    string\n) as \n    \n    search_query\n    \n , \n    cast(null as \n    float64\n) as \n    \n    spend\n    \n , \n    cast(null as \n    string\n) as \n    \n    top_vs_other\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        keyword_id,\n        search_query,\n        device_os,\n        device_type,\n        network,\n        language,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks,\n        impressions,\n        spend\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__search_daily_report`"}, "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__keyword_daily_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__keyword_daily_report_tmp')),\n                staging_columns=get_keyword_daily_report_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        keyword_id,\n        currency_code,\n        device_os,\n        device_type,\n        network,\n        language,\n        ad_distribution,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks,\n        impressions,\n        spend\n\n        {{ fivetran_utils.fill_pass_through_columns('microsoft_ads__keyword_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_keyword_daily_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__keyword_daily_report"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__keyword_daily_report.sql", "original_file_path": "models/stg_microsoft_ads__keyword_daily_report.sql", "name": "stg_microsoft_ads__keyword_daily_report", "alias": "stg_microsoft_ads__keyword_daily_report", "checksum": {"name": "sha256", "checksum": "355959720c8f47de848c95bd42c6eefd81aeb89c02b20a3cc7e3e75098212212"}, "tags": [], "refs": [["stg_microsoft_ads__keyword_daily_report_tmp"], ["stg_microsoft_ads__keyword_daily_report_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance by account, campaign, ad group, ad, keyword and all non-metric columns.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "The ID of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "The language that the associated ad was viewed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__keyword_daily_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.9604192, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_daily_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_distribution\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_match_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency_code\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    delivered_match_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_os\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    int64\n) as \n    \n    keyword_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    language\n    \n , \n    cast(null as \n    string\n) as \n    \n    network\n    \n , \n    cast(null as \n    float64\n) as \n    \n    spend\n    \n , \n    cast(null as \n    string\n) as \n    \n    top_vs_other\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        keyword_id,\n        currency_code,\n        device_os,\n        device_type,\n        network,\n        language,\n        ad_distribution,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks,\n        impressions,\n        spend\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_daily_report`"}, "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__campaign_daily_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__campaign_daily_report_tmp')),\n                staging_columns=get_campaign_daily_report_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        currency_code,\n        device_os,\n        device_type,\n        network,\n        ad_distribution,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks,\n        impressions,\n        spend\n\n        {{ fivetran_utils.fill_pass_through_columns('microsoft_ads__campaign_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_campaign_daily_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__campaign_daily_report"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__campaign_daily_report.sql", "original_file_path": "models/stg_microsoft_ads__campaign_daily_report.sql", "name": "stg_microsoft_ads__campaign_daily_report", "alias": "stg_microsoft_ads__campaign_daily_report", "checksum": {"name": "sha256", "checksum": "350b630e95b8e31e3c5dbb9ac98db233eca65a16198d4b03059122e118488edb"}, "tags": [], "refs": [["stg_microsoft_ads__campaign_daily_report_tmp"], ["stg_microsoft_ads__campaign_daily_report_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance by account, campaign and all non-metric columns.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__campaign_daily_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.950675, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_daily_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_distribution\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_match_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency_code\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    delivered_match_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_os\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    string\n) as \n    \n    network\n    \n , \n    cast(null as \n    float64\n) as \n    \n    spend\n    \n , \n    cast(null as \n    string\n) as \n    \n    top_vs_other\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        currency_code,\n        device_os,\n        device_type,\n        network,\n        ad_distribution,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks,\n        impressions,\n        spend\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_daily_report`"}, "model.microsoft_ads_source.stg_microsoft_ads__keyword_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__keyword_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__keyword_history_tmp')),\n                staging_columns=get_keyword_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as keyword_id,\n        name as keyword_name,\n        modified_time as modified_at,\n        ad_group_id,\n        match_type,\n        status,\n        row_number() over (partition by id order by modified_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_keyword_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp", "model.microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__keyword_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__keyword_history", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__keyword_history.sql", "original_file_path": "models/stg_microsoft_ads__keyword_history.sql", "name": "stg_microsoft_ads__keyword_history", "alias": "stg_microsoft_ads__keyword_history", "checksum": {"name": "sha256", "checksum": "1ab4d19ab769d28e12c6671643ccd3abcdb71dfbabffa4dbbe0fc4b08bae4232"}, "tags": [], "refs": [["stg_microsoft_ads__keyword_history_tmp"], ["stg_microsoft_ads__keyword_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a version of one or more Microsoft keywords.", "columns": {"keyword_id": {"name": "keyword_id", "description": "The ID of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_name": {"name": "keyword_name", "description": "The keyword(s) associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "The time each version of the object was last modified, i.e. when that version of the object was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "The match type associated with this record; values contain but may not be limited to 'Broad', 'Exact', 'Phrase'. Please refer to Microsoft Ad's [documentation](https://help.ads.microsoft.com/#apex/ads/en/50822/1).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this keyword; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/keywordstatus?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__keyword_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.953686, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    modified_time\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    match_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as keyword_id,\n        name as keyword_name,\n        modified_time as modified_at,\n        ad_group_id,\n        match_type,\n        status,\n        row_number() over (partition by id order by modified_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_history`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__ad_group_daily_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__ad_group_daily_report_tmp')),\n                staging_columns=get_ad_group_daily_report_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        currency_code,\n        device_os,\n        device_type,\n        network,\n        language,\n        ad_distribution,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks,\n        impressions,\n        spend\n\n        {{ fivetran_utils.fill_pass_through_columns('microsoft_ads__ad_group_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_ad_group_daily_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_group_daily_report"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__ad_group_daily_report.sql", "original_file_path": "models/stg_microsoft_ads__ad_group_daily_report.sql", "name": "stg_microsoft_ads__ad_group_daily_report", "alias": "stg_microsoft_ads__ad_group_daily_report", "checksum": {"name": "sha256", "checksum": "1469a2b46ec430dc3226a0ce28ad9e915104811f3b4aec44e6ef28aed7b2f48d"}, "tags": [], "refs": [["stg_microsoft_ads__ad_group_daily_report_tmp"], ["stg_microsoft_ads__ad_group_daily_report_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance by account, campaign, ad group and all non-metric columns.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "The language that the associated ad was viewed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__ad_group_daily_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.931403, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_daily_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_distribution\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_match_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency_code\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    delivered_match_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_os\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    string\n) as \n    \n    language\n    \n , \n    cast(null as \n    string\n) as \n    \n    network\n    \n , \n    cast(null as \n    float64\n) as \n    \n    spend\n    \n , \n    cast(null as \n    string\n) as \n    \n    top_vs_other\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        currency_code,\n        device_os,\n        device_type,\n        network,\n        language,\n        ad_distribution,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks,\n        impressions,\n        spend\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_daily_report`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__ad_group_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__ad_group_history_tmp')),\n                staging_columns=get_ad_group_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_group_id,\n        name as ad_group_name,\n        campaign_id,\n        modified_time as modified_at,\n        start_date,\n        end_date,\n        status,\n        row_number() over (partition by id order by modified_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_ad_group_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_group_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__ad_group_history.sql", "original_file_path": "models/stg_microsoft_ads__ad_group_history.sql", "name": "stg_microsoft_ads__ad_group_history", "alias": "stg_microsoft_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "4de2e41bc989a2384df40fae5c9ab580b60bbc880b0d26c7ca84ab3937f3a7cf"}, "tags": [], "refs": [["stg_microsoft_ads__ad_group_history_tmp"], ["stg_microsoft_ads__ad_group_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a version of one or more Microsoft ad groups.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "The time each version of the object was last modified, i.e. when that version of the object was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "The date in which an ad group starts running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "The date in which this ad group will no longer run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this ad group; see the following [documentation](https://help.ads.microsoft.com/apex/index/3/en/53094) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__ad_group_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.925489, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    modified_time\n    \n , \n    cast(null as date) as \n    \n    start_date\n    \n , \n    cast(null as date) as \n    \n    end_date\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_group_id,\n        name as ad_group_name,\n        campaign_id,\n        modified_time as modified_at,\n        start_date,\n        end_date,\n        status,\n        row_number() over (partition by id order by modified_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_history`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__ad_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_id,\n        title_part_1 as ad_name,\n        final_url,\n        ad_group_id,\n        modified_time as modified_at,\n        status,\n        type,\n        row_number() over (partition by id order by modified_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history_tmp", "model.microsoft_ads_source.stg_microsoft_ads__ad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__ad_history.sql", "original_file_path": "models/stg_microsoft_ads__ad_history.sql", "name": "stg_microsoft_ads__ad_history", "alias": "stg_microsoft_ads__ad_history", "checksum": {"name": "sha256", "checksum": "8b09a143b8874327b96ac512de797191baa321edd39103216953d6badb73351d"}, "tags": [], "refs": [["stg_microsoft_ads__ad_history_tmp"], ["stg_microsoft_ads__ad_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a version of one or more Microsoft ads.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the corresponding ad; `title_part_1` is used as the ad name as a proxy as one is not provided by the data source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "The full URL that the ad links to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "The time each version of the object was last modified, i.e. when that version of the object was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this ad; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/adstatus?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The ad type associated with this record; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/adtype?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__ad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.935085, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    title_part_1\n    \n , \n    cast(null as \n    string\n) as \n    \n    final_url\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    modified_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    type\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_id,\n        title_part_1 as ad_name,\n        final_url,\n        ad_group_id,\n        modified_time as modified_at,\n        status,\n        type,\n        row_number() over (partition by id order by modified_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_history`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__ad_daily_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__ad_daily_report_tmp')),\n                staging_columns=get_ad_daily_report_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        currency_code,\n        device_os,\n        device_type,\n        network,\n        language,\n        ad_distribution,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks,\n        impressions,\n        spend\n\n        {{ fivetran_utils.fill_pass_through_columns('microsoft_ads__ad_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_ad_daily_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_daily_report"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__ad_daily_report.sql", "original_file_path": "models/stg_microsoft_ads__ad_daily_report.sql", "name": "stg_microsoft_ads__ad_daily_report", "alias": "stg_microsoft_ads__ad_daily_report", "checksum": {"name": "sha256", "checksum": "5867c7ac2235bcdddd45c7c6f48b5340184f440ff88ffcd5f53f0e7e8a8f21c6"}, "tags": [], "refs": [["stg_microsoft_ads__ad_daily_report_tmp"], ["stg_microsoft_ads__ad_daily_report_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance by account, campaign, ad group, ad and all non-metric columns.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "The language that the associated ad was viewed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__ad_daily_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.9414442, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_daily_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_distribution\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_match_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency_code\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    delivered_match_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_os\n    \n , \n    cast(null as \n    string\n) as \n    \n    device_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    string\n) as \n    \n    language\n    \n , \n    cast(null as \n    string\n) as \n    \n    network\n    \n , \n    cast(null as \n    float64\n) as \n    \n    spend\n    \n , \n    cast(null as \n    string\n) as \n    \n    top_vs_other\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        currency_code,\n        device_os,\n        device_type,\n        network,\n        language,\n        ad_distribution,\n        bid_match_type,\n        delivered_match_type,\n        top_vs_other,\n        clicks,\n        impressions,\n        spend\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_daily_report`"}, "model.microsoft_ads_source.stg_microsoft_ads__account_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__account_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        last_modified_time as modified_at,\n        time_zone,\n        currency_code,\n        row_number() over (partition by id order by last_modified_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_history_tmp", "model.microsoft_ads_source.stg_microsoft_ads__account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__account_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__account_history", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__account_history.sql", "original_file_path": "models/stg_microsoft_ads__account_history.sql", "name": "stg_microsoft_ads__account_history", "alias": "stg_microsoft_ads__account_history", "checksum": {"name": "sha256", "checksum": "39eeb4c34161dd3e6ccee2310eb51adae09769ee8dca6b2e22d7d421048698e6"}, "tags": [], "refs": [["stg_microsoft_ads__account_history_tmp"], ["stg_microsoft_ads__account_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a version of one or more Microsoft accounts.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "The time each version of the object was last modified, i.e. when that version of the object was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.9167712, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    last_modified_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    time_zone\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency_code\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        last_modified_time as modified_at,\n        time_zone,\n        currency_code,\n        row_number() over (partition by id order by last_modified_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history`"}, "model.microsoft_ads_source.stg_microsoft_ads__campaign_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_microsoft_ads__campaign_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_microsoft_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id,\n        name as campaign_name,\n        account_id,\n        modified_time as modified_at,\n        type,\n        time_zone,\n        status,\n        row_number() over (partition by id order by modified_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.microsoft_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__campaign_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__campaign_history.sql", "original_file_path": "models/stg_microsoft_ads__campaign_history.sql", "name": "stg_microsoft_ads__campaign_history", "alias": "stg_microsoft_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "c47ff718f4a476f21216ecc8fee70546821ffa8af1b6309a6a88bde23e6ce763"}, "tags": [], "refs": [["stg_microsoft_ads__campaign_history_tmp"], ["stg_microsoft_ads__campaign_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a version of one or more Microsoft campaigns.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "The time each version of the object was last modified, i.e. when that version of the object was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The campaign type associated with this record; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/campaigntype?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this campaign; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/campaignstatus?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323533.9453702, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    modified_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    type\n    \n , \n    cast(null as \n    string\n) as \n    \n    time_zone\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id,\n        name as campaign_name,\n        account_id,\n        modified_time as modified_at,\n        type,\n        time_zone,\n        status,\n        row_number() over (partition by id order by modified_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history`"}, "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('search_performance_daily_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.microsoft_ads_source.microsoft_ads.search_query_performance_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__search_daily_report_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__search_daily_report_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__search_daily_report_tmp.sql", "name": "stg_microsoft_ads__search_daily_report_tmp", "alias": "stg_microsoft_ads__search_daily_report_tmp", "checksum": {"name": "sha256", "checksum": "9b8d4452caa10568d6716c0c6b39598a962e60ca1859c4902ad9f7ad2bd28626"}, "tags": [], "refs": [], "sources": [["microsoft_ads", "search_query_performance_daily_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__search_daily_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.697243, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`bingads`.`search_query_performance_daily_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__search_daily_report_tmp`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('ad_group_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__ad_group_history_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__ad_group_history_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__ad_group_history_tmp.sql", "name": "stg_microsoft_ads__ad_group_history_tmp", "alias": "stg_microsoft_ads__ad_group_history_tmp", "checksum": {"name": "sha256", "checksum": "0aebf1d34a59e00211f044b66e94c2d5141b3c0fc7b152dbdc769942a2da1c6e"}, "tags": [], "refs": [["microsoft_ads_ad_group_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__ad_group_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.7037818, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`microsoft_ads_ad_group_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_history_tmp`"}, "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('campaign_performance_daily_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.microsoft_ads_source.microsoft_ads.campaign_performance_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__campaign_daily_report_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__campaign_daily_report_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__campaign_daily_report_tmp.sql", "name": "stg_microsoft_ads__campaign_daily_report_tmp", "alias": "stg_microsoft_ads__campaign_daily_report_tmp", "checksum": {"name": "sha256", "checksum": "673ffabe992b47d945786bc8f91ad5d586854df386a3bb40ddae76d7ad41da33"}, "tags": [], "refs": [], "sources": [["microsoft_ads", "campaign_performance_daily_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__campaign_daily_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.709485, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`bingads`.`campaign_performance_daily_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_daily_report_tmp`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('ad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__ad_history_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_history_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__ad_history_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__ad_history_tmp.sql", "name": "stg_microsoft_ads__ad_history_tmp", "alias": "stg_microsoft_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "f1af9df8b7a8c5f0eae62106592b9c8719d3f8ff9bd09f6d4f868a46b0acd0af"}, "tags": [], "refs": [["microsoft_ads_ad_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__ad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.715775, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`microsoft_ads_ad_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_history_tmp`"}, "model.microsoft_ads_source.stg_microsoft_ads__account_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__account_history_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__account_history_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__account_history_tmp.sql", "name": "stg_microsoft_ads__account_history_tmp", "alias": "stg_microsoft_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "f326243a07088f5fde31cda73d5ada38bc95edbb0acd6f20b1cc479d076eeeed"}, "tags": [], "refs": [["microsoft_ads_account_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.7214458, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`microsoft_ads_account_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history_tmp`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('ad_performance_daily_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__ad_daily_report_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__ad_daily_report_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__ad_daily_report_tmp.sql", "name": "stg_microsoft_ads__ad_daily_report_tmp", "alias": "stg_microsoft_ads__ad_daily_report_tmp", "checksum": {"name": "sha256", "checksum": "4cf26ae811cd73631d86eee119cf79e71fd008b630b39e2e4d9bec63df999506"}, "tags": [], "refs": [["microsoft_ads_ad_performance_daily_report_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__ad_daily_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.7272608, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`microsoft_ads_ad_performance_daily_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_daily_report_tmp`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('ad_group_performance_daily_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.microsoft_ads_source.microsoft_ads.ad_group_performance_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__ad_group_daily_report_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__ad_group_daily_report_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__ad_group_daily_report_tmp.sql", "name": "stg_microsoft_ads__ad_group_daily_report_tmp", "alias": "stg_microsoft_ads__ad_group_daily_report_tmp", "checksum": {"name": "sha256", "checksum": "57f3f8acc0b43e57bba5c441bff246ada9d9ff8715098271628ac5122138dd0e"}, "tags": [], "refs": [], "sources": [["microsoft_ads", "ad_group_performance_daily_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__ad_group_daily_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.733143, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`bingads`.`ad_group_performance_daily_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_daily_report_tmp`"}, "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('keyword_performance_daily_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.microsoft_ads_source.microsoft_ads.keyword_performance_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__keyword_daily_report_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__keyword_daily_report_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__keyword_daily_report_tmp.sql", "name": "stg_microsoft_ads__keyword_daily_report_tmp", "alias": "stg_microsoft_ads__keyword_daily_report_tmp", "checksum": {"name": "sha256", "checksum": "ba23d7a4b13beac610573f8c6f8b5ba0ab4305b00e4453b7da4383c06062b9a7"}, "tags": [], "refs": [], "sources": [["microsoft_ads", "keyword_performance_daily_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__keyword_daily_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.739787, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`bingads`.`keyword_performance_daily_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_daily_report_tmp`"}, "model.microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('keyword_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.microsoft_ads_source.microsoft_ads.keyword_history"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__keyword_history_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__keyword_history_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__keyword_history_tmp.sql", "name": "stg_microsoft_ads__keyword_history_tmp", "alias": "stg_microsoft_ads__keyword_history_tmp", "checksum": {"name": "sha256", "checksum": "3d52da52eb899f748854c603db39c3fc0971a2140d4515e10c9f41623cc3bd3c"}, "tags": [], "refs": [], "sources": [["microsoft_ads", "keyword_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__keyword_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.7457678, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`bingads`.`keyword_history`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_history_tmp`"}, "model.microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__campaign_history_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__campaign_history_tmp.sql", "name": "stg_microsoft_ads__campaign_history_tmp", "alias": "stg_microsoft_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "c4a882096d8a71aaee29080771645afbd99d3f680b5575cc798abbeb0925291d"}, "tags": [], "refs": [["microsoft_ads_campaign_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.751908, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`microsoft_ads_campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history_tmp`"}, "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('account_performance_daily_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.microsoft_ads_source.microsoft_ads.account_performance_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads_source", "fqn": ["microsoft_ads_source", "tmp", "stg_microsoft_ads__account_daily_report_tmp"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "tmp/stg_microsoft_ads__account_daily_report_tmp.sql", "original_file_path": "models/tmp/stg_microsoft_ads__account_daily_report_tmp.sql", "name": "stg_microsoft_ads__account_daily_report_tmp", "alias": "stg_microsoft_ads__account_daily_report_tmp", "checksum": {"name": "sha256", "checksum": "f7861bfb9f1931e450f018bf995c5eb19f2f0a79efb7d426e69b28965d637aa5"}, "tags": [], "refs": [], "sources": [["microsoft_ads", "account_performance_daily_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/tmp/stg_microsoft_ads__account_daily_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323530.7578769, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`bingads`.`account_performance_daily_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_daily_report_tmp`"}, "model.tiktok_ads.tiktok_ads__ad_group_report": {"raw_sql": "with hourly as (\n    \n    select *\n    from {{ var('ad_group_report_hourly') }}\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record\n), \n\nadvertiser as (\n\n    select *\n    from {{ var('advertiser') }}\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record\n), \n\naggregated as (\n\n    select\n        cast(hourly.stat_time_hour as date) as date_day,\n        ad_groups.advertiser_id,\n        advertiser.advertiser_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        hourly.ad_group_id,\n        ad_groups.ad_group_name,\n        advertiser.currency,\n        ad_groups.action_categories,\n        ad_groups.category,\n        ad_groups.gender,\n        ad_groups.audience_type,\n        ad_groups.budget,\n        ad_groups.age,\n        ad_groups.languages,\n        ad_groups.interest_category,\n        sum(hourly.impressions) as impressions,\n        sum(hourly.clicks) as clicks,\n        sum(hourly.spend) as spend,\n        sum(hourly.reach) as reach,\n        sum(hourly.conversion) as conversion,\n        sum(hourly.likes) as likes,\n        sum(hourly.comments) as comments,\n        sum(hourly.shares) as shares,\n        sum(hourly.profile_visits) as profile_visits,\n        sum(hourly.follows) as follows,\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\n        sum(hourly.video_views_p_25) as video_views_p_25,\n        sum(hourly.video_views_p_50) as video_views_p_50, \n        sum(hourly.video_views_p_75) as video_views_p_75,\n        sum(hourly.spend)/nullif(sum(hourly.clicks),0) as daily_cpc,\n        (sum(hourly.spend)/nullif(sum(hourly.impressions),0))*1000 as daily_cpm,\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions),0))*100 as daily_ctr\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='tiktok_ads__ad_group_hourly_passthrough_metrics', transform = 'sum') }}\n    from hourly\n    left join ad_groups \n        on hourly.ad_group_id = ad_groups.ad_group_id\n    left join advertiser\n        on ad_groups.advertiser_id = advertiser.advertiser_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    {{ dbt_utils.group_by(16) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history", "model.tiktok_ads_source.stg_tiktok_ads__advertiser", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_tiktok_ads", "fqn": ["tiktok_ads", "tiktok_ads__ad_group_report"], "unique_id": "model.tiktok_ads.tiktok_ads__ad_group_report", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "tiktok_ads__ad_group_report.sql", "original_file_path": "models/tiktok_ads__ad_group_report.sql", "name": "tiktok_ads__ad_group_report", "alias": "tiktok_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "baaa7ee39877b86fe30f613845880c1c5460019ca1c27eda1b482e2a36bdeecb"}, "tags": [], "refs": [["stg_tiktok_ads__ad_group_report_hourly"], ["stg_tiktok_ads__ad_group_history"], ["stg_tiktok_ads__advertiser"], ["stg_tiktok_ads__campaign_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the ad group level.", "columns": {"date_day": {"name": "date_day", "description": "Day of record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Advertiser name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Advertiser's currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_categories": {"name": "action_categories", "description": "IDs of the action categories (behaviors) that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "age": {"name": "age", "description": "Age groups you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "audience_type": {"name": "audience_type", "description": "Audience Type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget": {"name": "budget", "description": "Ad budget. Returns 0.0 when Campaign Budget Optimization (budget_optimize_switch) is on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Ad group category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interest_category": {"name": "interest_category", "description": "Interest classification. If the interest is specified, users that do not meet interest target will be excluded during delivery.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "languages": {"name": "languages", "description": "Codes of the languages that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.   As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns.  Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of follows that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_cpc": {"name": "daily_cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_cpm": {"name": "daily_cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_ctr": {"name": "daily_ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads://models/tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads__ad_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "tiktok_ads", "materialized": "table"}, "created_at": 1660323534.117373, "compiled_sql": "with hourly as (\n    \n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_report_hourly`\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_history`\n    where is_most_recent_record\n), \n\nadvertiser as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__advertiser`\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_history`\n    where is_most_recent_record\n), \n\naggregated as (\n\n    select\n        cast(hourly.stat_time_hour as date) as date_day,\n        ad_groups.advertiser_id,\n        advertiser.advertiser_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        hourly.ad_group_id,\n        ad_groups.ad_group_name,\n        advertiser.currency,\n        ad_groups.action_categories,\n        ad_groups.category,\n        ad_groups.gender,\n        ad_groups.audience_type,\n        ad_groups.budget,\n        ad_groups.age,\n        ad_groups.languages,\n        ad_groups.interest_category,\n        sum(hourly.impressions) as impressions,\n        sum(hourly.clicks) as clicks,\n        sum(hourly.spend) as spend,\n        sum(hourly.reach) as reach,\n        sum(hourly.conversion) as conversion,\n        sum(hourly.likes) as likes,\n        sum(hourly.comments) as comments,\n        sum(hourly.shares) as shares,\n        sum(hourly.profile_visits) as profile_visits,\n        sum(hourly.follows) as follows,\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\n        sum(hourly.video_views_p_25) as video_views_p_25,\n        sum(hourly.video_views_p_50) as video_views_p_50, \n        sum(hourly.video_views_p_75) as video_views_p_75,\n        sum(hourly.spend)/nullif(sum(hourly.clicks),0) as daily_cpc,\n        (sum(hourly.spend)/nullif(sum(hourly.impressions),0))*1000 as daily_cpm,\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions),0))*100 as daily_ctr\n\n        \n\n\n\n\n    from hourly\n    left join ad_groups \n        on hourly.ad_group_id = ad_groups.ad_group_id\n    left join advertiser\n        on ad_groups.advertiser_id = advertiser.advertiser_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__ad_group_report`"}, "model.tiktok_ads.tiktok_ads__url_report": {"raw_sql": "with hourly as (\n    \n    select *\n    from {{ var('ad_report_hourly') }}\n), \n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record\n), \n\nadvertiser as (\n\n    select *\n    from {{ var('advertiser') }}\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record\n), \n\naggregated as (\n\n    select\n        cast(hourly.stat_time_hour as date) as date_day,\n        ad_groups.advertiser_id,\n        advertiser.advertiser_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_groups.ad_group_id,\n        ad_groups.ad_group_name,\n        hourly.ad_id,\n        ads.ad_name,\n        ads.base_url,\n        ads.url_host,\n        ads.url_path,\n        ads.utm_source,\n        ads.utm_medium,\n        ads.utm_campaign,\n        ads.utm_content,\n        ads.utm_term,\n        advertiser.currency,\n        ad_groups.action_categories,\n        ad_groups.category,\n        ad_groups.gender,\n        ad_groups.audience_type,\n        ad_groups.budget,\n        ad_groups.age,\n        ad_groups.languages,\n        ad_groups.interest_category,\n        sum(hourly.impressions) as impressions,\n        sum(hourly.clicks) as clicks,\n        sum(hourly.spend) as spend,\n        sum(hourly.reach) as reach,\n        sum(hourly.conversion) as conversion,\n        sum(hourly.likes) as likes,\n        sum(hourly.comments) as comments,\n        sum(hourly.shares) as shares,\n        sum(hourly.profile_visits) as profile_visits,\n        sum(hourly.follows) as follows,\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\n        sum(hourly.video_views_p_25) as video_views_p_25,\n        sum(hourly.video_views_p_50) as video_views_p_50, \n        sum(hourly.video_views_p_75) as video_views_p_75,\n        sum(hourly.spend)/nullif(sum(hourly.clicks),0) as daily_cpc,\n        (sum(hourly.spend)/nullif(sum(hourly.impressions),0))*1000 as daily_cpm,\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions),0))*100 as daily_ctr\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='tiktok_ads__ad_hourly_passthrough_metrics', transform = 'sum') }}\n    from hourly\n    left join ads\n        on hourly.ad_id = ads.ad_id\n    left join ad_groups \n        on ads.ad_group_id = ad_groups.ad_group_id\n    left join advertiser\n        on ads.advertiser_id = advertiser.advertiser_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n\n    -- We are filtering for only ads where url fields are populated.\n    where ads.landing_page_url is not null\n    {{ dbt_utils.group_by(26) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__ad_history", "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history", "model.tiktok_ads_source.stg_tiktok_ads__advertiser", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_tiktok_ads", "fqn": ["tiktok_ads", "tiktok_ads__url_report"], "unique_id": "model.tiktok_ads.tiktok_ads__url_report", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "tiktok_ads__url_report.sql", "original_file_path": "models/tiktok_ads__url_report.sql", "name": "tiktok_ads__url_report", "alias": "tiktok_ads__url_report", "checksum": {"name": "sha256", "checksum": "d659cbb34548f2b9066e7033d63d6b6b84977caaa753b41c4af5c94e84d4a8ca"}, "tags": [], "refs": [["stg_tiktok_ads__ad_report_hourly"], ["stg_tiktok_ads__ad_history"], ["stg_tiktok_ads__ad_group_history"], ["stg_tiktok_ads__advertiser"], ["stg_tiktok_ads__campaign_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the URL level.", "columns": {"date_day": {"name": "date_day", "description": "Day of record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "Ad ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Ad name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Advertiser name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `landing page url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `landing page url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `landing page url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `landing page url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `landing page url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `landing page url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `landing page url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `landing page url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_categories": {"name": "action_categories", "description": "IDs of the action categories (behaviors) that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "age": {"name": "age", "description": "Age groups you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "audience_type": {"name": "audience_type", "description": "Audience Type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget": {"name": "budget", "description": "Ad budget. Returns 0.0 when Campaign Budget Optimization (budget_optimize_switch) is on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Ad group category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interest_category": {"name": "interest_category", "description": "Interest classification. If the interest is specified, users that do not meet interest target will be excluded during delivery.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "languages": {"name": "languages", "description": "Codes of the languages that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Advertiser's currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.   As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns.  Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of follows that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_cpc": {"name": "daily_cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_cpm": {"name": "daily_cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_ctr": {"name": "daily_ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads://models/tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads__url_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "tiktok_ads", "materialized": "table"}, "created_at": 1660323534.1398022, "compiled_sql": "with hourly as (\n    \n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_report_hourly`\n), \n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_history`\n    where is_most_recent_record\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_history`\n    where is_most_recent_record\n), \n\nadvertiser as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__advertiser`\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_history`\n    where is_most_recent_record\n), \n\naggregated as (\n\n    select\n        cast(hourly.stat_time_hour as date) as date_day,\n        ad_groups.advertiser_id,\n        advertiser.advertiser_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_groups.ad_group_id,\n        ad_groups.ad_group_name,\n        hourly.ad_id,\n        ads.ad_name,\n        ads.base_url,\n        ads.url_host,\n        ads.url_path,\n        ads.utm_source,\n        ads.utm_medium,\n        ads.utm_campaign,\n        ads.utm_content,\n        ads.utm_term,\n        advertiser.currency,\n        ad_groups.action_categories,\n        ad_groups.category,\n        ad_groups.gender,\n        ad_groups.audience_type,\n        ad_groups.budget,\n        ad_groups.age,\n        ad_groups.languages,\n        ad_groups.interest_category,\n        sum(hourly.impressions) as impressions,\n        sum(hourly.clicks) as clicks,\n        sum(hourly.spend) as spend,\n        sum(hourly.reach) as reach,\n        sum(hourly.conversion) as conversion,\n        sum(hourly.likes) as likes,\n        sum(hourly.comments) as comments,\n        sum(hourly.shares) as shares,\n        sum(hourly.profile_visits) as profile_visits,\n        sum(hourly.follows) as follows,\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\n        sum(hourly.video_views_p_25) as video_views_p_25,\n        sum(hourly.video_views_p_50) as video_views_p_50, \n        sum(hourly.video_views_p_75) as video_views_p_75,\n        sum(hourly.spend)/nullif(sum(hourly.clicks),0) as daily_cpc,\n        (sum(hourly.spend)/nullif(sum(hourly.impressions),0))*1000 as daily_cpm,\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions),0))*100 as daily_ctr\n\n        \n\n\n\n\n    from hourly\n    left join ads\n        on hourly.ad_id = ads.ad_id\n    left join ad_groups \n        on ads.ad_group_id = ad_groups.ad_group_id\n    left join advertiser\n        on ads.advertiser_id = advertiser.advertiser_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n\n    -- We are filtering for only ads where url fields are populated.\n    where ads.landing_page_url is not null\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__url_report`"}, "model.tiktok_ads.tiktok_ads__campaign_report": {"raw_sql": "with hourly as (\n    \n    select *\n    from {{ var('campaign_report_hourly') }}\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record\n), \n\nadvertiser as (\n\n    select *\n    from {{ var('advertiser') }}\n), \n\naggregated as (\n\n    select\n        cast(hourly.stat_time_hour as date) as date_day,\n        advertiser.advertiser_id,\n        advertiser.advertiser_name,\n        hourly.campaign_id,\n        campaigns.campaign_name,\n        advertiser.currency,\n        sum(hourly.impressions) as impressions,\n        sum(hourly.clicks) as clicks,\n        sum(hourly.spend) as spend,\n        sum(hourly.reach) as reach,\n        sum(hourly.conversion) as conversion,\n        sum(hourly.likes) as likes,\n        sum(hourly.comments) as comments,\n        sum(hourly.shares) as shares,\n        sum(hourly.profile_visits) as profile_visits,\n        sum(hourly.follows) as follows,\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\n        sum(hourly.video_views_p_25) as video_views_p_25,\n        sum(hourly.video_views_p_50) as video_views_p_50, \n        sum(hourly.video_views_p_75) as video_views_p_75,\n        sum(hourly.spend)/nullif(sum(hourly.clicks),0) as daily_cpc,\n        (sum(hourly.spend)/nullif(sum(hourly.impressions),0))*1000 as daily_cpm,\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions),0))*100 as daily_ctr\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='tiktok_ads__campaign_hourly_passthrough_metrics', transform = 'sum') }}\n    from hourly\n    left join campaigns\n        on hourly.campaign_id = campaigns.campaign_id\n    left join advertiser\n        on campaigns.advertiser_id = advertiser.advertiser_id\n    {{ dbt_utils.group_by(6) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history", "model.tiktok_ads_source.stg_tiktok_ads__advertiser"]}, "config": {"enabled": true, "alias": null, "schema": "tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_tiktok_ads", "fqn": ["tiktok_ads", "tiktok_ads__campaign_report"], "unique_id": "model.tiktok_ads.tiktok_ads__campaign_report", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "tiktok_ads__campaign_report.sql", "original_file_path": "models/tiktok_ads__campaign_report.sql", "name": "tiktok_ads__campaign_report", "alias": "tiktok_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "765a25c6f6d83c9fd7eb490aa13f3ea698722e333b7849d5ca933627a1b5ff3e"}, "tags": [], "refs": [["stg_tiktok_ads__campaign_report_hourly"], ["stg_tiktok_ads__campaign_history"], ["stg_tiktok_ads__advertiser"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance at the campaign level.", "columns": {"date_day": {"name": "date_day", "description": "Day of record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Advertiser name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.   As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns.  Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of follows that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_cpc": {"name": "daily_cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_cpm": {"name": "daily_cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_daily_ctr": {"name": "daily_daily_ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads://models/tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "tiktok_ads", "materialized": "table"}, "created_at": 1660323534.1253629, "compiled_sql": "with hourly as (\n    \n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_report_hourly`\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_history`\n    where is_most_recent_record\n), \n\nadvertiser as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__advertiser`\n), \n\naggregated as (\n\n    select\n        cast(hourly.stat_time_hour as date) as date_day,\n        advertiser.advertiser_id,\n        advertiser.advertiser_name,\n        hourly.campaign_id,\n        campaigns.campaign_name,\n        advertiser.currency,\n        sum(hourly.impressions) as impressions,\n        sum(hourly.clicks) as clicks,\n        sum(hourly.spend) as spend,\n        sum(hourly.reach) as reach,\n        sum(hourly.conversion) as conversion,\n        sum(hourly.likes) as likes,\n        sum(hourly.comments) as comments,\n        sum(hourly.shares) as shares,\n        sum(hourly.profile_visits) as profile_visits,\n        sum(hourly.follows) as follows,\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\n        sum(hourly.video_views_p_25) as video_views_p_25,\n        sum(hourly.video_views_p_50) as video_views_p_50, \n        sum(hourly.video_views_p_75) as video_views_p_75,\n        sum(hourly.spend)/nullif(sum(hourly.clicks),0) as daily_cpc,\n        (sum(hourly.spend)/nullif(sum(hourly.impressions),0))*1000 as daily_cpm,\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions),0))*100 as daily_ctr\n\n        \n\n\n\n\n    from hourly\n    left join campaigns\n        on hourly.campaign_id = campaigns.campaign_id\n    left join advertiser\n        on campaigns.advertiser_id = advertiser.advertiser_id\n    group by 1,2,3,4,5,6\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__campaign_report`"}, "model.tiktok_ads.tiktok_ads__ad_report": {"raw_sql": "with hourly as (\n    \n    select *\n    from {{ var('ad_report_hourly') }}\n), \n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record\n), \n\nadvertiser as (\n\n    select *\n    from {{ var('advertiser') }}\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record\n),\n\naggregated as (\n\n    select\n        cast(hourly.stat_time_hour as date) as date_day,\n        ad_groups.advertiser_id,\n        advertiser.advertiser_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_groups.ad_group_id,\n        ad_groups.ad_group_name,\n        hourly.ad_id,\n        ads.ad_name,\n        advertiser.currency,\n        ad_groups.category,\n        ad_groups.action_categories,\n        ad_groups.gender,\n        ad_groups.audience_type,\n        ad_groups.budget,\n        ad_groups.age,\n        ad_groups.languages,\n        ad_groups.interest_category,\n        sum(hourly.impressions) as impressions,\n        sum(hourly.clicks) as clicks,\n        sum(hourly.spend) as spend,\n        sum(hourly.reach) as reach,\n        sum(hourly.conversion) as conversion,\n        sum(hourly.likes) as likes,\n        sum(hourly.comments) as comments,\n        sum(hourly.shares) as shares,\n        sum(hourly.profile_visits) as profile_visits,\n        sum(hourly.follows) as follows,\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\n        sum(hourly.video_views_p_25) as video_views_p_25,\n        sum(hourly.video_views_p_50) as video_views_p_50, \n        sum(hourly.video_views_p_75) as video_views_p_75,\n        sum(hourly.spend)/nullif(sum(hourly.clicks),0) as daily_cpc,\n        (sum(hourly.spend)/nullif(sum(hourly.impressions),0))*1000 as daily_cpm,\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions),0))*100 as daily_ctr\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='tiktok_ads__ad_hourly_passthrough_metrics', transform = 'sum') }}\n    from hourly\n    left join ads\n        on hourly.ad_id = ads.ad_id\n    left join ad_groups \n        on ads.ad_group_id = ad_groups.ad_group_id\n    left join advertiser\n        on ads.advertiser_id = advertiser.advertiser_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n    {{ dbt_utils.group_by(18) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__ad_history", "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history", "model.tiktok_ads_source.stg_tiktok_ads__advertiser", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_tiktok_ads", "fqn": ["tiktok_ads", "tiktok_ads__ad_report"], "unique_id": "model.tiktok_ads.tiktok_ads__ad_report", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "tiktok_ads__ad_report.sql", "original_file_path": "models/tiktok_ads__ad_report.sql", "name": "tiktok_ads__ad_report", "alias": "tiktok_ads__ad_report", "checksum": {"name": "sha256", "checksum": "3132f8b92f9c47b988d0e32bde21687b3bd9c51c6f4f98c54e27dd61ffd96980"}, "tags": [], "refs": [["stg_tiktok_ads__ad_report_hourly"], ["stg_tiktok_ads__ad_history"], ["stg_tiktok_ads__ad_group_history"], ["stg_tiktok_ads__advertiser"], ["stg_tiktok_ads__campaign_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the ad level.", "columns": {"date_day": {"name": "date_day", "description": "Day of record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "Ad ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Ad name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Advertiser name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_categories": {"name": "action_categories", "description": "IDs of the action categories (behaviors) that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "age": {"name": "age", "description": "Age groups you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "audience_type": {"name": "audience_type", "description": "Audience Type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget": {"name": "budget", "description": "Ad budget. Returns 0.0 when Campaign Budget Optimization (budget_optimize_switch) is on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Ad group category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interest_category": {"name": "interest_category", "description": "Interest classification. If the interest is specified, users that do not meet interest target will be excluded during delivery.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "languages": {"name": "languages", "description": "Codes of the languages that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Advertiser's currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.   As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns.  Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of follows that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_cpc": {"name": "daily_cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_cpm": {"name": "daily_cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_ctr": {"name": "daily_ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads://models/tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads__ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "tiktok_ads", "materialized": "table"}, "created_at": 1660323534.105663, "compiled_sql": "with hourly as (\n    \n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_report_hourly`\n), \n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_history`\n    where is_most_recent_record\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_history`\n    where is_most_recent_record\n), \n\nadvertiser as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__advertiser`\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_history`\n    where is_most_recent_record\n),\n\naggregated as (\n\n    select\n        cast(hourly.stat_time_hour as date) as date_day,\n        ad_groups.advertiser_id,\n        advertiser.advertiser_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_groups.ad_group_id,\n        ad_groups.ad_group_name,\n        hourly.ad_id,\n        ads.ad_name,\n        advertiser.currency,\n        ad_groups.category,\n        ad_groups.action_categories,\n        ad_groups.gender,\n        ad_groups.audience_type,\n        ad_groups.budget,\n        ad_groups.age,\n        ad_groups.languages,\n        ad_groups.interest_category,\n        sum(hourly.impressions) as impressions,\n        sum(hourly.clicks) as clicks,\n        sum(hourly.spend) as spend,\n        sum(hourly.reach) as reach,\n        sum(hourly.conversion) as conversion,\n        sum(hourly.likes) as likes,\n        sum(hourly.comments) as comments,\n        sum(hourly.shares) as shares,\n        sum(hourly.profile_visits) as profile_visits,\n        sum(hourly.follows) as follows,\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\n        sum(hourly.video_views_p_25) as video_views_p_25,\n        sum(hourly.video_views_p_50) as video_views_p_50, \n        sum(hourly.video_views_p_75) as video_views_p_75,\n        sum(hourly.spend)/nullif(sum(hourly.clicks),0) as daily_cpc,\n        (sum(hourly.spend)/nullif(sum(hourly.impressions),0))*1000 as daily_cpm,\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions),0))*100 as daily_ctr\n\n        \n\n\n\n\n    from hourly\n    left join ads\n        on hourly.ad_id = ads.ad_id\n    left join ad_groups \n        on ads.ad_group_id = ad_groups.ad_group_id\n    left join advertiser\n        on ads.advertiser_id = advertiser.advertiser_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__ad_report`"}, "model.tiktok_ads.tiktok_ads__advertiser_report": {"raw_sql": "with hourly as (\n    \n    select *\n    from {{ var('ad_report_hourly') }}\n),\n\nadvertiser as (\n\n    select *\n    from {{ var('advertiser') }}\n), \n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record\n), \n\njoined as (\n\n    select\n        cast(hourly.stat_time_hour as date) as date_day,\n        ads.advertiser_id,\n        advertiser.advertiser_name,\n        advertiser.currency,\n        sum(hourly.clicks) as clicks,\n        sum(hourly.impressions) as impressions,\n        sum(hourly.spend) as spend,\n        sum(hourly.reach) as reach,\n        sum(hourly.conversion) as conversion,\n        sum(hourly.likes) as likes,\n        sum(hourly.comments) as comments,\n        sum(hourly.shares) as shares,\n        sum(hourly.profile_visits) as profile_visits,\n        sum(hourly.follows) as follows,\n        sum(hourly.video_watched_2_s) as video_watched_2_s, \n        sum(hourly.video_watched_6_s) as video_watched_6_s, \n        sum(hourly.video_views_p_25) as video_views_p_25, \n        sum(hourly.video_views_p_50) as video_views_p_50,\n        sum(hourly.video_views_p_75) as video_views_p_75,\n        sum(hourly.spend)/nullif(sum(hourly.clicks),0) as daily_cpc,\n        (sum(hourly.spend)/nullif(sum(hourly.impressions),0))*1000 as daily_cpm,\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions),0))*100 as daily_ctr\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='tiktok_ads__ad_hourly_passthrough_metrics', transform = 'sum') }}\n    from hourly\n    left join ads\n        on hourly.ad_id = ads.ad_id\n    left join advertiser\n        on ads.advertiser_id = advertiser.advertiser_id\n    {{ dbt_utils.group_by(4) }}\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__advertiser", "model.tiktok_ads_source.stg_tiktok_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_tiktok_ads", "fqn": ["tiktok_ads", "tiktok_ads__advertiser_report"], "unique_id": "model.tiktok_ads.tiktok_ads__advertiser_report", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "tiktok_ads__advertiser_report.sql", "original_file_path": "models/tiktok_ads__advertiser_report.sql", "name": "tiktok_ads__advertiser_report", "alias": "tiktok_ads__advertiser_report", "checksum": {"name": "sha256", "checksum": "f61772ed4387688db786efcf77ce2f587228e006ccbe3ec6bfe2a064d472116f"}, "tags": [], "refs": [["stg_tiktok_ads__ad_report_hourly"], ["stg_tiktok_ads__advertiser"], ["stg_tiktok_ads__ad_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the account level.", "columns": {"date_day": {"name": "date_day", "description": "Day of record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Advertiser name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Advertiser's currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.   As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns.  Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of follows that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_cpc": {"name": "daily_cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_cpm": {"name": "daily_cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_ctr": {"name": "daily_ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads://models/tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads__advertiser_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "tiktok_ads", "materialized": "table"}, "created_at": 1660323534.094465, "compiled_sql": "with hourly as (\n    \n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_report_hourly`\n),\n\nadvertiser as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__advertiser`\n), \n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_history`\n    where is_most_recent_record\n), \n\njoined as (\n\n    select\n        cast(hourly.stat_time_hour as date) as date_day,\n        ads.advertiser_id,\n        advertiser.advertiser_name,\n        advertiser.currency,\n        sum(hourly.clicks) as clicks,\n        sum(hourly.impressions) as impressions,\n        sum(hourly.spend) as spend,\n        sum(hourly.reach) as reach,\n        sum(hourly.conversion) as conversion,\n        sum(hourly.likes) as likes,\n        sum(hourly.comments) as comments,\n        sum(hourly.shares) as shares,\n        sum(hourly.profile_visits) as profile_visits,\n        sum(hourly.follows) as follows,\n        sum(hourly.video_watched_2_s) as video_watched_2_s, \n        sum(hourly.video_watched_6_s) as video_watched_6_s, \n        sum(hourly.video_views_p_25) as video_views_p_25, \n        sum(hourly.video_views_p_50) as video_views_p_50,\n        sum(hourly.video_views_p_75) as video_views_p_75,\n        sum(hourly.spend)/nullif(sum(hourly.clicks),0) as daily_cpc,\n        (sum(hourly.spend)/nullif(sum(hourly.impressions),0))*1000 as daily_cpm,\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions),0))*100 as daily_ctr\n\n        \n\n\n\n\n    from hourly\n    left join ads\n        on hourly.ad_id = ads.ad_id\n    left join advertiser\n        on ads.advertiser_id = advertiser.advertiser_id\n    group by 1,2,3,4\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__advertiser_report`"}, "model.twitter_ads.twitter_ads__account_report": {"raw_sql": "with accounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\npromoted_tweet_report as (\n    \n    select *\n    from {{ var('promoted_tweet_report') }}\n),\n\nrollup_report as (\n\n    select \n        date_day,\n        account_id,\n        placement,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions,\n        sum(spend) as spend,\n        sum(spend_micro) as spend_micro,\n        sum(url_clicks) as url_clicks\n\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__promoted_tweet_report_passthrough_metrics', transform='sum') }}\n\n    from promoted_tweet_report\n    group by 1,2,3\n\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        accounts.is_deleted,\n        accounts.timezone,\n        accounts.industry_type,\n        accounts.approval_status,\n        accounts.business_name,\n        accounts.business_id,\n        accounts.created_timestamp,\n        accounts.updated_timestamp,\n        accounts.timezone_switched_timestamp,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__promoted_tweet_report_passthrough_metrics', transform='sum') }}\n\n    from rollup_report as report\n    left join accounts \n        on report.account_id = accounts.account_id\n\n    {{ dbt_utils.group_by(n=13) }}\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads", "fqn": ["twitter_ads", "twitter_ads__account_report"], "unique_id": "model.twitter_ads.twitter_ads__account_report", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "twitter_ads__account_report.sql", "original_file_path": "models/twitter_ads__account_report.sql", "name": "twitter_ads__account_report", "alias": "twitter_ads__account_report", "checksum": {"name": "sha256", "checksum": "7d06c005c49a1eb30e5c672bf3674d262e65603f0f255d244ce913bb6aeebb56"}, "tags": [], "refs": [["stg_twitter_ads__account_history"], ["stg_twitter_ads__promoted_tweet_report"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the account level, within a placement in Twitter.\n", "columns": {"spend_micro": {"name": "spend_micro", "description": "The spend (in micros) for the account on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the account on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for th account on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the account on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the account on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Timestamp of when a record was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone_switched_timestamp": {"name": "timezone_switched_timestamp", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads://models/twitter.yml", "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_ads", "materialized": "table"}, "created_at": 1660323534.222552, "compiled_sql": "with accounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\npromoted_tweet_report as (\n    \n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_report`\n),\n\nrollup_report as (\n\n    select \n        date_day,\n        account_id,\n        placement,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions,\n        sum(spend) as spend,\n        sum(spend_micro) as spend_micro,\n        sum(url_clicks) as url_clicks\n\n        \n\n\n\n\n\n    from promoted_tweet_report\n    group by 1,2,3\n\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        accounts.is_deleted,\n        accounts.timezone,\n        accounts.industry_type,\n        accounts.approval_status,\n        accounts.business_name,\n        accounts.business_id,\n        accounts.created_timestamp,\n        accounts.updated_timestamp,\n        accounts.timezone_switched_timestamp,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        \n\n\n\n\n\n    from rollup_report as report\n    left join accounts \n        on report.account_id = accounts.account_id\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__account_report`"}, "model.twitter_ads.twitter_ads__campaign_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('campaign_report') }}\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        report.campaign_id,\n        campaigns.campaign_name,\n        campaigns.is_deleted,\n        campaigns.entity_status as campaign_status,\n        campaigns.currency,\n        campaigns.is_servable,\n        campaigns.is_standard_delivery,\n        campaigns.frequency_cap,\n        campaigns.start_timestamp,\n        campaigns.end_timestamp,\n        campaigns.created_timestamp,\n        campaigns.updated_timestamp,\n        campaigns.funding_instrument_id,\n        campaigns.daily_budget_amount,\n        campaigns.total_budget_amount,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__campaign_report_passthrough_metrics', transform='sum') }}\n\n    from report \n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n\n    {{ dbt_utils.group_by(n=19) }}\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_report", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads", "fqn": ["twitter_ads", "twitter_ads__campaign_report"], "unique_id": "model.twitter_ads.twitter_ads__campaign_report", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "twitter_ads__campaign_report.sql", "original_file_path": "models/twitter_ads__campaign_report.sql", "name": "twitter_ads__campaign_report", "alias": "twitter_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "4e812d7fc9e5da49b64ef1aa7c1b90a530b6c8bc47fe45938f42ba8bf95edc49"}, "tags": [], "refs": [["stg_twitter_ads__campaign_report"], ["stg_twitter_ads__campaign_history"], ["stg_twitter_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the account and campaign level, within a placement in Twitter.\n", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The amount of spend, in micros, on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Timestamp of when a record was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_servable": {"name": "is_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_standard_delivery": {"name": "is_standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding_instrument_id": {"name": "funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount": {"name": "daily_budget_amount", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount": {"name": "total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads://models/twitter.yml", "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_ads", "materialized": "table"}, "created_at": 1660323534.205308, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_report`\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_history`\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        report.campaign_id,\n        campaigns.campaign_name,\n        campaigns.is_deleted,\n        campaigns.entity_status as campaign_status,\n        campaigns.currency,\n        campaigns.is_servable,\n        campaigns.is_standard_delivery,\n        campaigns.frequency_cap,\n        campaigns.start_timestamp,\n        campaigns.end_timestamp,\n        campaigns.created_timestamp,\n        campaigns.updated_timestamp,\n        campaigns.funding_instrument_id,\n        campaigns.daily_budget_amount,\n        campaigns.total_budget_amount,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        \n\n\n\n\n\n    from report \n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__campaign_report`"}, "model.twitter_ads.twitter_ads__url_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('promoted_tweet_report') }}\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\nline_items as (\n\n    select *\n    from {{ var('line_item_history') }}\n    where is_latest_version\n),\n\npromoted_tweets as (\n\n    select *\n    from {{ var('promoted_tweet_history') }}\n    where is_latest_version\n),\n\ntweets as (\n\n    select *\n    from {{ var('tweet') }}\n),\n\ntweet_url as (\n\n    select *\n    from {{ var('tweet_url') }}\n    where index = 0\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        accounts.account_id,\n        accounts.name as account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        line_items.line_item_id,\n        line_items.name as line_item_name,\n        promoted_tweets.promoted_tweet_id,\n        promoted_tweets.tweet_id,\n        tweets.name as tweet_name,\n        tweets.full_text as tweet_full_text,\n        tweet_url.base_url,\n        tweet_url.url_host,\n        tweet_url.url_path,\n        tweet_url.utm_source,\n        tweet_url.utm_medium,\n        tweet_url.utm_campaign,\n        tweet_url.utm_content,\n        tweet_url.utm_term,\n        tweet_url.expanded_url,\n        tweet_url.display_url,\n        campaigns.currency,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__promoted_tweet_report_passthrough_metrics', transform='sum') }}\n\n    from report \n    left join promoted_tweets \n        on report.promoted_tweet_id = promoted_tweets.promoted_tweet_id\n    left join tweet_url \n        on promoted_tweets.tweet_id = tweet_url.tweet_id\n    left join tweets\n        on promoted_tweets.tweet_id = tweets.tweet_id\n    left join line_items\n        on promoted_tweets.line_item_id = line_items.line_item_id\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    \n    where tweet_url.expanded_url is not null\n    \n    {{ dbt_utils.group_by(n=23) }}\n\n    \n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__tweet", "model.twitter_ads_source.stg_twitter_ads__tweet_url"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads", "fqn": ["twitter_ads", "twitter_ads__url_report"], "unique_id": "model.twitter_ads.twitter_ads__url_report", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "twitter_ads__url_report.sql", "original_file_path": "models/twitter_ads__url_report.sql", "name": "twitter_ads__url_report", "alias": "twitter_ads__url_report", "checksum": {"name": "sha256", "checksum": "046fca73116e34e098e06c43a5b2e8e371b0f66f7e5b160ed4cecf0b91a8d900"}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_report"], ["stg_twitter_ads__campaign_history"], ["stg_twitter_ads__account_history"], ["stg_twitter_ads__line_item_history"], ["stg_twitter_ads__promoted_tweet_history"], ["stg_twitter_ads__tweet"], ["stg_twitter_ads__tweet_url"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the account, campaign, line item (ad group), promoted tweet, and url level, within a placement in Twitter.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item (ad group).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_name": {"name": "line_item_name", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the promoted tweet that the URL appeared in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_name": {"name": "tweet_name", "description": "The name, if provided, of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_full_text": {"name": "tweet_full_text", "description": "The full text of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet + URL on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet + URL on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the promoted tweet + URL on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The spend, in micros, for the tweet + URL on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The URL clicks for the promoted tweet + URL on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads://models/twitter.yml", "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__url_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_ads", "materialized": "table"}, "created_at": 1660323534.246337, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_report`\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_history`\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\nline_items as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_history`\n    where is_latest_version\n),\n\npromoted_tweets as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_history`\n    where is_latest_version\n),\n\ntweets as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet`\n),\n\ntweet_url as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet_url`\n    where index = 0\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        accounts.account_id,\n        accounts.name as account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        line_items.line_item_id,\n        line_items.name as line_item_name,\n        promoted_tweets.promoted_tweet_id,\n        promoted_tweets.tweet_id,\n        tweets.name as tweet_name,\n        tweets.full_text as tweet_full_text,\n        tweet_url.base_url,\n        tweet_url.url_host,\n        tweet_url.url_path,\n        tweet_url.utm_source,\n        tweet_url.utm_medium,\n        tweet_url.utm_campaign,\n        tweet_url.utm_content,\n        tweet_url.utm_term,\n        tweet_url.expanded_url,\n        tweet_url.display_url,\n        campaigns.currency,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        \n\n\n\n\n\n    from report \n    left join promoted_tweets \n        on report.promoted_tweet_id = promoted_tweets.promoted_tweet_id\n    left join tweet_url \n        on promoted_tweets.tweet_id = tweet_url.tweet_id\n    left join tweets\n        on promoted_tweets.tweet_id = tweets.tweet_id\n    left join line_items\n        on promoted_tweets.line_item_id = line_items.line_item_id\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    \n    where tweet_url.expanded_url is not null\n    \n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23\n\n    \n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__url_report`"}, "model.twitter_ads.twitter_ads__promoted_tweet_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('promoted_tweet_report') }}\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\nline_items as (\n\n    select *\n    from {{ var('line_item_history') }}\n    where is_latest_version\n),\n\npromoted_tweets as (\n\n    select *\n    from {{ var('promoted_tweet_history') }}\n    where is_latest_version\n),\n\ntweets as (\n\n    select *\n    from {{ var('tweet') }}\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        accounts.account_id,\n        accounts.name as account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        line_items.line_item_id,\n        line_items.name as line_item_name,\n        promoted_tweets.promoted_tweet_id,\n        promoted_tweets.tweet_id,\n        tweets.name as tweet_name,\n        tweets.full_text,\n        promoted_tweets.is_deleted,\n        promoted_tweets.entity_status as promoted_tweet_status,\n        campaigns.entity_status as campaign_status,\n        line_items.entity_status as line_item_status,\n        tweets.language,\n        campaigns.currency,\n        promoted_tweets.approval_status,\n        promoted_tweets.created_timestamp,\n        promoted_tweets.updated_timestamp,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__promoted_tweet_report_passthrough_metrics', transform='sum') }}\n\n    from report \n    left join promoted_tweets \n        on report.promoted_tweet_id = promoted_tweets.promoted_tweet_id\n    left join tweets\n        on promoted_tweets.tweet_id = tweets.tweet_id\n    left join line_items\n        on promoted_tweets.line_item_id = line_items.line_item_id\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n\n    {{ dbt_utils.group_by(n=21) }}\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__tweet"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads", "fqn": ["twitter_ads", "twitter_ads__promoted_tweet_report"], "unique_id": "model.twitter_ads.twitter_ads__promoted_tweet_report", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "twitter_ads__promoted_tweet_report.sql", "original_file_path": "models/twitter_ads__promoted_tweet_report.sql", "name": "twitter_ads__promoted_tweet_report", "alias": "twitter_ads__promoted_tweet_report", "checksum": {"name": "sha256", "checksum": "8d4284ef51c5151d7849e0865933751419eae586bd2b416459a4eb9b377e1dd0"}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_report"], ["stg_twitter_ads__campaign_history"], ["stg_twitter_ads__account_history"], ["stg_twitter_ads__line_item_history"], ["stg_twitter_ads__promoted_tweet_history"], ["stg_twitter_ads__tweet"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the account, campaign, line item (ad group), and promoted tweet level, within a placement in Twitter.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item (ad group).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_name": {"name": "line_item_name", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the promoted tweet that the URL appeared in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_name": {"name": "tweet_name", "description": "The name, if provided, of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_text": {"name": "full_text", "description": "The full text of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet + URL on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet + URL on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the promoted tweet + URL on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The spend, in micros, for the tweet + URL on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The URL clicks for the promoted tweet + URL on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Timestamp of when a record was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_status": {"name": "promoted_tweet_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the tweet's campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_status": {"name": "line_item_status", "description": "The status of the tweet's line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "Two-letter language code of the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads://models/twitter.yml", "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__promoted_tweet_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_ads", "materialized": "table"}, "created_at": 1660323534.2368052, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_report`\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_history`\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\nline_items as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_history`\n    where is_latest_version\n),\n\npromoted_tweets as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_history`\n    where is_latest_version\n),\n\ntweets as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet`\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        accounts.account_id,\n        accounts.name as account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        line_items.line_item_id,\n        line_items.name as line_item_name,\n        promoted_tweets.promoted_tweet_id,\n        promoted_tweets.tweet_id,\n        tweets.name as tweet_name,\n        tweets.full_text,\n        promoted_tweets.is_deleted,\n        promoted_tweets.entity_status as promoted_tweet_status,\n        campaigns.entity_status as campaign_status,\n        line_items.entity_status as line_item_status,\n        tweets.language,\n        campaigns.currency,\n        promoted_tweets.approval_status,\n        promoted_tweets.created_timestamp,\n        promoted_tweets.updated_timestamp,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        \n\n\n\n\n\n    from report \n    left join promoted_tweets \n        on report.promoted_tweet_id = promoted_tweets.promoted_tweet_id\n    left join tweets\n        on promoted_tweets.tweet_id = tweets.tweet_id\n    left join line_items\n        on promoted_tweets.line_item_id = line_items.line_item_id\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__promoted_tweet_report`"}, "model.twitter_ads.twitter_ads__line_item_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('line_item_report') }}\n),\n\nline_items as (\n\n    select *\n    from {{ var('line_item_history') }}\n    where is_latest_version\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        line_items.campaign_id,\n        campaigns.campaign_name,\n        report.line_item_id,\n        line_items.name as line_item_name,\n        line_items.is_deleted,\n        line_items.entity_status as line_item_status,\n        campaigns.entity_status as campaign_status,\n        line_items.currency,\n        line_items.advertiser_domain,\n        line_items.advertiser_user_id,\n        line_items.bid_type,\n        line_items.bid_unit,\n        line_items.charge_by,\n        line_items.objective,\n        line_items.optimization,\n        line_items.product_type,\n        line_items.primary_web_event_tag,\n        line_items.creative_source,\n        line_items.start_timestamp,\n        line_items.end_timestamp,\n        line_items.created_timestamp,\n        line_items.updated_timestamp,\n        line_items.target_cpa,\n        line_items.total_budget_amount,\n        line_items.bid_amount,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__line_item_report_passthrough_metrics', transform='sum')}}\n\n    from report \n    left join line_items\n        on report.line_item_id = line_items.line_item_id\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n\n    {{ dbt_utils.group_by(n=29) }}\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_report", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads", "fqn": ["twitter_ads", "twitter_ads__line_item_report"], "unique_id": "model.twitter_ads.twitter_ads__line_item_report", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "twitter_ads__line_item_report.sql", "original_file_path": "models/twitter_ads__line_item_report.sql", "name": "twitter_ads__line_item_report", "alias": "twitter_ads__line_item_report", "checksum": {"name": "sha256", "checksum": "962240cdab08b9083e451aea42ddd2205c72e982c7248291b3e138ddca3fb5fc"}, "tags": [], "refs": [["stg_twitter_ads__line_item_report"], ["stg_twitter_ads__line_item_history"], ["stg_twitter_ads__campaign_history"], ["stg_twitter_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the account, campaign, and line item (ad group) level, within a placement in Twitter.\n", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the line item's campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the line item's campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_name": {"name": "line_item_name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The amount of spend, in micros, on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Timestamp of when a record was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_status": {"name": "line_item_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the line item's related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount": {"name": "bid_amount", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount": {"name": "total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_cpa": {"name": "target_cpa", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads://models/twitter.yml", "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__line_item_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_ads", "materialized": "table"}, "created_at": 1660323534.216817, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_report`\n),\n\nline_items as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_history`\n    where is_latest_version\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_history`\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        line_items.campaign_id,\n        campaigns.campaign_name,\n        report.line_item_id,\n        line_items.name as line_item_name,\n        line_items.is_deleted,\n        line_items.entity_status as line_item_status,\n        campaigns.entity_status as campaign_status,\n        line_items.currency,\n        line_items.advertiser_domain,\n        line_items.advertiser_user_id,\n        line_items.bid_type,\n        line_items.bid_unit,\n        line_items.charge_by,\n        line_items.objective,\n        line_items.optimization,\n        line_items.product_type,\n        line_items.primary_web_event_tag,\n        line_items.creative_source,\n        line_items.start_timestamp,\n        line_items.end_timestamp,\n        line_items.created_timestamp,\n        line_items.updated_timestamp,\n        line_items.target_cpa,\n        line_items.total_budget_amount,\n        line_items.bid_amount,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        \n\n\n\n\n\n    from report \n    left join line_items\n        on report.line_item_id = line_items.line_item_id\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__line_item_report`"}, "model.twitter_ads.twitter_ads__keyword_report": {"raw_sql": "{{ config(enabled=var('twitter_ads__using_keywords', true)) }}\n\nwith report as (\n\n    select *\n    from {{ var('line_item_keywords_report') }}\n),\n\nline_items as (\n\n    select *\n    from {{ var('line_item_history') }}\n    where is_latest_version\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        line_items.campaign_id,\n        campaigns.campaign_name,\n        report.line_item_id,\n        line_items.name as line_item_name,\n        report.keyword,\n        line_items.currency,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__line_item_keywords_report_passthrough_metrics', transform='sum')}}\n\n    from report \n    left join line_items\n        on report.line_item_id = line_items.line_item_id\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n\n    {{ dbt_utils.group_by(n=10) }}\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads", "fqn": ["twitter_ads", "twitter_ads__keyword_report"], "unique_id": "model.twitter_ads.twitter_ads__keyword_report", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "twitter_ads__keyword_report.sql", "original_file_path": "models/twitter_ads__keyword_report.sql", "name": "twitter_ads__keyword_report", "alias": "twitter_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "fd65d8a7597ca3ea58b28ef071c998359712e668e01e47a152dd7a0d9132edb6"}, "tags": [], "refs": [["stg_twitter_ads__line_item_keywords_report"], ["stg_twitter_ads__line_item_history"], ["stg_twitter_ads__campaign_history"], ["stg_twitter_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the account, campaign, line item (ad group), and keyword level, within a placement in Twitter.\n", "columns": {"account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The spend for the line item + keyword on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the line item + keyword on that day in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the line item + keyword on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the line item + keyword on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item (ad group).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the line item + keyword on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword": {"name": "keyword", "description": "The keyword whose performance is being tracked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the associated account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_name": {"name": "line_item_name", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads://models/twitter.yml", "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__keyword_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_ads", "materialized": "table", "enabled": true}, "created_at": 1660323534.228528, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_keywords_report`\n),\n\nline_items as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_history`\n    where is_latest_version\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_history`\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        line_items.campaign_id,\n        campaigns.campaign_name,\n        report.line_item_id,\n        line_items.name as line_item_name,\n        report.keyword,\n        line_items.currency,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks\n\n        \n\n\n\n\n\n    from report \n    left join line_items\n        on report.line_item_id = line_items.line_item_id\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n\n    group by 1,2,3,4,5,6,7,8,9,10\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__keyword_report`"}, "model.pinterest.pinterest_ads__url_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('pin_promotion_report') }}\n), \n\npins as (\n\n    select *\n    from {{ var('pin_promotion_history') }}\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n),\n\nadvertisers as (\n\n    select *\n    from {{ var('advertiser_history') }}\n    where is_most_recent_record = True\n), \n\njoined as (\n\n    select\n        report.date_day,\n        campaigns.advertiser_id,\n        advertisers.advertiser_name,\n        report.campaign_id,\n        campaigns.campaign_name,\n        campaigns.campaign_status,\n        report.ad_group_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_status,\n        pins.destination_url,\n        pins.creative_type,\n        report.pin_promotion_id,\n        pins.pin_name,\n        pins.pin_status,\n        pins.base_url,\n        pins.url_host,\n        pins.url_path,\n        pins.utm_source,\n        pins.utm_medium,\n        pins.utm_campaign,\n        pins.utm_content,\n        pins.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {% for metric in var('pinterest__pin_promotion_report_passthrough_metrics',[]) %}\n        , sum({{ report.metric }}) as {{ metric }}\n        {% endfor %}\n\n    from report \n    left join pins \n        on report.pin_promotion_id = pins.pin_promotion_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n    left join advertisers\n        on campaigns.advertiser_id = advertisers.advertiser_id\n\n    -- We only want utm ads to populate this report. Therefore, we filter where url pins are populated.\n    where pins.destination_url is not null\n    {{ dbt_utils.group_by(22) }}\n)\n\nselect * \nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "model.pinterest_source.stg_pinterest_ads__ad_group_history", "model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__advertiser_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "pinterest_ads__url_report"], "unique_id": "model.pinterest.pinterest_ads__url_report", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "pinterest_ads__url_report.sql", "original_file_path": "models/pinterest_ads__url_report.sql", "name": "pinterest_ads__url_report", "alias": "pinterest_ads__url_report", "checksum": {"name": "sha256", "checksum": "99e5196ef221f4c1ff4b66e52f1926558adb43c57f71534459db2314a8982b59"}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report"], ["stg_pinterest_ads__pin_promotion_history"], ["stg_pinterest_ads__ad_group_history"], ["stg_pinterest_ads__campaign_history"], ["stg_pinterest_ads__advertiser_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the advertiser, campaign, ad group, and url level.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_url": {"name": "destination_url", "description": "Pin destination URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_name": {"name": "pin_name", "description": "Pin promotion name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_status": {"name": "pin_status", "description": "The status of the Pin promotion. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "The creative type. \nOne of \"APP\", \"APP_VIDEO\", \"BOARD\", \"CAROUSEL\", \"CINEMATIC\", \"COMMERCE\", \"MAX_VIDEO\", \"NATIVE_VIDEO\", \"REGULAR\", \n\"SEARCH_PROMINENCE\", \"SEARCH_PROMINENCE_CAROUSEL\", \"SHOPPING\", \"SHOP_THE_PIN\", \"THIRD_PARTY\", or \"VIDEO\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/pinterest.yml", "compiled_path": "target/compiled/pinterest/models/pinterest_ads__url_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "table"}, "created_at": 1660323534.3350332, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_report`\n), \n\npins as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_history`\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_history`\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_history`\n    where is_most_recent_record = True\n),\n\nadvertisers as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history`\n    where is_most_recent_record = True\n), \n\njoined as (\n\n    select\n        report.date_day,\n        campaigns.advertiser_id,\n        advertisers.advertiser_name,\n        report.campaign_id,\n        campaigns.campaign_name,\n        campaigns.campaign_status,\n        report.ad_group_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_status,\n        pins.destination_url,\n        pins.creative_type,\n        report.pin_promotion_id,\n        pins.pin_name,\n        pins.pin_status,\n        pins.base_url,\n        pins.url_host,\n        pins.url_path,\n        pins.utm_source,\n        pins.utm_medium,\n        pins.utm_campaign,\n        pins.utm_content,\n        pins.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n    from report \n    left join pins \n        on report.pin_promotion_id = pins.pin_promotion_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n    left join advertisers\n        on campaigns.advertiser_id = advertisers.advertiser_id\n\n    -- We only want utm ads to populate this report. Therefore, we filter where url pins are populated.\n    where pins.destination_url is not null\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\n)\n\nselect * \nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__url_report`"}, "model.pinterest.pinterest_ads__campaign_report": {"raw_sql": "with report as (\n    select *\n    from {{ var('campaign_report') }}\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n),\n\nadvertisers as (\n    select *\n    from {{ var('advertiser_history') }}\n    where is_most_recent_record = True\n),\n\nfields as (\n\n    select\n        report.date_day,\n        advertisers.advertiser_name,\n        advertisers.advertiser_id,\n        campaigns.campaign_name,\n        report.campaign_id,\n        campaigns.campaign_status,\n        sum(report.spend) as spend,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions\n\n        {% for metric in var('google_ads__ad_group_stats_passthrough_metrics', []) %}\n        , sum(report.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from report\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join advertisers\n        on campaigns.advertiser_id = advertisers.advertiser_id\n    {{ dbt_utils.group_by(6) }}\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_report", "model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__advertiser_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "pinterest_ads__campaign_report"], "unique_id": "model.pinterest.pinterest_ads__campaign_report", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "pinterest_ads__campaign_report.sql", "original_file_path": "models/pinterest_ads__campaign_report.sql", "name": "pinterest_ads__campaign_report", "alias": "pinterest_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "9e9098d2de74c2c010852d7eb7a82ab6191abddd56f49560baea4593d5192fa8"}, "tags": [], "refs": [["stg_pinterest_ads__campaign_report"], ["stg_pinterest_ads__campaign_history"], ["stg_pinterest_ads__advertiser_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the advertiser and campaign level.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/pinterest.yml", "compiled_path": "target/compiled/pinterest/models/pinterest_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "table"}, "created_at": 1660323534.347879, "compiled_sql": "with report as (\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_report`\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_history`\n    where is_most_recent_record = True\n),\n\nadvertisers as (\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history`\n    where is_most_recent_record = True\n),\n\nfields as (\n\n    select\n        report.date_day,\n        advertisers.advertiser_name,\n        advertisers.advertiser_id,\n        campaigns.campaign_name,\n        report.campaign_id,\n        campaigns.campaign_status,\n        sum(report.spend) as spend,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions\n\n        \n\n    from report\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join advertisers\n        on campaigns.advertiser_id = advertisers.advertiser_id\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__campaign_report`"}, "model.pinterest.pinterest_ads__keyword_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('keyword_report') }}\n), \n\nadvertisers as (\n\n    select *\n    from {{ var('advertiser_history') }}\n    where is_most_recent_record = True\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n), \n\nkeywords as (\n\n    select *\n    from {{ var('keyword_history') }}\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        report.date_day,\n        advertisers.advertiser_name,\n        advertisers.advertiser_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        report.keyword_id,\n        keywords.match_type,\n        keywords.parent_type,\n        keywords.keyword_value,\n        sum(report.spend) as spend,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions\n\n        {% for metric in var('google_ads__keyword_report_passthrough_metrics', []) %}\n        , sum(report.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from report\n    left join keywords\n        on report.keyword_id = keywords.keyword_id\n    left join ad_groups\n        on keywords.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join advertisers\n        on campaigns.advertiser_id = advertisers.advertiser_id\n    {{ dbt_utils.group_by(11) }}\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest_source.stg_pinterest_ads__keyword_report", "model.pinterest_source.stg_pinterest_ads__advertiser_history", "model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__ad_group_history", "model.pinterest_source.stg_pinterest_ads__keyword_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "pinterest_ads__keyword_report"], "unique_id": "model.pinterest.pinterest_ads__keyword_report", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "pinterest_ads__keyword_report.sql", "original_file_path": "models/pinterest_ads__keyword_report.sql", "name": "pinterest_ads__keyword_report", "alias": "pinterest_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "1e4792b3e279e913e6d8db7fd365a3c6ab930229d298bf5f7b730779891c3632"}, "tags": [], "refs": [["stg_pinterest_ads__keyword_report"], ["stg_pinterest_ads__advertiser_history"], ["stg_pinterest_ads__campaign_history"], ["stg_pinterest_ads__ad_group_history"], ["stg_pinterest_ads__keyword_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of a keyword at the advertiser, campaign, ad group, and keyword level.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "Unique identifier of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "Type of match the keyword is tied to. Either Exact or Broad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_type": {"name": "parent_type", "description": "Identifier of what grain the parent type is. Ad group or campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_value": {"name": "keyword_value", "description": "The text value that makes upd the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/pinterest.yml", "compiled_path": "target/compiled/pinterest/models/pinterest_ads__keyword_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "table"}, "created_at": 1660323534.3595672, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_report`\n), \n\nadvertisers as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history`\n    where is_most_recent_record = True\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_history`\n    where is_most_recent_record = True\n), \n\nkeywords as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_history`\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        report.date_day,\n        advertisers.advertiser_name,\n        advertisers.advertiser_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        report.keyword_id,\n        keywords.match_type,\n        keywords.parent_type,\n        keywords.keyword_value,\n        sum(report.spend) as spend,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions\n\n        \n\n    from report\n    left join keywords\n        on report.keyword_id = keywords.keyword_id\n    left join ad_groups\n        on keywords.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join advertisers\n        on campaigns.advertiser_id = advertisers.advertiser_id\n    group by 1,2,3,4,5,6,7,8,9,10,11\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__keyword_report`"}, "model.pinterest.pinterest_ads__advertiser_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('advertiser_report') }}\n), \n\nadvertisers as (\n\n    select *\n    from {{ var('advertiser_history') }}\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        report.date_day,\n        advertisers.advertiser_name,\n        report.advertiser_id,\n        advertisers.advertiser_status,\n        advertisers.currency_code,\n        advertisers.country,\n        advertisers.billing_type,\n        sum(report.spend) as spend,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions\n\n        {% for metric in var('google_ads__advertiser_report_passthrough_metrics', []) %}\n        , sum(report.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from report\n    left join advertisers\n        on report.advertiser_id = advertisers.advertiser_id\n    {{ dbt_utils.group_by(7) }}\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_report", "model.pinterest_source.stg_pinterest_ads__advertiser_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "pinterest_ads__advertiser_report"], "unique_id": "model.pinterest.pinterest_ads__advertiser_report", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "pinterest_ads__advertiser_report.sql", "original_file_path": "models/pinterest_ads__advertiser_report.sql", "name": "pinterest_ads__advertiser_report", "alias": "pinterest_ads__advertiser_report", "checksum": {"name": "sha256", "checksum": "2765d721475a2c99435f6417a381c4a42eddc1a22681c6a48001ef826919c6bf"}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_report"], ["stg_pinterest_ads__advertiser_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of an advertiser on the Pinterest Ads platform.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_status": {"name": "advertiser_status", "description": "Status of the advertiser account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code which the advertiser is set up using.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country code where the advertiser is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_type": {"name": "billing_type", "description": "The billing type of the advertiser. Will typically be CREDIT_CARD or INVOICE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/pinterest.yml", "compiled_path": "target/compiled/pinterest/models/pinterest_ads__advertiser_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "table"}, "created_at": 1660323534.353235, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_report`\n), \n\nadvertisers as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history`\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        report.date_day,\n        advertisers.advertiser_name,\n        report.advertiser_id,\n        advertisers.advertiser_status,\n        advertisers.currency_code,\n        advertisers.country,\n        advertisers.billing_type,\n        sum(report.spend) as spend,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions\n\n        \n\n    from report\n    left join advertisers\n        on report.advertiser_id = advertisers.advertiser_id\n    group by 1,2,3,4,5,6,7\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__advertiser_report`"}, "model.pinterest.pinterest_ads__pin_promotion_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('pin_promotion_report') }}\n), \n\npins as (\n\n    select *\n    from {{ var('pin_promotion_history') }}\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n),\n\nadvertisers as (\n\n    select *\n    from {{ var('advertiser_history') }}\n    where is_most_recent_record = True\n), \n\njoined as (\n\n    select\n        report.date_day,\n        campaigns.advertiser_id,\n        advertisers.advertiser_name,\n        report.campaign_id,\n        campaigns.campaign_name,\n        campaigns.campaign_status,\n        report.ad_group_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_status,\n        pins.creative_type,\n        report.pin_promotion_id,\n        pins.pin_name,\n        pins.pin_status,\n        pins.destination_url,\n        pins.base_url,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {% for metric in var('pinterest__pin_promotion_report_passthrough_metrics',[]) %}\n        , sum({{ report.metric }}) as {{ metric }}\n        {% endfor %}\n\n    from report \n    left join pins \n        on report.pin_promotion_id = pins.pin_promotion_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n    left join advertisers\n        on campaigns.advertiser_id = advertisers.advertiser_id\n\n    {{ dbt_utils.group_by(15) }}\n)\n\nselect * \nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "model.pinterest_source.stg_pinterest_ads__ad_group_history", "model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__advertiser_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "pinterest_ads__pin_promotion_report"], "unique_id": "model.pinterest.pinterest_ads__pin_promotion_report", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "pinterest_ads__pin_promotion_report.sql", "original_file_path": "models/pinterest_ads__pin_promotion_report.sql", "name": "pinterest_ads__pin_promotion_report", "alias": "pinterest_ads__pin_promotion_report", "checksum": {"name": "sha256", "checksum": "e9137d4b5d9bb93f3b2b7b5b9f3d6b781d1453ea1d4c25a403c89132055437c5"}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report"], ["stg_pinterest_ads__pin_promotion_history"], ["stg_pinterest_ads__ad_group_history"], ["stg_pinterest_ads__campaign_history"], ["stg_pinterest_ads__advertiser_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the advertiser, campaign, ad group, and pin level.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "The creative type. \nOne of \"APP\", \"APP_VIDEO\", \"BOARD\", \"CAROUSEL\", \"CINEMATIC\", \"COMMERCE\", \"MAX_VIDEO\", \"NATIVE_VIDEO\", \"REGULAR\", \n\"SEARCH_PROMINENCE\", \"SEARCH_PROMINENCE_CAROUSEL\", \"SHOPPING\", \"SHOP_THE_PIN\", \"THIRD_PARTY\", or \"VIDEO\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_name": {"name": "pin_name", "description": "Name of the pin.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_status": {"name": "pin_status", "description": "Status of the pin.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_url": {"name": "destination_url", "description": "Pin destination URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/pinterest.yml", "compiled_path": "target/compiled/pinterest/models/pinterest_ads__pin_promotion_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "table"}, "created_at": 1660323534.3674939, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_report`\n), \n\npins as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_history`\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_history`\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_history`\n    where is_most_recent_record = True\n),\n\nadvertisers as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history`\n    where is_most_recent_record = True\n), \n\njoined as (\n\n    select\n        report.date_day,\n        campaigns.advertiser_id,\n        advertisers.advertiser_name,\n        report.campaign_id,\n        campaigns.campaign_name,\n        campaigns.campaign_status,\n        report.ad_group_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_status,\n        pins.creative_type,\n        report.pin_promotion_id,\n        pins.pin_name,\n        pins.pin_status,\n        pins.destination_url,\n        pins.base_url,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n    from report \n    left join pins \n        on report.pin_promotion_id = pins.pin_promotion_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n    left join advertisers\n        on campaigns.advertiser_id = advertisers.advertiser_id\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n)\n\nselect * \nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__pin_promotion_report`"}, "model.pinterest.pinterest_ads__ad_group_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('ad_group_report') }}\n), \n\nadvertisers as (\n\n    select *\n    from {{ var('advertiser_history') }}\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n),\n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        report.date_day,\n        advertisers.advertiser_name,\n        advertisers.advertiser_id,\n        campaigns.campaign_name,\n        campaigns.campaign_status,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        report.ad_group_id,\n        ad_groups.created_at,\n        ad_groups.start_time,\n        ad_groups.end_time,\n        ad_groups.ad_group_status,\n        sum(report.spend) as spend,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions\n\n        {% for metric in var('pinterest__ad_group_report_passthrough_metrics', []) %}\n        , sum(report.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from report\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join advertisers\n        on campaigns.advertiser_id = advertisers.advertiser_id\n    {{ dbt_utils.group_by(12) }}\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_report", "model.pinterest_source.stg_pinterest_ads__advertiser_history", "model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "pinterest_ads__ad_group_report"], "unique_id": "model.pinterest.pinterest_ads__ad_group_report", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "pinterest_ads__ad_group_report.sql", "original_file_path": "models/pinterest_ads__ad_group_report.sql", "name": "pinterest_ads__ad_group_report", "alias": "pinterest_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "2d5a91d6fa1495d415baaa2c4970e5119bd68594b877d966f62b464adada0c16"}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_report"], ["stg_pinterest_ads__advertiser_history"], ["stg_pinterest_ads__campaign_history"], ["stg_pinterest_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the campaign, advertiser, and ad group level.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Ad group creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Ad group start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "Ad group end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/pinterest.yml", "compiled_path": "target/compiled/pinterest/models/pinterest_ads__ad_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "table"}, "created_at": 1660323534.342918, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_report`\n), \n\nadvertisers as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history`\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_history`\n    where is_most_recent_record = True\n),\n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_history`\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        report.date_day,\n        advertisers.advertiser_name,\n        advertisers.advertiser_id,\n        campaigns.campaign_name,\n        campaigns.campaign_status,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        report.ad_group_id,\n        ad_groups.created_at,\n        ad_groups.start_time,\n        ad_groups.end_time,\n        ad_groups.ad_group_status,\n        sum(report.spend) as spend,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions\n\n        \n\n    from report\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join advertisers\n        on campaigns.advertiser_id = advertisers.advertiser_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__ad_group_report`"}, "model.google_ads.google_ads__keyword_report": {"raw_sql": "with stats as (\n\n    select *\n    from {{ var('keyword_stats') }}\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n), \n\ncriterions as (\n\n    select *\n    from {{ var('ad_group_criterion_history') }}\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        criterions.criterion_id,\n        criterions.type,\n        criterions.status,\n        criterions.keyword_match_type,\n        criterions.keyword_text,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        {% for metric in var('google_ads__keyword_stats_passthrough_metrics', []) %}\n        , sum(stats.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from stats\n    left join criterions\n        on stats.criterion_id = criterions.criterion_id\n    left join ad_groups\n        on criterions.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n    {{ dbt_utils.group_by(12) }}\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__keyword_stats", "model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__campaign_history", "model.google_ads_source.stg_google_ads__ad_group_history", "model.google_ads_source.stg_google_ads__ad_group_criterion_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads", "fqn": ["google_ads", "google_ads__keyword_report"], "unique_id": "model.google_ads.google_ads__keyword_report", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "google_ads__keyword_report.sql", "original_file_path": "models/google_ads__keyword_report.sql", "name": "google_ads__keyword_report", "alias": "google_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "2a98c3c5ca946a242710fc3f4d7cbf503fda5d26f90ff01967b5450c40971669"}, "tags": [], "refs": [["stg_google_ads__keyword_stats"], ["stg_google_ads__account_history"], ["stg_google_ads__campaign_history"], ["stg_google_ads__ad_group_history"], ["stg_google_ads__ad_group_criterion_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance at the ad group level for keywords.", "columns": {"date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criterion_id": {"name": "criterion_id", "description": "The unique identifier of the criterion being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of keyword ad being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the keyword ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_match_type": {"name": "keyword_match_type", "description": "The match type criteria used for the keyword ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_text": {"name": "keyword_text", "description": "The specific keyword text that is used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads://models/google_ads.yml", "compiled_path": "target/compiled/google_ads/models/google_ads__keyword_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads", "materialized": "table"}, "created_at": 1660323534.488446, "compiled_sql": "with stats as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__keyword_stats`\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_history`\n    where is_most_recent_record = True\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_history`\n    where is_most_recent_record = True\n), \n\ncriterions as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_criterion_history`\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        criterions.criterion_id,\n        criterions.type,\n        criterions.status,\n        criterions.keyword_match_type,\n        criterions.keyword_text,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        \n\n    from stats\n    left join criterions\n        on stats.criterion_id = criterions.criterion_id\n    left join ad_groups\n        on criterions.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__keyword_report`"}, "model.google_ads.google_ads__campaign_report": {"raw_sql": "with stats as (\n\n    select *\n    from {{ var('campaign_stats') }}\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaigns.advertising_channel_type,\n        campaigns.advertising_channel_subtype,\n        campaigns.status,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        {% for metric in var('google_ads__ad_group_stats_passthrough_metrics', []) %}\n        , sum(stats.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from stats\n    left join campaigns\n        on stats.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n    {{ dbt_utils.group_by(8) }}\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__campaign_stats", "model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads", "fqn": ["google_ads", "google_ads__campaign_report"], "unique_id": "model.google_ads.google_ads__campaign_report", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "google_ads__campaign_report.sql", "original_file_path": "models/google_ads__campaign_report.sql", "name": "google_ads__campaign_report", "alias": "google_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "89882f4c6bf9dece8610f8c3a23892ca3b6cb939bcb489e8d9056d8d0ec0dc75"}, "tags": [], "refs": [["stg_google_ads__campaign_stats"], ["stg_google_ads__account_history"], ["stg_google_ads__campaign_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of a campaign at the campaign/advertising_channel/advertising_channel_subtype level.", "columns": {"date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertising_channel_type": {"name": "advertising_channel_type", "description": "The channel type of the ads being served within the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertising_channel_subtype": {"name": "advertising_channel_subtype", "description": "The channel subtype of the ads being served within the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads://models/google_ads.yml", "compiled_path": "target/compiled/google_ads/models/google_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads", "materialized": "table"}, "created_at": 1660323534.4814668, "compiled_sql": "with stats as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_stats`\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_history`\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaigns.advertising_channel_type,\n        campaigns.advertising_channel_subtype,\n        campaigns.status,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        \n\n    from stats\n    left join campaigns\n        on stats.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n    group by 1,2,3,4,5,6,7,8\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__campaign_report`"}, "model.google_ads.google_ads__url_report": {"raw_sql": "with stats as (\n\n    select *\n    from {{ var('ad_stats') }}\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n),\n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_id,\n        ads.base_url,\n        ads.url_host,\n        ads.url_path,\n\n        {% if var('google_auto_tagging_enabled', false) %}\n\n        coalesce( {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_source') }} , 'google')  as utm_source,\n        coalesce( {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_medium') }} , 'cpc') as utm_medium,\n        coalesce( {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_campaign') }} , campaigns.campaign_name) as utm_campaign,\n        coalesce( {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_content') }} , ad_groups.ad_group_name) as utm_content,\n\n        {% else %}\n\n        ads.utm_source,\n        ads.utm_medium,\n        ads.utm_campaign,\n        ads.utm_content,\n        \n        {% endif %}\n\n        ads.utm_term,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        {% for metric in var('google_ads__ad_stats_passthrough_metrics', []) %}\n        , sum(stats.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from stats\n    left join ads\n        on stats.ad_id = ads.ad_id\n        and stats.ad_group_id = ads.ad_group_id\n    left join ad_groups\n        on ads.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n\n    -- We only want utm ads to populate this report. Therefore, we filter where url ads are populated.\n    where ads.source_final_urls is not null\n    {{ dbt_utils.group_by(16) }}\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__ad_stats", "model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__campaign_history", "model.google_ads_source.stg_google_ads__ad_group_history", "model.google_ads_source.stg_google_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads", "fqn": ["google_ads", "google_ads__url_report"], "unique_id": "model.google_ads.google_ads__url_report", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "google_ads__url_report.sql", "original_file_path": "models/google_ads__url_report.sql", "name": "google_ads__url_report", "alias": "google_ads__url_report", "checksum": {"name": "sha256", "checksum": "60daeef254bec9f60d3c2ed2847c76b95e992b9a8271e1d5e9fe2ce8521b9719"}, "tags": [], "refs": [["stg_google_ads__ad_stats"], ["stg_google_ads__account_history"], ["stg_google_ads__campaign_history"], ["stg_google_ads__ad_group_history"], ["stg_google_ads__ad_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of URLs at the ad level.", "columns": {"date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The unique identifier of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads://models/google_ads.yml", "compiled_path": "target/compiled/google_ads/models/google_ads__url_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads", "materialized": "table"}, "created_at": 1660323534.4619079, "compiled_sql": "with stats as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_stats`\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_history`\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_history`\n    where is_most_recent_record = True\n),\n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_history`\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_id,\n        ads.base_url,\n        ads.url_host,\n        ads.url_path,\n\n        \n\n        ads.utm_source,\n        ads.utm_medium,\n        ads.utm_campaign,\n        ads.utm_content,\n        \n        \n\n        ads.utm_term,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        \n\n    from stats\n    left join ads\n        on stats.ad_id = ads.ad_id\n        and stats.ad_group_id = ads.ad_group_id\n    left join ad_groups\n        on ads.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n\n    -- We only want utm ads to populate this report. Therefore, we filter where url ads are populated.\n    where ads.source_final_urls is not null\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__url_report`"}, "model.google_ads.google_ads__ad_report": {"raw_sql": "with stats as (\n\n    select *\n    from {{ var('ad_stats') }}\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n),\n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_id,\n        ads.ad_status,\n        ads.ad_type,\n        ads.display_url,\n        ads.source_final_urls,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        {% for metric in var('google_ads__ad_stats_passthrough_metrics', []) %}\n        , sum(stats.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from stats\n    left join ads\n        on stats.ad_id = ads.ad_id\n        and stats.ad_group_id = ads.ad_group_id\n    left join ad_groups\n        on ads.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n    {{ dbt_utils.group_by(12) }}\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__ad_stats", "model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__campaign_history", "model.google_ads_source.stg_google_ads__ad_group_history", "model.google_ads_source.stg_google_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads", "fqn": ["google_ads", "google_ads__ad_report"], "unique_id": "model.google_ads.google_ads__ad_report", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "google_ads__ad_report.sql", "original_file_path": "models/google_ads__ad_report.sql", "name": "google_ads__ad_report", "alias": "google_ads__ad_report", "checksum": {"name": "sha256", "checksum": "da050cc8b3a8c2d3c1467121e40678b547578c40d1d557f4c034cfdf07838d1a"}, "tags": [], "refs": [["stg_google_ads__ad_stats"], ["stg_google_ads__account_history"], ["stg_google_ads__campaign_history"], ["stg_google_ads__ad_group_history"], ["stg_google_ads__ad_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance at the ad level.", "columns": {"date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The unique identifier of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The url which is displayed with the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_final_urls": {"name": "source_final_urls", "description": "The final urls that are used within the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_status": {"name": "ad_status", "description": "The status of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_type": {"name": "ad_type", "description": "The type of the ad that is being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads://models/google_ads.yml", "compiled_path": "target/compiled/google_ads/models/google_ads__ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads", "materialized": "table"}, "created_at": 1660323534.476886, "compiled_sql": "with stats as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_stats`\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_history`\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_history`\n    where is_most_recent_record = True\n),\n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_history`\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_id,\n        ads.ad_status,\n        ads.ad_type,\n        ads.display_url,\n        ads.source_final_urls,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        \n\n    from stats\n    left join ads\n        on stats.ad_id = ads.ad_id\n        and stats.ad_group_id = ads.ad_group_id\n    left join ad_groups\n        on ads.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__ad_report`"}, "model.google_ads.google_ads__ad_group_report": {"raw_sql": "with stats as (\n\n    select *\n    from {{ var('ad_group_stats') }}\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n),\n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ad_groups.ad_group_status,\n        ad_groups.ad_group_type,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        {% for metric in var('google_ads__ad_group_stats_passthrough_metrics', []) %}\n        , sum(stats.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from stats\n    left join ad_groups\n        on stats.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n    {{ dbt_utils.group_by(9) }}\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__ad_group_stats", "model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__campaign_history", "model.google_ads_source.stg_google_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads", "fqn": ["google_ads", "google_ads__ad_group_report"], "unique_id": "model.google_ads.google_ads__ad_group_report", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "google_ads__ad_group_report.sql", "original_file_path": "models/google_ads__ad_group_report.sql", "name": "google_ads__ad_group_report", "alias": "google_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "2c9bcd061d7fe6fb3c364c677666fb269cc57001670e2efe25c6304dedc9ff04"}, "tags": [], "refs": [["stg_google_ads__ad_group_stats"], ["stg_google_ads__account_history"], ["stg_google_ads__campaign_history"], ["stg_google_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance at the ad group level.", "columns": {"date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "The status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_type": {"name": "ad_group_type", "description": "The type of ad group which is serving ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads://models/google_ads.yml", "compiled_path": "target/compiled/google_ads/models/google_ads__ad_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads", "materialized": "table"}, "created_at": 1660323534.470688, "compiled_sql": "with stats as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_stats`\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_history`\n    where is_most_recent_record = True\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_history`\n    where is_most_recent_record = True\n),\n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_history`\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ad_groups.ad_group_status,\n        ad_groups.ad_group_type,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        \n\n    from stats\n    left join ad_groups\n        on stats.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n    group by 1,2,3,4,5,6,7,8,9\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__ad_group_report`"}, "model.google_ads.google_ads__account_report": {"raw_sql": "with stats as (\n\n    select *\n    from {{ var('account_stats') }}\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        accounts.currency_code,\n        accounts.auto_tagging_enabled,\n        accounts.time_zone,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        {% for metric in var('google_ads__ad_group_stats_passthrough_metrics', []) %}\n        , sum(stats.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from stats\n    left join accounts\n        on stats.account_id = accounts.account_id\n    {{ dbt_utils.group_by(6) }}\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__account_stats", "model.google_ads_source.stg_google_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads", "fqn": ["google_ads", "google_ads__account_report"], "unique_id": "model.google_ads.google_ads__account_report", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "google_ads__account_report.sql", "original_file_path": "models/google_ads__account_report.sql", "name": "google_ads__account_report", "alias": "google_ads__account_report", "checksum": {"name": "sha256", "checksum": "2ed4895dee6e121cea1d6f301a71e752f0c9bf39ee0c8cc52be7707830b5354f"}, "tags": [], "refs": [["stg_google_ads__account_stats"], ["stg_google_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance at the account level.", "columns": {"date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone which the account is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency which the account uses.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_tagging_enabled": {"name": "auto_tagging_enabled", "description": "Boolean indicating if the account uses auto tagging within ad urls.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads://models/google_ads.yml", "compiled_path": "target/compiled/google_ads/models/google_ads__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads", "materialized": "table"}, "created_at": 1660323534.4659379, "compiled_sql": "with stats as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_stats`\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_history`\n    where is_most_recent_record = True\n), \n\nfields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        accounts.currency_code,\n        accounts.auto_tagging_enabled,\n        accounts.time_zone,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        \n\n    from stats\n    left join accounts\n        on stats.account_id = accounts.account_id\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__account_report`"}, "model.linkedin_source.stg_linkedin_ads__creative_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin_ads__creative_history_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_ads__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        id as creative_id,\n        campaign_id,\n        type,\n        cast(version_tag as numeric) as version_tag,\n        status,\n        click_uri,\n        call_to_action_label_type,\n        cast(last_modified_time as {{ dbt_utils.type_timestamp() }}) as last_modified_at,\n        cast(created_time as {{ dbt_utils.type_timestamp() }}) as created_at,\n        row_number() over (partition by id order by last_modified_time desc) = 1 as is_latest_version\n\n    from macro\n\n), url_fields as (\n\n    select \n        *,\n        {{ dbt_utils.split_part('click_uri', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('click_uri') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('click_uri') }} as url_path,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_term') }} as utm_term\n    \n    from fields\n)\n\nselect *\nfrom url_fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.linkedin_source.stg_linkedin_ads__creative_history_tmp", "model.linkedin_source.stg_linkedin_ads__creative_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "stg_linkedin_ads__creative_history"], "unique_id": "model.linkedin_source.stg_linkedin_ads__creative_history", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin_ads__creative_history.sql", "original_file_path": "models/stg_linkedin_ads__creative_history.sql", "name": "stg_linkedin_ads__creative_history", "alias": "stg_linkedin_ads__creative_history", "checksum": {"name": "sha256", "checksum": "ae5881422e78ed9a9e4a59787b2dc03401563e7c300d0cde211ca18f15fdfbe2"}, "tags": [], "refs": [["stg_linkedin_ads__creative_history_tmp"], ["stg_linkedin_ads__creative_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a 'version' of a creative.", "columns": {"creative_id": {"name": "creative_id", "description": "Unique internal ID representing the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the creative was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign the creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "TEXT_AD - Text with Sponsored Link to landing page on your site.\nSPONSORED_STATUS_UPDATE - Sponsored status update from a profile page.\nSPONSORED_INMAILS - Single message ad delivered to the member's inbox\nSPONSORED_MESSAGE - Conversation ad containing a tree of pre-determined messages delivered to the member's inbox\nSPONSORED_VIDEO - Sponsored videos.\nSPONSORED_UPDATE_CAROUSEL - Sponsored Carousels\nFOLLOW_COMPANY_V2 - Dynamic Follow Ad\nSPOTLIGHT_V2 - Dynamic Spotlight Ad\nJOBS_V2 - Dynamic Job Ad\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "ACTIVE - Creative creation is complete and creative is available for review and serve.\nPAUSED - Creative creation is complete and creative is current, but should temporarily not be served. This status is not valid upon creation.\nDRAFT - Creative creation is incomplete and may still be edited.\nARCHIVED - Creative creation is complete, but creative should not be served and should be separated from non-archived creatives in any UI.\nCANCELED - Creative is permanently canceled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_uri": {"name": "click_uri", "description": "Required when creative type is TEXT_AD. Maximum character limit of 500 after URL encoding all special characters. \nLimit does not include the \"https://\" prefix.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_to_action_label_type": {"name": "call_to_action_label_type", "description": "The labeled call-to-action on this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Boolean of whether the record is the latest version of the cretive.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin_ads__creative_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323534.6153831, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__creative_history_tmp`\n\n), macro as (\n\n    select \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    call_to_action_label_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    call_to_action_target\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    click_uri\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    follow_company_call_to_action\n    \n , \n    cast(null as \n    string\n) as \n    \n    follow_company_organization_logo\n    \n , \n    cast(null as \n    string\n) as \n    \n    follow_company_organization_name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    jobs_company_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    jobs_logo\n    \n , \n    cast(null as \n    string\n) as \n    \n    jobs_organization\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    last_modified_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    reference\n    \n , \n    cast(null as \n    string\n) as \n    \n    review_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_in_mail_content\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_activity\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_carousel_activity\n    \n , \n    cast(null as boolean) as \n    \n    sponsored_update_carousel_direct_sponsored_content\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_carousel_share\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_carousel_share_content_description\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_carousel_share_content_share_media_category\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_carousel_share_content_title\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_carousel_share_subject\n    \n , \n    cast(null as boolean) as \n    \n    sponsored_update_direct_sponsored_content\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_share\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_share_content_description\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_share_content_share_media_category\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_share_content_title\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_update_share_subject\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_video_media_asset\n    \n , \n    cast(null as \n    string\n) as \n    \n    sponsored_video_user_generated_content_post\n    \n , \n    cast(null as \n    string\n) as \n    \n    spotlight_call_to_action\n    \n , \n    cast(null as \n    string\n) as \n    \n    spotlight_custom_background\n    \n , \n    cast(null as \n    string\n) as \n    \n    spotlight_description\n    \n , \n    cast(null as \n    string\n) as \n    \n    spotlight_forum_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    spotlight_headline\n    \n , \n    cast(null as \n    string\n) as \n    \n    spotlight_logo\n    \n , \n    cast(null as boolean) as \n    \n    spotlight_show_member_profile_photo\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    text_ad_text\n    \n , \n    cast(null as \n    string\n) as \n    \n    text_ad_title\n    \n , \n    cast(null as \n    string\n) as \n    \n    type\n    \n , \n    cast(null as \n    string\n) as \n    \n    version_tag\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        id as creative_id,\n        campaign_id,\n        type,\n        cast(version_tag as numeric) as version_tag,\n        status,\n        click_uri,\n        call_to_action_label_type,\n        cast(last_modified_time as \n    timestamp\n) as last_modified_at,\n        cast(created_time as \n    timestamp\n) as created_at,\n        row_number() over (partition by id order by last_modified_time desc) = 1 as is_latest_version\n\n    from macro\n\n), url_fields as (\n\n    select \n        *,\n        \n\n  \n    split(\n        click_uri,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        click_uri,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_source,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        click_uri,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_medium,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        click_uri,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_campaign,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        click_uri,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_content,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        click_uri,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_term\n    \n    from fields\n)\n\nselect *\nfrom url_fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__creative_history`"}, "model.linkedin_source.stg_linkedin_ads__campaign_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin_ads__campaign_history_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as campaign_id,\n        name as campaign_name,\n        cast(version_tag as numeric) as version_tag,\n        campaign_group_id,\n        account_id,\n        status,\n        type,\n        cost_type,\n        creative_selection,\n        daily_budget_amount,\n        daily_budget_currency_code,\n        unit_cost_amount,\n        unit_cost_currency_code,\n        format,\n        locale_country,\n        locale_language,\n        objective_type,\n        optimization_target_type,\n        audience_expansion_enabled as is_audience_expansion_enabled,\n        offsite_delivery_enabled as is_offsite_delivery_enabled,\n        cast(run_schedule_start as {{ dbt_utils.type_timestamp() }}) as run_schedule_start_at,\n        cast(run_schedule_end as {{ dbt_utils.type_timestamp() }}) as run_schedule_end_at,\n        cast(last_modified_time as {{ dbt_utils.type_timestamp() }}) as last_modified_at,\n        cast(created_time as {{ dbt_utils.type_timestamp() }}) as created_at,\n        row_number() over (partition by id order by last_modified_time desc) = 1 as is_latest_version\n\n    from macro\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.linkedin_source.stg_linkedin_ads__campaign_history_tmp", "model.linkedin_source.stg_linkedin_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "stg_linkedin_ads__campaign_history"], "unique_id": "model.linkedin_source.stg_linkedin_ads__campaign_history", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin_ads__campaign_history.sql", "original_file_path": "models/stg_linkedin_ads__campaign_history.sql", "name": "stg_linkedin_ads__campaign_history", "alias": "stg_linkedin_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "122c437270afdde7004c49b131762c5d05360682fc5ad8749932789fa3c85b44"}, "tags": [], "refs": [["stg_linkedin_ads__campaign_history_tmp"], ["stg_linkedin_ads__campaign_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a 'version' of a campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "The ID of the campaign group the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_audience_expansion_enabled": {"name": "is_audience_expansion_enabled", "description": "Boolean (default=false) representing whether Audience Expansion is enabled for the campaign provides query expansion for certain targeting criteria.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_type": {"name": "cost_type", "description": "CPM - Cost per thousand advertising impressions. If type=SPONSORED_INMAILS; cost per send(CPS) is measured as CPM x 1000.\nCPC- Cost per individual click on the associated link.\nCPV- Cost per view for video ads.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_selection": {"name": "creative_selection", "description": "ROUND_ROBIN - Rotate through available creatives to serve them as evenly as possible.\nOPTIMIZED (default) - Bias selection taking into account such as expected performance. Not available for Message and Conversation Ads (type=SPONSORED_INMAILS).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount": {"name": "daily_budget_amount", "description": "Maximum amount to spend per day UTC. The amount of money as a real number string.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_currency_code": {"name": "daily_budget_currency_code", "description": "ISO currency code. The currency must match that of the parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "format": {"name": "format", "description": "The ad format on the campaign level. See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads/campaign-formats?view=li-lms-2022-07", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale_country": {"name": "locale_country", "description": "Locale of the campaign. An uppercase two-letter country code as defined by ISO-3166.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale_language": {"name": "locale_language", "description": "Locale of the campaign. A lowercase two-letter language code as defined by ISO-639.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective_type": {"name": "objective_type", "description": "Campaign Objective type values. Click [here](https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads-reporting/ad-budget-pricing-type-combinations?view=li-lms-2022-07) for Campaign Objective descriptions. One of: - BRAND_AWARENESS - ENGAGEMENT - JOB_APPLICANTS - LEAD_GENERATION - WEBSITE_CONVERSIONS - WEBSITE_VISITS - VIDEO_VIEWS\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_offsite_delivery_enabled": {"name": "is_offsite_delivery_enabled", "description": "Boolean indicating if this campaign to allowed to be served on the LinkedIn Audience Network to extend the reach of your campaign by delivering ads beyond the  LinkedIn feed to members on third-party apps and sites.\t(default will be \"True\" from June 30, 2022)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization_target_type": {"name": "optimization_target_type", "description": "Determines how this campaign is optimized for spending. If this is not set, there is no optimization. Refer to the documentation here. Default = 'NONE'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_start_at": {"name": "run_schedule_start_at", "description": "Scheduled date range to run associated creatives. The start date must be non-null. Represents the inclusive (greater than or equal to) value in which to start the range.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_end_at": {"name": "run_schedule_end_at", "description": "Scheduled date range to run associated creatives. The start date must be non-null. Represents the exclusive (strictly less than) value in which to end the range, if provided.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "ACTIVE - Denotes that the campaign is fully servable.\nPAUSED - Denotes that the campaign meets all requirements to be served, but temporarily should not be.\nARCHIVED - Denotes that the campaign is presently inactive, and should mostly be hidden in the UI until un-archived.\nCOMPLETED - Denotes that the campaign has reached a specified budgetary or chronological limit.\nCANCELED - Denotes that the campaign has been permanently canceled, such as when an advertising account is permanently closed.\nDRAFT - Denotes that the campaign is still being edited and not eligible for serving. Some validation will be postponed until the campaign is activated.\nPENDING_DELETION - Denotes that the campaign has been requested to be deleted that is currently pending.\nREMOVED - Denotes that the campaign was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "TEXT_AD - Text-based ads that show up in the right column or top of the page on LinkedIn.\nSPONSORED_UPDATES - Native ads that promote a company's content updates in the LinkedIn feed.\nSPONSORED_INMAILS - Personalized messages with a call-to-action button delivered to a LinkedIn's member inbox.\nDYNAMIC - Ads that are dynamically personalized.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_cost_amount": {"name": "unit_cost_amount", "description": "This value is used as one of the following: amount to bid (for manual bidding), amount which is the target cost (for target cost bidding) per click,  impression, or other event depending on the pricing model, or cost cap (for cost cap bidding). The amount of money as a real number string.  The amount should be non-negative if the bidding strategy is manual, target cost, or cost cap bidding. The default is 0 with the currency code set to match that of the associated account.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_cost_currency_code": {"name": "unit_cost_currency_code", "description": "Amount to bid per click, impression, or other event depending on the pricing model. The default is 0 with the currency code set to match that of the associated account.  ISO currency code.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Boolean of whether the record is the latest version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323534.627692, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history_tmp`\n\n), macro as (\n\n    select \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    associated_entity\n    \n , \n    cast(null as boolean) as \n    \n    audience_expansion_enabled\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    cost_type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    creative_selection\n    \n , \n    cast(null as \n    float64\n) as \n    \n    daily_budget_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    daily_budget_currency_code\n    \n , \n    cast(null as \n    string\n) as \n    \n    format\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    last_modified_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    locale_country\n    \n , \n    cast(null as \n    string\n) as \n    \n    locale_language\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    objective_type\n    \n , \n    cast(null as boolean) as \n    \n    offsite_delivery_enabled\n    \n , \n    cast(null as \n    string\n) as \n    \n    optimization_target_type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    run_schedule_end\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    run_schedule_start\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    type\n    \n , \n    cast(null as \n    float64\n) as \n    \n    unit_cost_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    unit_cost_currency_code\n    \n , \n    cast(null as \n    string\n) as \n    \n    version_tag\n    \n \n\n\n    from base\n\n), fields as (\n\n    select \n        id as campaign_id,\n        name as campaign_name,\n        cast(version_tag as numeric) as version_tag,\n        campaign_group_id,\n        account_id,\n        status,\n        type,\n        cost_type,\n        creative_selection,\n        daily_budget_amount,\n        daily_budget_currency_code,\n        unit_cost_amount,\n        unit_cost_currency_code,\n        format,\n        locale_country,\n        locale_language,\n        objective_type,\n        optimization_target_type,\n        audience_expansion_enabled as is_audience_expansion_enabled,\n        offsite_delivery_enabled as is_offsite_delivery_enabled,\n        cast(run_schedule_start as \n    timestamp\n) as run_schedule_start_at,\n        cast(run_schedule_end as \n    timestamp\n) as run_schedule_end_at,\n        cast(last_modified_time as \n    timestamp\n) as last_modified_at,\n        cast(created_time as \n    timestamp\n) as created_at,\n        row_number() over (partition by id order by last_modified_time desc) = 1 as is_latest_version\n\n    from macro\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history`"}, "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_ads__ad_analytics_by_campaign_tmp') }}\n),\n\nmacro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_ads__ad_analytics_by_campaign_tmp')),\n                staging_columns=get_ad_analytics_by_campaign_columns()\n            )\n        }}\n    from base\n),\n\nfields as (\n    \n    select \n        {{ dbt_utils.date_trunc('day', 'day') }} as date_day,\n        campaign_id,\n        clicks,\n        impressions,\n        {% if var('linkedin_ads__use_local_currency', false) %}\n        cost_in_local_currency as cost\n        {% else %}\n        cost_in_usd as cost\n        {% endif %}\n\n        {{ fivetran_utils.fill_pass_through_columns('linkedin_ads__campaign_passthrough_metrics') }}\n\n    from macro\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_ad_analytics_by_campaign_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.date_trunc", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "stg_linkedin_ads__ad_analytics_by_campaign"], "unique_id": "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin_ads__ad_analytics_by_campaign.sql", "original_file_path": "models/stg_linkedin_ads__ad_analytics_by_campaign.sql", "name": "stg_linkedin_ads__ad_analytics_by_campaign", "alias": "stg_linkedin_ads__ad_analytics_by_campaign", "checksum": {"name": "sha256", "checksum": "67de341042659da96f42e88ab34091b1207a784923197bc90fb96e9b48316b3d"}, "tags": [], "refs": [["stg_linkedin_ads__ad_analytics_by_campaign_tmp"], ["stg_linkedin_ads__ad_analytics_by_campaign_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin_ads__ad_analytics_by_campaign.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323534.606449, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_campaign_tmp`\n),\n\nmacro as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    cost_in_local_currency\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    cost_in_usd\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    day\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n \n\n\n    from base\n),\n\nfields as (\n    \n    select \n        timestamp_trunc(\n        cast(day as timestamp),\n        day\n    ) as date_day,\n        campaign_id,\n        clicks,\n        impressions,\n        \n        cost_in_usd as cost\n        \n\n        \n\n\n\n\n\n    from macro\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_campaign`"}, "model.linkedin_source.stg_linkedin_ads__campaign_group_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin_ads__campaign_group_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_ads__campaign_group_history_tmp')),\n                staging_columns=get_campaign_group_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as campaign_group_id,\n        name as campaign_group_name,\n        account_id,\n        status,\n        backfilled as is_backfilled,\n        cast(run_schedule_start as {{ dbt_utils.type_timestamp() }}) as run_schedule_start_at,\n        cast(run_schedule_end as {{ dbt_utils.type_timestamp() }}) as run_schedule_end_at,\n        cast(last_modified_time as {{ dbt_utils.type_timestamp() }}) as last_modified_at,\n        cast(created_time as {{ dbt_utils.type_timestamp() }}) as created_at,\n        row_number() over (partition by id order by last_modified_time desc) = 1 as is_latest_version\n\n    from macro\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_campaign_group_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history_tmp", "model.linkedin_source.stg_linkedin_ads__campaign_group_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "stg_linkedin_ads__campaign_group_history"], "unique_id": "model.linkedin_source.stg_linkedin_ads__campaign_group_history", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin_ads__campaign_group_history.sql", "original_file_path": "models/stg_linkedin_ads__campaign_group_history.sql", "name": "stg_linkedin_ads__campaign_group_history", "alias": "stg_linkedin_ads__campaign_group_history", "checksum": {"name": "sha256", "checksum": "9b3d3691e0c69037edc6fa49b1776fccb830bcbc131b879f970a51cd81ac04f6"}, "tags": [], "refs": [["stg_linkedin_ads__campaign_group_history_tmp"], ["stg_linkedin_ads__campaign_group_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a 'version' of a campaign group.", "columns": {"campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign group belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the campaign group was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_backfilled": {"name": "is_backfilled", "description": "Flag that denotes whether the campaign group was created organically or to backfill existing campaigns. This is a read-only field set by the system. Default = false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_start_at": {"name": "run_schedule_start_at", "description": "Represents the inclusive (greater than or equal to) date when to start running the associated campaigns under this campaign group. This field is required.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_end_at": {"name": "run_schedule_end_at", "description": "Represents the exclusive (strictly less than) date when to stop running the associated campaigns under this campaign group. If this field is unset, it indicates an open range with no end date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of campaign group. Possible values are: ACTIVE - Denotes that the campaign group is capable of serving ads, subject to run date and budget limitations (as well as any other limitations at the account or campaign level). ARCHIVED - Denotes that the campaign group is presently inactive, and should mostly be hidden in the UI until un-archived. CANCELLED - Denotes that the campaign group has been permanently canceled and cannot be reactivated. Not a settable status. DRAFT - Denotes that the campaign group is in a preliminary state and should temporarily not be served. PAUSED - Denotes that the campaign group meets all requirements to be served, but temporarily should not be. PENDING_DELETION - Denotes that the campaign group has been requested to be deleted that is currently pending. REMOVED - Denoted that the campaign group was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Boolean of whether the record is the latest version of the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin_ads__campaign_group_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323534.633125, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_group_history_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as boolean) as \n    \n    backfilled\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    last_modified_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    run_schedule_end\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    run_schedule_start\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n    from base\n\n), fields as (\n\n    select \n        id as campaign_group_id,\n        name as campaign_group_name,\n        account_id,\n        status,\n        backfilled as is_backfilled,\n        cast(run_schedule_start as \n    timestamp\n) as run_schedule_start_at,\n        cast(run_schedule_end as \n    timestamp\n) as run_schedule_end_at,\n        cast(last_modified_time as \n    timestamp\n) as last_modified_at,\n        cast(created_time as \n    timestamp\n) as created_at,\n        row_number() over (partition by id order by last_modified_time desc) = 1 as is_latest_version\n\n    from macro\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_group_history`"}, "model.linkedin_source.stg_linkedin_ads__account_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin_ads__account_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as account_id,\n        name as account_name,\n        currency,\n        cast(version_tag as numeric) as version_tag,\n        status,\n        type,\n        cast(last_modified_time as {{ dbt_utils.type_timestamp() }}) as last_modified_at,\n        cast(created_time as {{ dbt_utils.type_timestamp() }}) as created_at,\n        row_number() over (partition by id order by last_modified_time desc) = 1 as is_latest_version\n\n    from macro\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.linkedin_source.stg_linkedin_ads__account_history_tmp", "model.linkedin_source.stg_linkedin_ads__account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "stg_linkedin_ads__account_history"], "unique_id": "model.linkedin_source.stg_linkedin_ads__account_history", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin_ads__account_history.sql", "original_file_path": "models/stg_linkedin_ads__account_history.sql", "name": "stg_linkedin_ads__account_history", "alias": "stg_linkedin_ads__account_history", "checksum": {"name": "sha256", "checksum": "71f2305efb6cb7879f7b86156dedd42cfd9ed3760f47a5bf3ff6fba43a689fdc"}, "tags": [], "refs": [["stg_linkedin_ads__account_history_tmp"], ["stg_linkedin_ads__account_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a 'version' of an account.", "columns": {"account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar (default).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "ACTIVE - Account is active; this is the default state\nCANCELLED - Account has been permanently cancelled\nDRAFT - Account is in draft status, meaning it's not yet fully set up and it is not serving\nPENDING_DELETION - Denotes that the account has been requested to be deleted that is currently pending\nREMOVED - Denotes that the account was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "BUSINESS - This is the only value allowed when creating accounts through the API.\nENTERPRISE - This value cannot be used to create accounts through the API and is reserved for accounts created by LinkedIn's internal ad operations systems.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Boolean of whether the record is the latest version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin_ads__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323534.637985, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    last_modified_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as boolean) as \n    \n    notified_on_campaign_optimization\n    \n , \n    cast(null as boolean) as \n    \n    notified_on_creative_approval\n    \n , \n    cast(null as boolean) as \n    \n    notified_on_creative_rejection\n    \n , \n    cast(null as boolean) as \n    \n    notified_on_end_of_campaign\n    \n , \n    cast(null as \n    string\n) as \n    \n    reference\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    type\n    \n , \n    cast(null as \n    string\n) as \n    \n    version_tag\n    \n \n\n\n    from base\n\n), fields as (\n\n    select \n        id as account_id,\n        name as account_name,\n        currency,\n        cast(version_tag as numeric) as version_tag,\n        status,\n        type,\n        cast(last_modified_time as \n    timestamp\n) as last_modified_at,\n        cast(created_time as \n    timestamp\n) as created_at,\n        row_number() over (partition by id order by last_modified_time desc) = 1 as is_latest_version\n\n    from macro\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history`"}, "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin_ads__ad_analytics_by_creative_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_ads__ad_analytics_by_creative_tmp')),\n                staging_columns=get_ad_analytics_by_creative_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        {{ dbt_utils.date_trunc('day', 'day') }} as date_day,\n        creative_id,\n        clicks, \n        impressions,\n        {% if var('linkedin_ads__use_local_currency', false) %}\n        cost_in_local_currency as cost\n        {% else %}\n        cost_in_usd as cost\n        {% endif %}\n\n        {{ fivetran_utils.fill_pass_through_columns('linkedin_ads__creative_passthrough_metrics') }}\n\n    from macro\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_ad_analytics_by_creative_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.date_trunc", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative_tmp", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "stg_linkedin_ads__ad_analytics_by_creative"], "unique_id": "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin_ads__ad_analytics_by_creative.sql", "original_file_path": "models/stg_linkedin_ads__ad_analytics_by_creative.sql", "name": "stg_linkedin_ads__ad_analytics_by_creative", "alias": "stg_linkedin_ads__ad_analytics_by_creative", "checksum": {"name": "sha256", "checksum": "27d5df9afb7aacdcef758cb64936a7baae8c6caf87af139d255e02528f93a4d2"}, "tags": [], "refs": [["stg_linkedin_ads__ad_analytics_by_creative_tmp"], ["stg_linkedin_ads__ad_analytics_by_creative_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the creative level.", "columns": {"creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin_ads__ad_analytics_by_creative.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323534.603125, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_creative_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    cost_in_local_currency\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    cost_in_usd\n    \n , \n    cast(null as \n    int64\n) as \n    \n    creative_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    day\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        timestamp_trunc(\n        cast(day as timestamp),\n        day\n    ) as date_day,\n        creative_id,\n        clicks, \n        impressions,\n        \n        cost_in_usd as cost\n        \n\n        \n\n\n\n\n\n    from macro\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_creative`"}, "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative_tmp": {"raw_sql": "select *\nfrom {{ var('ad_analytics_by_creative') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "tmp", "stg_linkedin_ads__ad_analytics_by_creative_tmp"], "unique_id": "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative_tmp", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin_ads__ad_analytics_by_creative_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_ads__ad_analytics_by_creative_tmp.sql", "name": "stg_linkedin_ads__ad_analytics_by_creative_tmp", "alias": "stg_linkedin_ads__ad_analytics_by_creative_tmp", "checksum": {"name": "sha256", "checksum": "149662e300437302314d44f3ca4038be5caea5292080f81b8d4f928ad30a8e26"}, "tags": [], "refs": [["linkedin_ad_analytics_by_creative_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin_ads__ad_analytics_by_creative_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323531.300826, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`linkedin_ad_analytics_by_creative_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_creative_tmp`"}, "model.linkedin_source.stg_linkedin_ads__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "tmp", "stg_linkedin_ads__campaign_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin_ads__campaign_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_ads__campaign_history_tmp.sql", "name": "stg_linkedin_ads__campaign_history_tmp", "alias": "stg_linkedin_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "ea41c8d4ba83ff540a5f38f481cbd17406e99954f8b9b7b086ac94203a8dd6bd"}, "tags": [], "refs": [["linkedin_campaign_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323531.306921, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`linkedin_campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history_tmp`"}, "model.linkedin_source.stg_linkedin_ads__account_history_tmp": {"raw_sql": "select *\nfrom {{ var('account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "tmp", "stg_linkedin_ads__account_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin_ads__account_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_ads__account_history_tmp.sql", "name": "stg_linkedin_ads__account_history_tmp", "alias": "stg_linkedin_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "507b2d73a5d179ae1e5f4a45315c44a57983481cd15fe8835f7ec23d67407325"}, "tags": [], "refs": [["linkedin_account_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin_ads__account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323531.3123982, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`linkedin_account_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history_tmp`"}, "model.linkedin_source.stg_linkedin_ads__campaign_group_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_group_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "tmp", "stg_linkedin_ads__campaign_group_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin_ads__campaign_group_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin_ads__campaign_group_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_ads__campaign_group_history_tmp.sql", "name": "stg_linkedin_ads__campaign_group_history_tmp", "alias": "stg_linkedin_ads__campaign_group_history_tmp", "checksum": {"name": "sha256", "checksum": "5c8d7b73b2d6858e838ae8c60f86ad34518ec7a09197352cf36ae8dc3702cef4"}, "tags": [], "refs": [["linkedin_campaign_group_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin_ads__campaign_group_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323531.317931, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`linkedin_campaign_group_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_group_history_tmp`"}, "model.linkedin_source.stg_linkedin_ads__creative_history_tmp": {"raw_sql": "select *\nfrom {{ var('creative_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_creative_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "tmp", "stg_linkedin_ads__creative_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin_ads__creative_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin_ads__creative_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_ads__creative_history_tmp.sql", "name": "stg_linkedin_ads__creative_history_tmp", "alias": "stg_linkedin_ads__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "0a9c48b8a93c4db4b87927959573fea6c2cb654b2c30967379d4e3682479c3b8"}, "tags": [], "refs": [["linkedin_creative_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin_ads__creative_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323531.323404, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`linkedin_creative_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__creative_history_tmp`"}, "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp": {"raw_sql": "select * \nfrom {{ var('ad_analytics_by_campaign') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.linkedin_source.linkedin.ad_analytics_by_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads_source", "fqn": ["linkedin_source", "tmp", "stg_linkedin_ads__ad_analytics_by_campaign_tmp"], "unique_id": "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin_ads__ad_analytics_by_campaign_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_ads__ad_analytics_by_campaign_tmp.sql", "name": "stg_linkedin_ads__ad_analytics_by_campaign_tmp", "alias": "stg_linkedin_ads__ad_analytics_by_campaign_tmp", "checksum": {"name": "sha256", "checksum": "9d399df278876975d3d5796ee4b0a5b1ad2b5c1bfe1446eab9ce72b2d96347d6"}, "tags": [], "refs": [], "sources": [["linkedin", "ad_analytics_by_campaign"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin_ads__ad_analytics_by_campaign_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "linkedin_ads_source"}, "created_at": 1660323531.331201, "compiled_sql": "select * \nfrom `dbt-package-testing`.`linkedin_ads`.`ad_analytics_by_campaign`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_campaign_tmp`"}, "model.facebook_ads.facebook_ads__url_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('basic_ad') }}\n\n), \n\ncreatives as (\n\n    select *\n    from {{ ref('int_facebook_ads__creative_history') }}\n\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = true\n\n), \n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n), \n\nad_sets as (\n\n    select *\n    from {{ var('ad_set_history') }}\n    where is_most_recent_record = true\n\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n), \n\njoined as (\n\n    select\n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='facebook_ads__basic_ad_passthrough_metrics', transform = 'sum') }}\n    from report\n    left join ads \n        on report.ad_id = ads.ad_id\n    left join creatives\n        on ads.creative_id = creatives.creative_id\n    left join ad_sets\n        on ads.ad_set_id = ad_sets.ad_set_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id    \n    where creatives.url is not null\n    {{ dbt_utils.group_by(19) }}\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads.int_facebook_ads__creative_history", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "facebook_ads__url_report"], "unique_id": "model.facebook_ads.facebook_ads__url_report", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "facebook_ads__url_report.sql", "original_file_path": "models/facebook_ads__url_report.sql", "name": "facebook_ads__url_report", "alias": "facebook_ads__url_report", "checksum": {"name": "sha256", "checksum": "10c9e21c2dd8784f9e08d760bced13633256fa77a516234ee971c3c6d1aa97c6"}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"], ["int_facebook_ads__creative_history"], ["stg_facebook_ads__account_history"], ["stg_facebook_ads__ad_history"], ["stg_facebook_ads__ad_set_history"], ["stg_facebook_ads__campaign_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Facebook ad at the URL level.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "The ID of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the related ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the related ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "The name of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads://models/facebook.yml", "compiled_path": "target/compiled/facebook_ads/models/facebook_ads__url_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "table", "enabled": true}, "created_at": 1660323534.759966, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad`\n\n), \n\ncreatives as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`int_facebook_ads__creative_history`\n\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history`\n    where is_most_recent_record = true\n\n), \n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_history`\n    where is_most_recent_record = true\n\n), \n\nad_sets as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_set_history`\n    where is_most_recent_record = true\n\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__campaign_history`\n    where is_most_recent_record = true\n\n), \n\njoined as (\n\n    select\n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    left join ads \n        on report.ad_id = ads.ad_id\n    left join creatives\n        on ads.creative_id = creatives.creative_id\n    left join ad_sets\n        on ads.ad_set_id = ad_sets.ad_set_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id    \n    where creatives.url is not null\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__url_report`"}, "model.facebook_ads.facebook_ads__url_tags": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith base as (\n\n    select *\n    from {{ var('creative_history') }}\n    where is_most_recent_record = true\n), \n\nrequired_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        url_tags\n    from base\n    where url_tags is not null\n), \n\n{{ get_url_tags_query() }} \n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads.get_url_tags_query"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "facebook_ads__url_tags"], "unique_id": "model.facebook_ads.facebook_ads__url_tags", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "facebook_ads__url_tags.sql", "original_file_path": "models/facebook_ads__url_tags.sql", "name": "facebook_ads__url_tags", "alias": "facebook_ads__url_tags", "checksum": {"name": "sha256", "checksum": "94dcb7faf1441b289fcec62f3e81794a05a34cf10bf2955e8a8f8c18555f8ad2"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "metrics": [], "description": "Each record is a unique combination of creative_id and corresponding key, value, type contained in the url_tags field", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "The unique fivetran ID for this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The associated creative_id for this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "The url tag object name e.g. utm_source associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The value assigned to the url tag object associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type assigned to the url tag object e.g. 'AD_VIDEO'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads://models/facebook.yml", "compiled_path": "target/compiled/facebook_ads/models/facebook_ads__url_tags.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "table", "enabled": true}, "created_at": 1660323534.77646, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__creative_history`\n    where is_most_recent_record = true\n), \n\nrequired_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        url_tags\n    from base\n    where url_tags is not null\n), \n\n\n\n  cleaned_json as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          json_extract_array(replace(trim(url_tags, '\"'),'\\\\','')) as cleaned_url_tags\n      from required_fields\n  ), \n\n  unnested as (\n\n      select \n        _fivetran_id, \n        creative_id, \n        url_tag_element\n      from cleaned_json\n      left join unnest(cleaned_url_tags) as url_tag_element\n      where cleaned_url_tags is not null\n  ), \n\n  fields as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          json_extract_scalar(url_tag_element, '$.key') as key,\n          json_extract_scalar(url_tag_element, '$.value') as value,\n          json_extract_scalar(url_tag_element, '$.type') as type\n      from unnested\n  )\n\n \n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__url_tags`"}, "model.facebook_ads.facebook_ads__campaign_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('basic_ad') }}\n\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = true\n\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n),\n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n),\n\njoined as (\n\n    select \n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        campaigns.start_at,\n        campaigns.end_at,\n        campaigns.status,\n        campaigns.daily_budget,\n        campaigns.lifetime_budget,\n        campaigns.budget_remaining,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='facebook_ads__basic_ad_passthrough_metrics', transform = 'sum') }}\n    from report \n    left join accounts\n        on report.account_id = accounts.account_id\n    left join ads \n        on report.ad_id = ads.ad_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n    {{ dbt_utils.group_by(11) }}\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history", "model.facebook_ads_source.stg_facebook_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "facebook_ads__campaign_report"], "unique_id": "model.facebook_ads.facebook_ads__campaign_report", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "facebook_ads__campaign_report.sql", "original_file_path": "models/facebook_ads__campaign_report.sql", "name": "facebook_ads__campaign_report", "alias": "facebook_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "4bec447c9d29e7a26180ce14a68d0a1217d60f0d24bed7c89716b3520c053a75"}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"], ["stg_facebook_ads__account_history"], ["stg_facebook_ads__campaign_history"], ["stg_facebook_ads__ad_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Facebook campaign.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads://models/facebook.yml", "compiled_path": "target/compiled/facebook_ads/models/facebook_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "table", "enabled": true}, "created_at": 1660323534.7715368, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad`\n\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history`\n    where is_most_recent_record = true\n\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__campaign_history`\n    where is_most_recent_record = true\n\n),\n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_history`\n    where is_most_recent_record = true\n\n),\n\njoined as (\n\n    select \n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        campaigns.start_at,\n        campaigns.end_at,\n        campaigns.status,\n        campaigns.daily_budget,\n        campaigns.lifetime_budget,\n        campaigns.budget_remaining,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report \n    left join accounts\n        on report.account_id = accounts.account_id\n    left join ads \n        on report.ad_id = ads.ad_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n    group by 1,2,3,4,5,6,7,8,9,10,11\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__campaign_report`"}, "model.facebook_ads.facebook_ads__account_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('basic_ad') }}\n\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = true\n\n),\n\njoined as (\n\n    select \n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        accounts.account_status,\n        accounts.business_country_code,\n        accounts.created_at,\n        accounts.currency,\n        accounts.timezone_name,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='facebook_ads__basic_ad_passthrough_metrics', transform = 'sum') }}\n    from report \n    left join accounts\n        on report.account_id = accounts.account_id\n    {{ dbt_utils.group_by(8) }}\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "facebook_ads__account_report"], "unique_id": "model.facebook_ads.facebook_ads__account_report", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "facebook_ads__account_report.sql", "original_file_path": "models/facebook_ads__account_report.sql", "name": "facebook_ads__account_report", "alias": "facebook_ads__account_report", "checksum": {"name": "sha256", "checksum": "845cdb5118e536d66d515c2e11eee71d380e406ba4f443bae4828ec70362841e"}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"], ["stg_facebook_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Facebook account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads://models/facebook.yml", "compiled_path": "target/compiled/facebook_ads/models/facebook_ads__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "table", "enabled": true}, "created_at": 1660323534.774048, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad`\n\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history`\n    where is_most_recent_record = true\n\n),\n\njoined as (\n\n    select \n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        accounts.account_status,\n        accounts.business_country_code,\n        accounts.created_at,\n        accounts.currency,\n        accounts.timezone_name,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report \n    left join accounts\n        on report.account_id = accounts.account_id\n    group by 1,2,3,4,5,6,7,8\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__account_report`"}, "model.facebook_ads.facebook_ads__ad_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('basic_ad') }}\n\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = true\n\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n),\n\nad_sets as (\n\n    select *\n    from {{ var('ad_set_history') }}\n    where is_most_recent_record = true\n\n),\n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n),\n\njoined as (\n\n    select \n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='facebook_ads__basic_ad_passthrough_metrics', transform = 'sum') }}\n    from report \n    left join accounts\n        on report.account_id = accounts.account_id\n    left join ads \n        on report.ad_id = ads.ad_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n    left join ad_sets\n        on ads.ad_set_id = ad_sets.ad_set_id\n    {{ dbt_utils.group_by(9) }}\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "facebook_ads__ad_report"], "unique_id": "model.facebook_ads.facebook_ads__ad_report", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "facebook_ads__ad_report.sql", "original_file_path": "models/facebook_ads__ad_report.sql", "name": "facebook_ads__ad_report", "alias": "facebook_ads__ad_report", "checksum": {"name": "sha256", "checksum": "36088a9abc521347aacc7d9bf0f56fd712441e94a2bc66ef334f85ff8f4761ea"}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"], ["stg_facebook_ads__account_history"], ["stg_facebook_ads__campaign_history"], ["stg_facebook_ads__ad_set_history"], ["stg_facebook_ads__ad_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Facebook ad.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "The ID of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the related ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the related ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads://models/facebook.yml", "compiled_path": "target/compiled/facebook_ads/models/facebook_ads__ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "table", "enabled": true}, "created_at": 1660323534.764689, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad`\n\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history`\n    where is_most_recent_record = true\n\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__campaign_history`\n    where is_most_recent_record = true\n\n),\n\nad_sets as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_set_history`\n    where is_most_recent_record = true\n\n),\n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_history`\n    where is_most_recent_record = true\n\n),\n\njoined as (\n\n    select \n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report \n    left join accounts\n        on report.account_id = accounts.account_id\n    left join ads \n        on report.ad_id = ads.ad_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n    left join ad_sets\n        on ads.ad_set_id = ad_sets.ad_set_id\n    group by 1,2,3,4,5,6,7,8,9\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__ad_report`"}, "model.facebook_ads.facebook_ads__ad_set_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('basic_ad') }}\n\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = true\n\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n),\n\nad_sets as (\n\n    select *\n    from {{ var('ad_set_history') }}\n    where is_most_recent_record = true\n\n),\n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n),\n\njoined as (\n\n    select \n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ad_sets.start_at,\n        ad_sets.end_at,\n        ad_sets.bid_strategy,\n        ad_sets.daily_budget,\n        ad_sets.budget_remaining,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='facebook_ads__basic_ad_passthrough_metrics', transform = 'sum') }}\n    from report \n    left join accounts\n        on report.account_id = accounts.account_id\n    left join ads \n        on report.ad_id = ads.ad_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n    left join ad_sets\n        on ads.ad_set_id = ad_sets.ad_set_id\n    {{ dbt_utils.group_by(12) }}\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "facebook_ads__ad_set_report"], "unique_id": "model.facebook_ads.facebook_ads__ad_set_report", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "facebook_ads__ad_set_report.sql", "original_file_path": "models/facebook_ads__ad_set_report.sql", "name": "facebook_ads__ad_set_report", "alias": "facebook_ads__ad_set_report", "checksum": {"name": "sha256", "checksum": "d1b0e28fe240e405fe8f746c38d4fad26a8d43e10dcd6f375617b78095f87e01"}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"], ["stg_facebook_ads__account_history"], ["stg_facebook_ads__campaign_history"], ["stg_facebook_ads__ad_set_history"], ["stg_facebook_ads__ad_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Facebook ad set.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "The ID of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads://models/facebook.yml", "compiled_path": "target/compiled/facebook_ads/models/facebook_ads__ad_set_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "table", "enabled": true}, "created_at": 1660323534.7683241, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad`\n\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history`\n    where is_most_recent_record = true\n\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__campaign_history`\n    where is_most_recent_record = true\n\n),\n\nad_sets as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_set_history`\n    where is_most_recent_record = true\n\n),\n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_history`\n    where is_most_recent_record = true\n\n),\n\njoined as (\n\n    select \n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ad_sets.start_at,\n        ad_sets.end_at,\n        ad_sets.bid_strategy,\n        ad_sets.daily_budget,\n        ad_sets.budget_remaining,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report \n    left join accounts\n        on report.account_id = accounts.account_id\n    left join ads \n        on report.ad_id = ads.ad_id\n    left join campaigns\n        on ads.campaign_id = campaigns.campaign_id\n    left join ad_sets\n        on ads.ad_set_id = ad_sets.ad_set_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__ad_set_report`"}, "model.facebook_ads.int_facebook_ads__creative_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\n{% set url_field = \"coalesce(page_link,template_page_link)\" %}\n\nwith base as (\n\n    select *\n    from {{ var('creative_history') }}\n    where is_most_recent_record = true\n\n), \n\nurl_tags as (\n\n    select *\n    from {{ ref('facebook_ads__url_tags') }}\n), \n\nurl_tags_pivoted as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        min(case when key = 'utm_source' then value end) as utm_source,\n        min(case when key = 'utm_medium' then value end) as utm_medium,\n        min(case when key = 'utm_campaign' then value end) as utm_campaign,\n        min(case when key = 'utm_content' then value end) as utm_content,\n        min(case when key = 'utm_term' then value end) as utm_term\n    from url_tags\n    group by 1,2\n\n), \n\nfields as (\n\n    select\n        base._fivetran_id,\n        base.creative_id,\n        base.account_id,\n        base.creative_name,\n        {{ url_field }} as url,\n        {{ dbt_utils.split_part(url_field, \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host(url_field) }} as url_host,\n        '/' || {{ dbt_utils.get_url_path(url_field) }} as url_path,\n        coalesce(url_tags_pivoted.utm_source, {{ dbt_utils.get_url_parameter(url_field, 'utm_source') }}) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, {{ dbt_utils.get_url_parameter(url_field, 'utm_medium') }}) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, {{ dbt_utils.get_url_parameter(url_field, 'utm_campaign') }}) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, {{ dbt_utils.get_url_parameter(url_field, 'utm_content') }}) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, {{ dbt_utils.get_url_parameter(url_field, 'utm_term') }}) as utm_term\n    from base\n    left join url_tags_pivoted\n        on base._fivetran_id = url_tags_pivoted._fivetran_id\n        and base.creative_id = url_tags_pivoted.creative_id\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history", "model.facebook_ads.facebook_ads__url_tags"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "intermediate", "int_facebook_ads__creative_history"], "unique_id": "model.facebook_ads.int_facebook_ads__creative_history", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "intermediate/int_facebook_ads__creative_history.sql", "original_file_path": "models/intermediate/int_facebook_ads__creative_history.sql", "name": "int_facebook_ads__creative_history", "alias": "int_facebook_ads__creative_history", "checksum": {"name": "sha256", "checksum": "8ae43e8b153e019583a0b862ba65491fe953552c9a51ab478c545a8b52ef1d65"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["facebook_ads__url_tags"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads/models/intermediate/int_facebook_ads__creative_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "view", "enabled": true}, "created_at": 1660323531.413891, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__creative_history`\n    where is_most_recent_record = true\n\n), \n\nurl_tags as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__url_tags`\n), \n\nurl_tags_pivoted as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        min(case when key = 'utm_source' then value end) as utm_source,\n        min(case when key = 'utm_medium' then value end) as utm_medium,\n        min(case when key = 'utm_campaign' then value end) as utm_campaign,\n        min(case when key = 'utm_content' then value end) as utm_content,\n        min(case when key = 'utm_term' then value end) as utm_term\n    from url_tags\n    group by 1,2\n\n), \n\nfields as (\n\n    select\n        base._fivetran_id,\n        base.creative_id,\n        base.account_id,\n        base.creative_name,\n        coalesce(page_link,template_page_link) as url,\n        \n\n  \n    split(\n        coalesce(page_link,template_page_link),\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        coalesce(url_tags_pivoted.utm_source, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        coalesce(page_link,template_page_link),\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        coalesce(page_link,template_page_link),\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        coalesce(page_link,template_page_link),\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        coalesce(page_link,template_page_link),\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        coalesce(page_link,template_page_link),\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_term\n    from base\n    left join url_tags_pivoted\n        on base._fivetran_id = url_tags_pivoted._fivetran_id\n        and base.creative_id = url_tags_pivoted.creative_id\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`int_facebook_ads__creative_history`"}, "model.snapchat_ads.snapchat_ads__ad_report": {"raw_sql": "with ad_hourly as (\n\n    select *\n    from {{ var('ad_hourly_report') }}\n\n), creatives as (\n\n    select *\n    from {{ ref('snapchat_ads__creative_history_prep') }}\n\n), account as (\n\n    select *\n    from {{ var('ad_account_history') }}\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n), aggregated as (\n\n    select\n        cast(ad_hourly.date_hour as date) as date_day,\n        account.ad_account_id,\n        account.ad_account_name,\n        ad_hourly.ad_id,\n        ads.ad_name,\n        account.currency,\n        sum(ad_hourly.swipes) as swipes,\n        sum(ad_hourly.impressions) as impressions,\n        round(sum(ad_hourly.spend),2) as spend\n        \n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='snapchat_ads__ad_hourly_passthrough_metrics', transform = 'sum') }}\n    from ad_hourly\n    left join ads \n        on ad_hourly.ad_id = ads.ad_id\n    left join creatives\n        on ads.creative_id = creatives.creative_id\n    left join account\n        on creatives.ad_account_id = account.ad_account_id\n    \n    {{ dbt_utils.group_by(6) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report", "model.snapchat_ads.snapchat_ads__creative_history_prep", "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "snapchat_ads__ad_report"], "unique_id": "model.snapchat_ads.snapchat_ads__ad_report", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "snapchat_ads__ad_report.sql", "original_file_path": "models/snapchat_ads__ad_report.sql", "name": "snapchat_ads__ad_report", "alias": "snapchat_ads__ad_report", "checksum": {"name": "sha256", "checksum": "c5a9320f9e0d9e7209b1c708c476085c24fd7c5b3cb724265f0407c9a9094e4e"}, "tags": [], "refs": [["stg_snapchat_ads__ad_hourly_report"], ["snapchat_ads__creative_history_prep"], ["stg_snapchat_ads__ad_account_history"], ["stg_snapchat_ads__ad_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Snapchat ad account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The current used by the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads://models/snapchat.yml", "compiled_path": "target/compiled/snapchat_ads/models/snapchat_ads__ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "table"}, "created_at": 1660323534.826014, "compiled_sql": "with  __dbt__cte__snapchat_ads__creative_history_prep as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history`\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history`\n    where is_most_recent_record = true\n\n), url_tags_pivoted as (\n\n    select \n        creative_id,\n        min(case when param_key = 'utm_source' then param_value end) as utm_source,\n        min(case when param_key = 'utm_medium' then param_value end) as utm_medium,\n        min(case when param_key = 'utm_campaign' then param_value end) as utm_campaign,\n        min(case when param_key = 'utm_content' then param_value end) as utm_content,\n        min(case when param_key = 'utm_term' then param_value end) as utm_term\n    from url_tags\n    group by 1\n\n), fields as (\n\n    select\n        base.creative_id,\n        base.ad_account_id,\n        base.creative_name,\n        base.url,\n        \n\n  \n    split(\n        base.url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        coalesce(url_tags_pivoted.utm_source, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_term\n    from base\n    left join url_tags_pivoted\n        on base.creative_id = url_tags_pivoted.creative_id\n\n)\n\nselect *\nfrom fields\n),ad_hourly as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_hourly_report`\n\n), creatives as (\n\n    select *\n    from __dbt__cte__snapchat_ads__creative_history_prep\n\n), account as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history`\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_history`\n    where is_most_recent_record = true\n\n), aggregated as (\n\n    select\n        cast(ad_hourly.date_hour as date) as date_day,\n        account.ad_account_id,\n        account.ad_account_name,\n        ad_hourly.ad_id,\n        ads.ad_name,\n        account.currency,\n        sum(ad_hourly.swipes) as swipes,\n        sum(ad_hourly.impressions) as impressions,\n        round(sum(ad_hourly.spend),2) as spend\n        \n        \n\n\n\n\n    from ad_hourly\n    left join ads \n        on ad_hourly.ad_id = ads.ad_id\n    left join creatives\n        on ads.creative_id = creatives.creative_id\n    left join account\n        on creatives.ad_account_id = account.ad_account_id\n    \n    group by 1,2,3,4,5,6\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.snapchat_ads.snapchat_ads__creative_history_prep", "sql": " __dbt__cte__snapchat_ads__creative_history_prep as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history`\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history`\n    where is_most_recent_record = true\n\n), url_tags_pivoted as (\n\n    select \n        creative_id,\n        min(case when param_key = 'utm_source' then param_value end) as utm_source,\n        min(case when param_key = 'utm_medium' then param_value end) as utm_medium,\n        min(case when param_key = 'utm_campaign' then param_value end) as utm_campaign,\n        min(case when param_key = 'utm_content' then param_value end) as utm_content,\n        min(case when param_key = 'utm_term' then param_value end) as utm_term\n    from url_tags\n    group by 1\n\n), fields as (\n\n    select\n        base.creative_id,\n        base.ad_account_id,\n        base.creative_name,\n        base.url,\n        \n\n  \n    split(\n        base.url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        coalesce(url_tags_pivoted.utm_source, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_term\n    from base\n    left join url_tags_pivoted\n        on base.creative_id = url_tags_pivoted.creative_id\n\n)\n\nselect *\nfrom fields\n)"}], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__ad_report`"}, "model.snapchat_ads.snapchat_ads__url_report": {"raw_sql": "with ad_hourly as (\n\n    select *\n    from {{ var('ad_hourly_report') }}\n\n), creatives as (\n\n    select *\n    from {{ ref('snapchat_ads__creative_history_prep') }}\n\n), account as (\n\n    select *\n    from {{ var('ad_account_history') }}\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n), ad_squads as (\n\n    select *\n    from {{ var('ad_squad_history') }}\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n\n), aggregated as (\n\n    select\n        cast(ad_hourly.date_hour as date) as date_day,\n        account.ad_account_id,\n        account.ad_account_name,\n        ad_hourly.ad_id,\n        ads.ad_name,\n        account.currency,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(ad_hourly.swipes) as swipes,\n        sum(ad_hourly.impressions) as impressions,\n        round(sum(ad_hourly.spend),2) as spend\n        \n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='snapchat_ads__ad_hourly_passthrough_metrics', transform = 'sum') }}\n    from ad_hourly\n    left join ads \n        on ad_hourly.ad_id = ads.ad_id\n    left join creatives\n        on ads.creative_id = creatives.creative_id\n    left join account\n        on creatives.ad_account_id = account.ad_account_id\n\n    -- We only want utm ads to populate this report. Therefore, we filter where url ads are populated.\n    where creatives.url is not null\n    {{ dbt_utils.group_by(14) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report", "model.snapchat_ads.snapchat_ads__creative_history_prep", "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "snapchat_ads__url_report"], "unique_id": "model.snapchat_ads.snapchat_ads__url_report", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "snapchat_ads__url_report.sql", "original_file_path": "models/snapchat_ads__url_report.sql", "name": "snapchat_ads__url_report", "alias": "snapchat_ads__url_report", "checksum": {"name": "sha256", "checksum": "18f5650b079e5c764694d443894775edc5b451f1aa294bca17ba49562ba72012"}, "tags": [], "refs": [["stg_snapchat_ads__ad_hourly_report"], ["snapchat_ads__creative_history_prep"], ["stg_snapchat_ads__ad_account_history"], ["stg_snapchat_ads__ad_history"], ["stg_snapchat_ads__ad_squad_history"], ["stg_snapchat_ads__campaign_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of Snapchat ads that leverage urls.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The current used by the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads://models/snapchat.yml", "compiled_path": "target/compiled/snapchat_ads/models/snapchat_ads__url_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "table"}, "created_at": 1660323534.840144, "compiled_sql": "with  __dbt__cte__snapchat_ads__creative_history_prep as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history`\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history`\n    where is_most_recent_record = true\n\n), url_tags_pivoted as (\n\n    select \n        creative_id,\n        min(case when param_key = 'utm_source' then param_value end) as utm_source,\n        min(case when param_key = 'utm_medium' then param_value end) as utm_medium,\n        min(case when param_key = 'utm_campaign' then param_value end) as utm_campaign,\n        min(case when param_key = 'utm_content' then param_value end) as utm_content,\n        min(case when param_key = 'utm_term' then param_value end) as utm_term\n    from url_tags\n    group by 1\n\n), fields as (\n\n    select\n        base.creative_id,\n        base.ad_account_id,\n        base.creative_name,\n        base.url,\n        \n\n  \n    split(\n        base.url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        coalesce(url_tags_pivoted.utm_source, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_term\n    from base\n    left join url_tags_pivoted\n        on base.creative_id = url_tags_pivoted.creative_id\n\n)\n\nselect *\nfrom fields\n),ad_hourly as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_hourly_report`\n\n), creatives as (\n\n    select *\n    from __dbt__cte__snapchat_ads__creative_history_prep\n\n), account as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history`\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_history`\n    where is_most_recent_record = true\n\n), ad_squads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_history`\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_history`\n    where is_most_recent_record = true\n\n\n), aggregated as (\n\n    select\n        cast(ad_hourly.date_hour as date) as date_day,\n        account.ad_account_id,\n        account.ad_account_name,\n        ad_hourly.ad_id,\n        ads.ad_name,\n        account.currency,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(ad_hourly.swipes) as swipes,\n        sum(ad_hourly.impressions) as impressions,\n        round(sum(ad_hourly.spend),2) as spend\n        \n        \n\n\n\n\n    from ad_hourly\n    left join ads \n        on ad_hourly.ad_id = ads.ad_id\n    left join creatives\n        on ads.creative_id = creatives.creative_id\n    left join account\n        on creatives.ad_account_id = account.ad_account_id\n\n    -- We only want utm ads to populate this report. Therefore, we filter where url ads are populated.\n    where creatives.url is not null\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.snapchat_ads.snapchat_ads__creative_history_prep", "sql": " __dbt__cte__snapchat_ads__creative_history_prep as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history`\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history`\n    where is_most_recent_record = true\n\n), url_tags_pivoted as (\n\n    select \n        creative_id,\n        min(case when param_key = 'utm_source' then param_value end) as utm_source,\n        min(case when param_key = 'utm_medium' then param_value end) as utm_medium,\n        min(case when param_key = 'utm_campaign' then param_value end) as utm_campaign,\n        min(case when param_key = 'utm_content' then param_value end) as utm_content,\n        min(case when param_key = 'utm_term' then param_value end) as utm_term\n    from url_tags\n    group by 1\n\n), fields as (\n\n    select\n        base.creative_id,\n        base.ad_account_id,\n        base.creative_name,\n        base.url,\n        \n\n  \n    split(\n        base.url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        coalesce(url_tags_pivoted.utm_source, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_term\n    from base\n    left join url_tags_pivoted\n        on base.creative_id = url_tags_pivoted.creative_id\n\n)\n\nselect *\nfrom fields\n)"}], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__url_report`"}, "model.snapchat_ads.snapchat_ads__account_report": {"raw_sql": "with ad_hourly as (\n\n    select *\n    from {{ var('ad_hourly_report') }}\n\n), account as (\n\n    select *\n    from {{ var('ad_account_history') }}\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n), ad_squads as (\n\n    select *\n    from {{ var('ad_squad_history') }}\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n\n), aggregated as (\n\n    select\n        cast(ad_hourly.date_hour as date) as date_day,\n        account.ad_account_id,\n        account.ad_account_name,\n        account.currency,\n        sum(ad_hourly.swipes) as swipes,\n        sum(ad_hourly.impressions) as impressions,\n        round(sum(ad_hourly.spend),2) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='snapchat_ads__ad_hourly_passthrough_metrics', transform = 'sum') }}\n    from ad_hourly\n    left join ads \n        on ad_hourly.ad_id = ads.ad_id\n    left join ad_squads\n        on ads.ad_squad_id = ad_squads.ad_squad_id\n    left join campaigns\n        on ad_squads.campaign_id = campaigns.campaign_id\n    left join account\n        on campaigns.ad_account_id = account.ad_account_id\n\n    {{ dbt_utils.group_by(4) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report", "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "snapchat_ads__account_report"], "unique_id": "model.snapchat_ads.snapchat_ads__account_report", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "snapchat_ads__account_report.sql", "original_file_path": "models/snapchat_ads__account_report.sql", "name": "snapchat_ads__account_report", "alias": "snapchat_ads__account_report", "checksum": {"name": "sha256", "checksum": "f66f17f5ccb0d1d9b05acb601d4a812a6731bea66f2998b02846da4721d8d401"}, "tags": [], "refs": [["stg_snapchat_ads__ad_hourly_report"], ["stg_snapchat_ads__ad_account_history"], ["stg_snapchat_ads__ad_history"], ["stg_snapchat_ads__ad_squad_history"], ["stg_snapchat_ads__campaign_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Snapchat ad account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The current used by the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads://models/snapchat.yml", "compiled_path": "target/compiled/snapchat_ads/models/snapchat_ads__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "table"}, "created_at": 1660323534.8219788, "compiled_sql": "with ad_hourly as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_hourly_report`\n\n), account as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history`\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_history`\n    where is_most_recent_record = true\n\n), ad_squads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_history`\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_history`\n    where is_most_recent_record = true\n\n\n), aggregated as (\n\n    select\n        cast(ad_hourly.date_hour as date) as date_day,\n        account.ad_account_id,\n        account.ad_account_name,\n        account.currency,\n        sum(ad_hourly.swipes) as swipes,\n        sum(ad_hourly.impressions) as impressions,\n        round(sum(ad_hourly.spend),2) as spend\n\n        \n\n\n\n\n    from ad_hourly\n    left join ads \n        on ad_hourly.ad_id = ads.ad_id\n    left join ad_squads\n        on ads.ad_squad_id = ad_squads.ad_squad_id\n    left join campaigns\n        on ad_squads.campaign_id = campaigns.campaign_id\n    left join account\n        on campaigns.ad_account_id = account.ad_account_id\n\n    group by 1,2,3,4\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__account_report`"}, "model.snapchat_ads.snapchat_ads__ad_squad_report": {"raw_sql": "with ad_squad_hourly as (\n\n    select *\n    from {{ var('ad_squad_hourly_report') }}\n\n), account as (\n\n    select *\n    from {{ var('ad_account_history') }}\n    where is_most_recent_record = true\n\n), ad_squads as (\n\n    select *\n    from {{ var('ad_squad_history') }}\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n\n), aggregated as (\n\n    select\n        cast(ad_squad_hourly.date_hour as date) as date_day,\n        account.ad_account_id,\n        account.ad_account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_squad_hourly.ad_squad_id,\n        ad_squads.ad_squad_name,\n        account.currency,\n        sum(ad_squad_hourly.swipes) as swipes,\n        sum(ad_squad_hourly.impressions) as impressions,\n        round(sum(ad_squad_hourly.spend),2) as spend\n        \n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='snapchat_ads__ad_squad_hourly_passthrough_metrics', transform = 'sum') }}\n    from ad_squad_hourly\n    left join ad_squads\n        on ad_squad_hourly.ad_squad_id = ad_squads.ad_squad_id\n    left join campaigns\n        on ad_squads.campaign_id = campaigns.campaign_id\n    left join account\n        on campaigns.ad_account_id = account.ad_account_id\n    \n    {{ dbt_utils.group_by(8) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report", "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "snapchat_ads__ad_squad_report"], "unique_id": "model.snapchat_ads.snapchat_ads__ad_squad_report", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "snapchat_ads__ad_squad_report.sql", "original_file_path": "models/snapchat_ads__ad_squad_report.sql", "name": "snapchat_ads__ad_squad_report", "alias": "snapchat_ads__ad_squad_report", "checksum": {"name": "sha256", "checksum": "dfbbb8f253bcec5fd566ac06578e14e337619ad8c3d88a68ab0709525feafcbd"}, "tags": [], "refs": [["stg_snapchat_ads__ad_squad_hourly_report"], ["stg_snapchat_ads__ad_account_history"], ["stg_snapchat_ads__ad_squad_history"], ["stg_snapchat_ads__campaign_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Snapchat ad squad.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_id": {"name": "ad_squad_id", "description": "The ID of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_name": {"name": "ad_squad_name", "description": "The name of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The current used by the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads://models/snapchat.yml", "compiled_path": "target/compiled/snapchat_ads/models/snapchat_ads__ad_squad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "table"}, "created_at": 1660323534.834368, "compiled_sql": "with ad_squad_hourly as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_hourly_report`\n\n), account as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history`\n    where is_most_recent_record = true\n\n), ad_squads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_history`\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_history`\n    where is_most_recent_record = true\n\n\n), aggregated as (\n\n    select\n        cast(ad_squad_hourly.date_hour as date) as date_day,\n        account.ad_account_id,\n        account.ad_account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_squad_hourly.ad_squad_id,\n        ad_squads.ad_squad_name,\n        account.currency,\n        sum(ad_squad_hourly.swipes) as swipes,\n        sum(ad_squad_hourly.impressions) as impressions,\n        round(sum(ad_squad_hourly.spend),2) as spend\n        \n        \n\n\n\n\n    from ad_squad_hourly\n    left join ad_squads\n        on ad_squad_hourly.ad_squad_id = ad_squads.ad_squad_id\n    left join campaigns\n        on ad_squads.campaign_id = campaigns.campaign_id\n    left join account\n        on campaigns.ad_account_id = account.ad_account_id\n    \n    group by 1,2,3,4,5,6,7,8\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__ad_squad_report`"}, "model.snapchat_ads.snapchat_ads__campaign_report": {"raw_sql": "with campaign_hourly as (\n\n    select *\n    from {{ var('campaign_hourly_report') }}\n\n), account as (\n\n    select *\n    from {{ var('ad_account_history') }}\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n\n), aggregated as (\n\n    select\n        cast(campaign_hourly.date_hour as date) as date_day,\n        account.ad_account_id,\n        account.ad_account_name,\n        campaign_hourly.campaign_id,\n        campaigns.campaign_name,\n        account.currency,\n        sum(campaign_hourly.swipes) as swipes,\n        sum(campaign_hourly.impressions) as impressions,\n        round(sum(campaign_hourly.spend),2) as spend\n        \n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='snapchat_ads__campaign_hourly_report_passthrough_metrics', transform = 'sum') }}\n    from campaign_hourly\n    left join campaigns\n        on campaign_hourly.campaign_id = campaigns.campaign_id\n    left join account\n        on campaigns.ad_account_id = account.ad_account_id\n    \n    {{ dbt_utils.group_by(6) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report", "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "snapchat_ads__campaign_report"], "unique_id": "model.snapchat_ads.snapchat_ads__campaign_report", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "snapchat_ads__campaign_report.sql", "original_file_path": "models/snapchat_ads__campaign_report.sql", "name": "snapchat_ads__campaign_report", "alias": "snapchat_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "0398205166c2c9d0d618196d85bcd7f78452ebfff46b7dce59ff2cf4eec7592b"}, "tags": [], "refs": [["stg_snapchat_ads__campaign_hourly_report"], ["stg_snapchat_ads__ad_account_history"], ["stg_snapchat_ads__campaign_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Snapchat campaign.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The current used by the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads://models/snapchat.yml", "compiled_path": "target/compiled/snapchat_ads/models/snapchat_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "table"}, "created_at": 1660323534.830432, "compiled_sql": "with campaign_hourly as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_hourly_report`\n\n), account as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history`\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_history`\n    where is_most_recent_record = true\n\n\n), aggregated as (\n\n    select\n        cast(campaign_hourly.date_hour as date) as date_day,\n        account.ad_account_id,\n        account.ad_account_name,\n        campaign_hourly.campaign_id,\n        campaigns.campaign_name,\n        account.currency,\n        sum(campaign_hourly.swipes) as swipes,\n        sum(campaign_hourly.impressions) as impressions,\n        round(sum(campaign_hourly.spend),2) as spend\n        \n        \n\n\n\n\n    from campaign_hourly\n    left join campaigns\n        on campaign_hourly.campaign_id = campaigns.campaign_id\n    left join account\n        on campaigns.ad_account_id = account.ad_account_id\n    \n    group by 1,2,3,4,5,6\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__campaign_report`"}, "model.snapchat_ads.snapchat_ads__creative_history_prep": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('creative_history') }}\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from {{ var('creative_url_tag_history') }}\n    where is_most_recent_record = true\n\n), url_tags_pivoted as (\n\n    select \n        creative_id,\n        min(case when param_key = 'utm_source' then param_value end) as utm_source,\n        min(case when param_key = 'utm_medium' then param_value end) as utm_medium,\n        min(case when param_key = 'utm_campaign' then param_value end) as utm_campaign,\n        min(case when param_key = 'utm_content' then param_value end) as utm_content,\n        min(case when param_key = 'utm_term' then param_value end) as utm_term\n    from url_tags\n    group by 1\n\n), fields as (\n\n    select\n        base.creative_id,\n        base.ad_account_id,\n        base.creative_name,\n        base.url,\n        {{ dbt_utils.split_part('base.url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('base.url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('base.url') }} as url_path,\n        coalesce(url_tags_pivoted.utm_source, {{ dbt_utils.get_url_parameter('base.url', 'utm_source') }}) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, {{ dbt_utils.get_url_parameter('base.url', 'utm_medium') }}) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, {{ dbt_utils.get_url_parameter('base.url', 'utm_campaign') }}) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, {{ dbt_utils.get_url_parameter('base.url', 'utm_content') }}) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, {{ dbt_utils.get_url_parameter('base.url', 'utm_term') }}) as utm_term\n    from base\n    left join url_tags_pivoted\n        on base.creative_id = url_tags_pivoted.creative_id\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history", "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "intermediate", "snapchat_ads__creative_history_prep"], "unique_id": "model.snapchat_ads.snapchat_ads__creative_history_prep", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "intermediate/snapchat_ads__creative_history_prep.sql", "original_file_path": "models/intermediate/snapchat_ads__creative_history_prep.sql", "name": "snapchat_ads__creative_history_prep", "alias": "snapchat_ads__creative_history_prep", "checksum": {"name": "sha256", "checksum": "a37ea381ce00abbb4e5891209e9f49979d14b0f6229462aa131f19a598e441cf"}, "tags": [], "refs": [["stg_snapchat_ads__creative_history"], ["stg_snapchat_ads__creative_url_tag_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/intermediate/snapchat_ads__creative_history_prep.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "ephemeral"}, "created_at": 1660323531.5334568, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history`\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history`\n    where is_most_recent_record = true\n\n), url_tags_pivoted as (\n\n    select \n        creative_id,\n        min(case when param_key = 'utm_source' then param_value end) as utm_source,\n        min(case when param_key = 'utm_medium' then param_value end) as utm_medium,\n        min(case when param_key = 'utm_campaign' then param_value end) as utm_campaign,\n        min(case when param_key = 'utm_content' then param_value end) as utm_content,\n        min(case when param_key = 'utm_term' then param_value end) as utm_term\n    from url_tags\n    group by 1\n\n), fields as (\n\n    select\n        base.creative_id,\n        base.ad_account_id,\n        base.creative_name,\n        base.url,\n        \n\n  \n    split(\n        base.url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        coalesce(url_tags_pivoted.utm_source, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        base.url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'')) as utm_term\n    from base\n    left join url_tags_pivoted\n        on base.creative_id = url_tags_pivoted.creative_id\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.google_ads_source.stg_google_ads__ad_group_stats": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_google_ads__ad_group_stats_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__ad_group_stats_tmp')),\n                staging_columns=get_ad_group_stats_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        customer_id as account_id, \n        date as date_day, \n        cast(id as {{ dbt_utils.type_string() }}) as ad_group_id, \n        campaign_id, \n        device,\n        ad_network_type,\n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        {% for metric in var('google_ads__ad_group_stats_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_ad_group_stats_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string"], "nodes": ["model.google_ads_source.stg_google_ads__ad_group_stats_tmp", "model.google_ads_source.stg_google_ads__ad_group_stats_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "stg_google_ads__ad_group_stats"], "unique_id": "model.google_ads_source.stg_google_ads__ad_group_stats", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "stg_google_ads__ad_group_stats.sql", "original_file_path": "models/stg_google_ads__ad_group_stats.sql", "name": "stg_google_ads__ad_group_stats", "alias": "stg_google_ads__ad_group_stats", "checksum": {"name": "sha256", "checksum": "1d5eb638dfd13ec57eb026d94099c11f736c125005899a35a57cc8ecb4630afb"}, "tags": [], "refs": [["stg_google_ads__ad_group_stats_tmp"], ["stg_google_ads__ad_group_stats_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of an ad group in Google Ads broken down to the ad network and device type.", "columns": {"account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_network_type": {"name": "ad_network_type", "description": "The Google Ad network type used across the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "Account ad performance per unique device where the ads were served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads__ad_group_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "table"}, "created_at": 1660323534.9262772, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_stats_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_network_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    int64\n) as \n    \n    cost_micros\n    \n , \n    cast(null as \n    int64\n) as \n    \n    customer_id\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    device\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        customer_id as account_id, \n        date as date_day, \n        cast(id as \n    string\n) as ad_group_id, \n        campaign_id, \n        device,\n        ad_network_type,\n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_stats`"}, "model.google_ads_source.stg_google_ads__account_stats": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_google_ads__account_stats_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__account_stats_tmp')),\n                staging_columns=get_account_stats_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id as account_id, \n        date as date_day,\n        ad_network_type,\n        device,\n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        {% for metric in var('google_ads__account_stats_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_account_stats_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.google_ads_source.stg_google_ads__account_stats_tmp", "model.google_ads_source.stg_google_ads__account_stats_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "stg_google_ads__account_stats"], "unique_id": "model.google_ads_source.stg_google_ads__account_stats", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "stg_google_ads__account_stats.sql", "original_file_path": "models/stg_google_ads__account_stats.sql", "name": "stg_google_ads__account_stats", "alias": "stg_google_ads__account_stats", "checksum": {"name": "sha256", "checksum": "9a5c1e15eef0b5b69a6696aee7dd286a78a91bdbdf59e096ca15db193b524dda"}, "tags": [], "refs": [["stg_google_ads__account_stats_tmp"], ["stg_google_ads__account_stats_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of an account in Google Ads broken down to the ad network and device type.", "columns": {"account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_network_type": {"name": "ad_network_type", "description": "The Google Ad network type used across the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "Account ad performance per unique device where the ads were served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads__account_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "table"}, "created_at": 1660323534.935798, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_stats_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_network_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    int64\n) as \n    \n    cost_micros\n    \n , \n    cast(null as \n    int64\n) as \n    \n    customer_id\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    device\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id as account_id, \n        date as date_day,\n        ad_network_type,\n        device,\n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_stats`"}, "model.google_ads_source.stg_google_ads__ad_group_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_google_ads__ad_group_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__ad_group_history_tmp')),\n                staging_columns=get_ad_group_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        updated_at,\n        _fivetran_synced, \n        type as ad_group_type, \n        campaign_id, \n        campaign_name, \n        name as ad_group_name, \n        status as ad_group_status\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_ad_group_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string"], "nodes": ["model.google_ads_source.stg_google_ads__ad_group_history_tmp", "model.google_ads_source.stg_google_ads__ad_group_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "stg_google_ads__ad_group_history"], "unique_id": "model.google_ads_source.stg_google_ads__ad_group_history", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "stg_google_ads__ad_group_history.sql", "original_file_path": "models/stg_google_ads__ad_group_history.sql", "name": "stg_google_ads__ad_group_history", "alias": "stg_google_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "6694ff78f1d6329fca720ad7c68aac3d46e153686ee0afbe9e1d27cc9846b40c"}, "tags": [], "refs": [["stg_google_ads__ad_group_history_tmp"], ["stg_google_ads__ad_group_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of an ad group in Google Ads.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_type": {"name": "ad_group_type", "description": "The type of the ad group in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether the record is the most recent version of the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads__ad_group_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "table"}, "created_at": 1660323534.903744, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    string\n) as ad_group_id,\n        updated_at,\n        _fivetran_synced, \n        type as ad_group_type, \n        campaign_id, \n        campaign_name, \n        name as ad_group_name, \n        status as ad_group_status\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_history`"}, "model.google_ads_source.stg_google_ads__ad_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_google_ads__ad_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id, \n        id as ad_id, \n        updated_at, \n        _fivetran_synced, \n        type as ad_type,\n        status as ad_status,\n        display_url,\n        final_urls as source_final_urls,\n        replace(replace(final_urls, '[', ''),']','') as final_urls\n    from fields\n),\n\nmost_recent as (\n\n    select \n        ad_group_id,\n        ad_id,\n        updated_at,\n        _fivetran_synced,\n        ad_type,\n        ad_status,\n        display_url,\n        source_final_urls,\n\n        --Extract the first url within the list of urls provided within the final_urls field\n        {{ dbt_utils.split_part(string_text='final_urls', delimiter_text=\"','\", part_number=1) }} as final_url,\n\n        row_number() over (partition by ad_id, ad_group_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n),\n\nurl_fields as (\n    select \n        *,\n        {{ dbt_utils.split_part('final_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('final_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('final_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_term') }} as utm_term\n    from most_recent\n)\n\nselect * \nfrom url_fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.google_ads_source.stg_google_ads__ad_history_tmp", "model.google_ads_source.stg_google_ads__ad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "stg_google_ads__ad_history"], "unique_id": "model.google_ads_source.stg_google_ads__ad_history", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "stg_google_ads__ad_history.sql", "original_file_path": "models/stg_google_ads__ad_history.sql", "name": "stg_google_ads__ad_history", "alias": "stg_google_ads__ad_history", "checksum": {"name": "sha256", "checksum": "98218464383e0f55c8aa1b63516ac11e44a38b04a830206c4d75c5657077a59c"}, "tags": [], "refs": [["stg_google_ads__ad_history_tmp"], ["stg_google_ads__ad_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of an ad in Google Ads.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the Ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The display url of the ad that is being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_type": {"name": "ad_type", "description": "The type of the ad in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_status": {"name": "ad_status", "description": "Status of the Ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether the record is the most recent version of the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_final_urls": {"name": "source_final_urls", "description": "The original list of final urls expressed as an array. Please be aware the test used on this field is intended to warn you if you have fields with multiple urls. If you do, the `final_url` field will filter down the urls within the array to just the first. Therefore, this package will only leverage one of possibly many urls within this field array.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "The first url in the list of the urls within the `final_urls` source field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `final_urls`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads__ad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "table"}, "created_at": 1660323534.910205, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    display_url\n    \n , \n    cast(null as \n    string\n) as \n    \n    final_urls\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(ad_group_id as \n    string\n) as ad_group_id, \n        id as ad_id, \n        updated_at, \n        _fivetran_synced, \n        type as ad_type,\n        status as ad_status,\n        display_url,\n        final_urls as source_final_urls,\n        replace(replace(final_urls, '[', ''),']','') as final_urls\n    from fields\n),\n\nmost_recent as (\n\n    select \n        ad_group_id,\n        ad_id,\n        updated_at,\n        _fivetran_synced,\n        ad_type,\n        ad_status,\n        display_url,\n        source_final_urls,\n\n        --Extract the first url within the list of urls provided within the final_urls field\n        \n\n  \n    split(\n        final_urls,\n        ','\n        )[safe_offset(0)]\n  \n\n as final_url,\n\n        row_number() over (partition by ad_id, ad_group_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n),\n\nurl_fields as (\n    select \n        *,\n        \n\n  \n    split(\n        final_url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        final_url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_source,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        final_url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_medium,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        final_url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_campaign,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        final_url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_content,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        final_url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_term\n    from most_recent\n)\n\nselect * \nfrom url_fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_history`"}, "model.google_ads_source.stg_google_ads__keyword_stats": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_google_ads__keyword_stats_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__keyword_stats_tmp')),\n                staging_columns=get_keyword_stats_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id as keyword_id,\n        customer_id as account_id, \n        date as date_day, \n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        ad_group_criterion_criterion_id as criterion_id,\n        campaign_id, \n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        {% for metric in var('google_ads__keyword_stats_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_keyword_stats_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string"], "nodes": ["model.google_ads_source.stg_google_ads__keyword_stats_tmp", "model.google_ads_source.stg_google_ads__keyword_stats_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "stg_google_ads__keyword_stats"], "unique_id": "model.google_ads_source.stg_google_ads__keyword_stats", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "stg_google_ads__keyword_stats.sql", "original_file_path": "models/stg_google_ads__keyword_stats.sql", "name": "stg_google_ads__keyword_stats", "alias": "stg_google_ads__keyword_stats", "checksum": {"name": "sha256", "checksum": "56f8ca26a462f559259d298d5fa5249136d00c93155d79cac8dc5d459bdf0fc2"}, "tags": [], "refs": [["stg_google_ads__keyword_stats_tmp"], ["stg_google_ads__keyword_stats_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a keyword in Google Ads.", "columns": {"account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "The unique ID of the keyword record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criterion_id": {"name": "criterion_id", "description": "Reference to the ad group criterion used for the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads__keyword_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "table"}, "created_at": 1660323534.93243, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__keyword_stats_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_criterion_criterion_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_network_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    int64\n) as \n    \n    cost_micros\n    \n , \n    cast(null as \n    int64\n) as \n    \n    customer_id\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    device\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id as keyword_id,\n        customer_id as account_id, \n        date as date_day, \n        cast(ad_group_id as \n    string\n) as ad_group_id,\n        ad_group_criterion_criterion_id as criterion_id,\n        campaign_id, \n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__keyword_stats`"}, "model.google_ads_source.stg_google_ads__ad_stats": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_google_ads__ad_stats_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__ad_stats_tmp')),\n                staging_columns=get_ad_stats_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id as account_id, \n        date as date_day, \n        coalesce(cast(ad_group_id as {{ dbt_utils.type_string() }}), {{ dbt_utils.split_part(string_text='ad_group', delimiter_text=\"'adGroups/'\", part_number=2) }}) as ad_group_id,\n        keyword_ad_group_criterion,\n        ad_network_type,\n        device,\n        ad_id, \n        campaign_id, \n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        {% for metric in var('google_ads__ad_stats_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n    from fields\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_ad_stats_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string", "macro.dbt_utils.split_part"], "nodes": ["model.google_ads_source.stg_google_ads__ad_stats_tmp", "model.google_ads_source.stg_google_ads__ad_stats_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "stg_google_ads__ad_stats"], "unique_id": "model.google_ads_source.stg_google_ads__ad_stats", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "stg_google_ads__ad_stats.sql", "original_file_path": "models/stg_google_ads__ad_stats.sql", "name": "stg_google_ads__ad_stats", "alias": "stg_google_ads__ad_stats", "checksum": {"name": "sha256", "checksum": "7d9999f8de61b8e96331df5447bf81ce6f622974f5e4428358f96fe1ae1c0f04"}, "tags": [], "refs": [["stg_google_ads__ad_stats_tmp"], ["stg_google_ads__ad_stats_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of an ad in Google Ads broken down to the ad network, device type, and ad_group_id.", "columns": {"account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the Ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_network_type": {"name": "ad_network_type", "description": "The Google Ad network type used across the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_ad_group_criterion": {"name": "keyword_ad_group_criterion", "description": "The ad group which the keyword criterion resides.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "Account ad performance per unique device where the ads were served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads__ad_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "table"}, "created_at": 1660323534.914036, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_stats_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_network_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    int64\n) as \n    \n    cost_micros\n    \n , \n    cast(null as \n    int64\n) as \n    \n    customer_id\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    device\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    string\n) as \n    \n    keyword_ad_group_criterion\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id as account_id, \n        date as date_day, \n        coalesce(cast(ad_group_id as \n    string\n), \n\n  \n    split(\n        ad_group,\n        'adGroups/'\n        )[safe_offset(1)]\n  \n\n) as ad_group_id,\n        keyword_ad_group_criterion,\n        ad_network_type,\n        device,\n        ad_id, \n        campaign_id, \n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_stats`"}, "model.google_ads_source.stg_google_ads__ad_group_criterion_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_google_ads__ad_group_criterion_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__ad_group_criterion_history_tmp')),\n                staging_columns=get_ad_group_criterion_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as criterion_id,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_campaign_id,\n        updated_at,\n        _fivetran_synced,\n        type,\n        status,\n        keyword_match_type,\n        keyword_text\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by criterion_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect *\nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_ad_group_criterion_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string"], "nodes": ["model.google_ads_source.stg_google_ads__ad_group_criterion_history_tmp", "model.google_ads_source.stg_google_ads__ad_group_criterion_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "stg_google_ads__ad_group_criterion_history"], "unique_id": "model.google_ads_source.stg_google_ads__ad_group_criterion_history", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "stg_google_ads__ad_group_criterion_history.sql", "original_file_path": "models/stg_google_ads__ad_group_criterion_history.sql", "name": "stg_google_ads__ad_group_criterion_history", "alias": "stg_google_ads__ad_group_criterion_history", "checksum": {"name": "sha256", "checksum": "d547461d605240bd62285f5ed8b5dfd2f58e187b5c3af62757b4225956110a8b"}, "tags": [], "refs": [["stg_google_ads__ad_group_criterion_history_tmp"], ["stg_google_ads__ad_group_criterion_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a historical version of an ad group criterion in Google Ads.", "columns": {"criterion_id": {"name": "criterion_id", "description": "Unique identifier of the ad group criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_campaign_id": {"name": "base_campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of ad group criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The current status of the ad group criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_match_type": {"name": "keyword_match_type", "description": "The match type which dictate how closely the keyword needs to match with the user\u2019s search query so that the ad can be considered for the auction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_text": {"name": "keyword_text", "description": "The text used within the keyword criterion that is being matched against.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether the record is the most recent version of the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads__ad_group_criterion_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "table"}, "created_at": 1660323534.922131, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_criterion_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    base_campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    type\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    keyword_match_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    keyword_text\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as criterion_id,\n        cast(ad_group_id as \n    string\n) as ad_group_id,\n        base_campaign_id,\n        updated_at,\n        _fivetran_synced,\n        type,\n        status,\n        keyword_match_type,\n        keyword_text\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by criterion_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect *\nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_criterion_history`"}, "model.google_ads_source.stg_google_ads__campaign_stats": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_google_ads__campaign_stats_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__campaign_stats_tmp')),\n                staging_columns=get_campaign_stats_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id as account_id, \n        date as date_day, \n        id as campaign_id, \n        ad_network_type,\n        device,\n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        {% for metric in var('google_ads__campaign_stats_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_campaign_stats_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.google_ads_source.stg_google_ads__campaign_stats_tmp", "model.google_ads_source.stg_google_ads__campaign_stats_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "stg_google_ads__campaign_stats"], "unique_id": "model.google_ads_source.stg_google_ads__campaign_stats", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "stg_google_ads__campaign_stats.sql", "original_file_path": "models/stg_google_ads__campaign_stats.sql", "name": "stg_google_ads__campaign_stats", "alias": "stg_google_ads__campaign_stats", "checksum": {"name": "sha256", "checksum": "36722b7da4bc587052badc01951dcb79b7f17eaf94d2bfd1847af228a54c0f36"}, "tags": [], "refs": [["stg_google_ads__campaign_stats_tmp"], ["stg_google_ads__campaign_stats_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a campaign in Google Ads broken down to the ad network and device type.", "columns": {"account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_network_type": {"name": "ad_network_type", "description": "The Google Ad network type used across the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "Account ad performance per unique device where the ads were served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads__campaign_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "table"}, "created_at": 1660323534.929379, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_stats_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_network_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    int64\n) as \n    \n    cost_micros\n    \n , \n    cast(null as \n    int64\n) as \n    \n    customer_id\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    string\n) as \n    \n    device\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id as account_id, \n        date as date_day, \n        id as campaign_id, \n        ad_network_type,\n        device,\n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_stats`"}, "model.google_ads_source.stg_google_ads__campaign_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_google_ads__campaign_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id, \n        updated_at, \n        _fivetran_synced, \n        name as campaign_name,\n        customer_id as account_id,\n        advertising_channel_type,\n        advertising_channel_subtype,\n        start_date,\n        end_date,\n        serving_status,\n        status,\n        tracking_url_template\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.google_ads_source.stg_google_ads__campaign_history_tmp", "model.google_ads_source.stg_google_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "stg_google_ads__campaign_history"], "unique_id": "model.google_ads_source.stg_google_ads__campaign_history", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "stg_google_ads__campaign_history.sql", "original_file_path": "models/stg_google_ads__campaign_history.sql", "name": "stg_google_ads__campaign_history", "alias": "stg_google_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "b59cd94f10cb110d62297c5a81be1684089aa6edf202f4453ecbcf2381e8954e"}, "tags": [], "refs": [["stg_google_ads__campaign_history_tmp"], ["stg_google_ads__campaign_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a campaign in Google Ads.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertising_channel_type": {"name": "advertising_channel_type", "description": "The type of advertising channel being used by the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertising_channel_subtype": {"name": "advertising_channel_subtype", "description": "The advertising channel subtype that is being used by the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "The end date of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "serving_status": {"name": "serving_status", "description": "Status of the ads and how they are currently being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "General status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tracking_url_template": {"name": "tracking_url_template", "description": "The tracking url template being used throughout the campaign ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether the record is the most recent version of the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "table"}, "created_at": 1660323534.918528, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertising_channel_subtype\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertising_channel_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    customer_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    end_date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    serving_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    start_date\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    tracking_url_template\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id, \n        updated_at, \n        _fivetran_synced, \n        name as campaign_name,\n        customer_id as account_id,\n        advertising_channel_type,\n        advertising_channel_subtype,\n        start_date,\n        end_date,\n        serving_status,\n        status,\n        tracking_url_template\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_history`"}, "model.google_ads_source.stg_google_ads__account_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_google_ads__account_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        updated_at,\n        _fivetran_synced,\n        currency_code,\n        auto_tagging_enabled,\n        time_zone,\n        descriptive_name as account_name\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by account_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.google_ads_source.stg_google_ads__account_history_tmp", "model.google_ads_source.stg_google_ads__account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "stg_google_ads__account_history"], "unique_id": "model.google_ads_source.stg_google_ads__account_history", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "stg_google_ads__account_history.sql", "original_file_path": "models/stg_google_ads__account_history.sql", "name": "stg_google_ads__account_history", "alias": "stg_google_ads__account_history", "checksum": {"name": "sha256", "checksum": "69a16204bf81dcd98d2c638a3968497b9d667f7de0f2186004134f088cf3cb6e"}, "tags": [], "refs": [["stg_google_ads__account_history_tmp"], ["stg_google_ads__account_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of an account in Google Ads.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency of the spend reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_tagging_enabled": {"name": "auto_tagging_enabled", "description": "Boolean indicating if auto tagging is enabled on the account ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone of the account ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether the record is the most recent version of the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "table"}, "created_at": 1660323534.900501, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    auto_tagging_enabled\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency_code\n    \n , \n    cast(null as \n    string\n) as \n    \n    descriptive_name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    time_zone\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        updated_at,\n        _fivetran_synced,\n        currency_code,\n        auto_tagging_enabled,\n        time_zone,\n        descriptive_name as account_name\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by account_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_history`"}, "model.google_ads_source.stg_google_ads__account_stats_tmp": {"raw_sql": "select * \nfrom {{ var('account_stats') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.google_ads_source.google_ads.account_stats"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "tmp", "stg_google_ads__account_stats_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__account_stats_tmp", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "tmp/stg_google_ads__account_stats_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__account_stats_tmp.sql", "name": "stg_google_ads__account_stats_tmp", "alias": "stg_google_ads__account_stats_tmp", "checksum": {"name": "sha256", "checksum": "8d75a3557f4a0d98a63aa227a246afdf9841b38fab2496eb0237d3e370a7d82c"}, "tags": [], "refs": [], "sources": [["google_ads", "account_stats"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__account_stats_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "view"}, "created_at": 1660323531.705077, "compiled_sql": "select * \nfrom `dbt-package-testing`.`google_ads`.`account_stats`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_stats_tmp`"}, "model.google_ads_source.stg_google_ads__ad_group_history_tmp": {"raw_sql": "select * \nfrom {{ var('ad_group_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.google_ads_source.google_ads.ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "tmp", "stg_google_ads__ad_group_history_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__ad_group_history_tmp", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "tmp/stg_google_ads__ad_group_history_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__ad_group_history_tmp.sql", "name": "stg_google_ads__ad_group_history_tmp", "alias": "stg_google_ads__ad_group_history_tmp", "checksum": {"name": "sha256", "checksum": "16da293b80ea365057d08a98ace12a0e044f2508545d76f4a6412559bf3f43b6"}, "tags": [], "refs": [], "sources": [["google_ads", "ad_group_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__ad_group_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "view"}, "created_at": 1660323531.710913, "compiled_sql": "select * \nfrom `dbt-package-testing`.`google_ads`.`ad_group_history`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_history_tmp`"}, "model.google_ads_source.stg_google_ads__campaign_stats_tmp": {"raw_sql": "select * \nfrom {{ var('campaign_stats') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.google_ads_source.google_ads.campaign_stats"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "tmp", "stg_google_ads__campaign_stats_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__campaign_stats_tmp", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "tmp/stg_google_ads__campaign_stats_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__campaign_stats_tmp.sql", "name": "stg_google_ads__campaign_stats_tmp", "alias": "stg_google_ads__campaign_stats_tmp", "checksum": {"name": "sha256", "checksum": "c2de0c809d9f013fec824bcf8379d8b07bcaea4517f1b816a1020c0db2a41278"}, "tags": [], "refs": [], "sources": [["google_ads", "campaign_stats"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__campaign_stats_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "view"}, "created_at": 1660323531.716346, "compiled_sql": "select * \nfrom `dbt-package-testing`.`google_ads`.`campaign_stats`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_stats_tmp`"}, "model.google_ads_source.stg_google_ads__ad_stats_tmp": {"raw_sql": "select * \nfrom {{ var('ad_stats') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.google_ads_source.google_ads.ad_stats"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "tmp", "stg_google_ads__ad_stats_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__ad_stats_tmp", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "tmp/stg_google_ads__ad_stats_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__ad_stats_tmp.sql", "name": "stg_google_ads__ad_stats_tmp", "alias": "stg_google_ads__ad_stats_tmp", "checksum": {"name": "sha256", "checksum": "e811173f17dc1564b84e60dff0c26b9e9648e28618e30c36760559b2d308f2f2"}, "tags": [], "refs": [], "sources": [["google_ads", "ad_stats"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__ad_stats_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "view"}, "created_at": 1660323531.721906, "compiled_sql": "select * \nfrom `dbt-package-testing`.`google_ads`.`ad_stats`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_stats_tmp`"}, "model.google_ads_source.stg_google_ads__campaign_history_tmp": {"raw_sql": "select * \nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.google_ads_source.google_ads.campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "tmp", "stg_google_ads__campaign_history_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__campaign_history_tmp", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "tmp/stg_google_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__campaign_history_tmp.sql", "name": "stg_google_ads__campaign_history_tmp", "alias": "stg_google_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "9baa7ba92b2a86de4e587eca1c8218da59121ab4ac1d331a1b7394edc1b7bd9f"}, "tags": [], "refs": [], "sources": [["google_ads", "campaign_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "view"}, "created_at": 1660323531.728132, "compiled_sql": "select * \nfrom `dbt-package-testing`.`google_ads`.`campaign_history`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_history_tmp`"}, "model.google_ads_source.stg_google_ads__ad_group_criterion_history_tmp": {"raw_sql": "select * \nfrom {{ var('ad_group_criterion_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.google_ads_source.google_ads.ad_group_criterion_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "tmp", "stg_google_ads__ad_group_criterion_history_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__ad_group_criterion_history_tmp", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "tmp/stg_google_ads__ad_group_criterion_history_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__ad_group_criterion_history_tmp.sql", "name": "stg_google_ads__ad_group_criterion_history_tmp", "alias": "stg_google_ads__ad_group_criterion_history_tmp", "checksum": {"name": "sha256", "checksum": "1b3a672c59131b53024026b84dec806e1b159c5164de00f8c8e71c5176dcbf7a"}, "tags": [], "refs": [], "sources": [["google_ads", "ad_group_criterion_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__ad_group_criterion_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "view"}, "created_at": 1660323531.7336152, "compiled_sql": "select * \nfrom `dbt-package-testing`.`google_ads`.`ad_group_criterion_history`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_criterion_history_tmp`"}, "model.google_ads_source.stg_google_ads__ad_group_stats_tmp": {"raw_sql": "select * \nfrom {{ var('ad_group_stats') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.google_ads_source.google_ads.ad_group_stats"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "tmp", "stg_google_ads__ad_group_stats_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__ad_group_stats_tmp", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "tmp/stg_google_ads__ad_group_stats_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__ad_group_stats_tmp.sql", "name": "stg_google_ads__ad_group_stats_tmp", "alias": "stg_google_ads__ad_group_stats_tmp", "checksum": {"name": "sha256", "checksum": "4e452c09ef0930efcc7a5aecf98bb50349797c24eef57aa9c25504071bb849a0"}, "tags": [], "refs": [], "sources": [["google_ads", "ad_group_stats"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__ad_group_stats_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "view"}, "created_at": 1660323531.73908, "compiled_sql": "select * \nfrom `dbt-package-testing`.`google_ads`.`ad_group_stats`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_stats_tmp`"}, "model.google_ads_source.stg_google_ads__keyword_stats_tmp": {"raw_sql": "select * \nfrom {{ var('keyword_stats') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.google_ads_source.google_ads.keyword_stats"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "tmp", "stg_google_ads__keyword_stats_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__keyword_stats_tmp", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "tmp/stg_google_ads__keyword_stats_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__keyword_stats_tmp.sql", "name": "stg_google_ads__keyword_stats_tmp", "alias": "stg_google_ads__keyword_stats_tmp", "checksum": {"name": "sha256", "checksum": "6ef983b91ee31a2489070340ae362f9039ba12f1c635c180d142dd0b0c92e076"}, "tags": [], "refs": [], "sources": [["google_ads", "keyword_stats"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__keyword_stats_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "view"}, "created_at": 1660323531.745486, "compiled_sql": "select * \nfrom `dbt-package-testing`.`google_ads`.`keyword_stats`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__keyword_stats_tmp`"}, "model.google_ads_source.stg_google_ads__ad_history_tmp": {"raw_sql": "select * \nfrom {{ var('ad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.google_ads_source.google_ads.ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "tmp", "stg_google_ads__ad_history_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__ad_history_tmp", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "tmp/stg_google_ads__ad_history_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__ad_history_tmp.sql", "name": "stg_google_ads__ad_history_tmp", "alias": "stg_google_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "6039765ee802a063cc2be93bd08c88e92c6fc72e5f64d56d1a42f1a6bdfa8ebf"}, "tags": [], "refs": [], "sources": [["google_ads", "ad_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__ad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "view"}, "created_at": 1660323531.750922, "compiled_sql": "select * \nfrom `dbt-package-testing`.`google_ads`.`ad_history`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_history_tmp`"}, "model.google_ads_source.stg_google_ads__account_history_tmp": {"raw_sql": "select * \nfrom {{ var('account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.google_ads_source.google_ads.account_history"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_google_ads_source", "fqn": ["google_ads_source", "tmp", "stg_google_ads__account_history_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__account_history_tmp", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "tmp/stg_google_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__account_history_tmp.sql", "name": "stg_google_ads__account_history_tmp", "alias": "stg_google_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "a5f6028da56564557021d3e7e6d68fde0002fc4a21630e34667521ceb9199b8b"}, "tags": [], "refs": [], "sources": [["google_ads", "account_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads_source", "materialized": "view"}, "created_at": 1660323531.756417, "compiled_sql": "select * \nfrom `dbt-package-testing`.`google_ads`.`account_history`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_history_tmp`"}, "model.apple_search_ads.apple_search_ads__ad_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('ad_report') }}\n), \n\nad as (\n\n    select * \n    from {{ var('ad_history') }}\n    where is_most_recent_record = True\n), \n\nad_group as (\n\n    select * \n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n), \n\ncampaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from {{ var('organization') }}\n), \n\njoined as (\n\n    select \n        report.date_day,\n        organization.organization_id,\n        organization.organization_name,\n        campaign.campaign_id, \n        campaign.campaign_name, \n        ad_group.ad_group_id,\n        ad_group.ad_group_name,\n        ad.ad_id,\n        ad.ad_name,\n        report.currency,\n        ad.ad_status,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='apple_search_ads__ad_passthrough_metrics', transform = 'sum') }}\n    from report\n    join ad \n        on report.ad_id = ad.ad_id\n    join ad_group \n        on report.ad_group_id = ad_group.ad_group_id\n    join campaign \n        on report.campaign_id = campaign.campaign_id\n    join organization \n        on ad.organization_id = organization.organization_id\n    {{ dbt_utils.group_by(11) }}\n)\n\nselect * \nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report", "model.apple_search_ads_source.stg_apple_search_ads__ad_history", "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__organization"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads", "fqn": ["apple_search_ads", "apple_search_ads__ad_report"], "unique_id": "model.apple_search_ads.apple_search_ads__ad_report", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "apple_search_ads__ad_report.sql", "original_file_path": "models/apple_search_ads__ad_report.sql", "name": "apple_search_ads__ad_report", "alias": "apple_search_ads__ad_report", "checksum": {"name": "sha256", "checksum": "1461146238bfb11068e854c0036a5cd11b552a537e275728821abe6c142e884b"}, "tags": [], "refs": [["stg_apple_search_ads__ad_report"], ["stg_apple_search_ads__ad_history"], ["stg_apple_search_ads__ad_group_history"], ["stg_apple_search_ads__campaign_history"], ["stg_apple_search_ads__organization"]], "sources": [], "metrics": [], "description": "Each record represents the daily ad performance of each ad.", "columns": {"organization_id": {"name": "organization_id", "description": "Organization ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Organization name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "Ad ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Ad name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_status": {"name": "ad_status", "description": "The status of the ad associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "Number of taps on ad group on given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed app of ad group in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Number of user downloads where user deletes app and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device of ad group in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_downloads": {"name": "total_downloads", "description": "The sum of new_downloads and redownloads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions of ad group in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on ad group in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads://models/apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads__ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads", "materialized": "table"}, "created_at": 1660323535.076489, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_report`\n), \n\nad as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_history`\n    where is_most_recent_record = True\n), \n\nad_group as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_history`\n    where is_most_recent_record = True\n), \n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization`\n), \n\njoined as (\n\n    select \n        report.date_day,\n        organization.organization_id,\n        organization.organization_name,\n        campaign.campaign_id, \n        campaign.campaign_name, \n        ad_group.ad_group_id,\n        ad_group.ad_group_name,\n        ad.ad_id,\n        ad.ad_name,\n        report.currency,\n        ad.ad_status,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    join ad \n        on report.ad_id = ad.ad_id\n    join ad_group \n        on report.ad_group_id = ad_group.ad_group_id\n    join campaign \n        on report.campaign_id = campaign.campaign_id\n    join organization \n        on ad.organization_id = organization.organization_id\n    group by 1,2,3,4,5,6,7,8,9,10,11\n)\n\nselect * \nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__ad_report`"}, "model.apple_search_ads.apple_search_ads__ad_group_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('ad_group_report') }}\n), \n\nad_group as (\n\n    select * \n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n), \n\ncampaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from {{ var('organization') }}\n), \n\njoined as (\n\n    select \n        report.date_day,\n        organization.organization_id,\n        organization.organization_name,\n        campaign.campaign_id, \n        campaign.campaign_name, \n        ad_group.ad_group_id,\n        ad_group.ad_group_name,\n        report.currency,\n        ad_group.ad_group_status,\n        ad_group.start_at, \n        ad_group.end_at,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='apple_search_ads__ad_group_passthrough_metrics', transform = 'sum') }}\n    from report\n    join ad_group \n        on report.ad_group_id = ad_group.ad_group_id\n    join campaign \n        on ad_group.campaign_id = campaign.campaign_id\n    join organization \n        on ad_group.organization_id = organization.organization_id\n    {{ dbt_utils.group_by(11) }}\n)\n\nselect * \nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report", "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__organization"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads", "fqn": ["apple_search_ads", "apple_search_ads__ad_group_report"], "unique_id": "model.apple_search_ads.apple_search_ads__ad_group_report", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "apple_search_ads__ad_group_report.sql", "original_file_path": "models/apple_search_ads__ad_group_report.sql", "name": "apple_search_ads__ad_group_report", "alias": "apple_search_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "c5b3ef5493bcc14b5325b1dd6ac95c1cc1edf0774cff4c894dac754a494a68c5"}, "tags": [], "refs": [["stg_apple_search_ads__ad_group_report"], ["stg_apple_search_ads__ad_group_history"], ["stg_apple_search_ads__campaign_history"], ["stg_apple_search_ads__organization"]], "sources": [], "metrics": [], "description": "Each record represents the daily ad performance of each ad group.", "columns": {"organization_id": {"name": "organization_id", "description": "Organization ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Organization name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "The status of the ad group associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_at": {"name": "start_at", "description": "The start timestamp for this ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_at": {"name": "end_at", "description": "The end timestamp for this ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "Number of taps on ad group on given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed app of ad group in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Number of user downloads where user deletes app and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device of ad group in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_downloads": {"name": "total_downloads", "description": "The sum of new_downloads and redownloads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions of ad group in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on ad group in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads://models/apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads__ad_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads", "materialized": "table"}, "created_at": 1660323535.06904, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_report`\n), \n\nad_group as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_history`\n    where is_most_recent_record = True\n), \n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization`\n), \n\njoined as (\n\n    select \n        report.date_day,\n        organization.organization_id,\n        organization.organization_name,\n        campaign.campaign_id, \n        campaign.campaign_name, \n        ad_group.ad_group_id,\n        ad_group.ad_group_name,\n        report.currency,\n        ad_group.ad_group_status,\n        ad_group.start_at, \n        ad_group.end_at,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    join ad_group \n        on report.ad_group_id = ad_group.ad_group_id\n    join campaign \n        on ad_group.campaign_id = campaign.campaign_id\n    join organization \n        on ad_group.organization_id = organization.organization_id\n    group by 1,2,3,4,5,6,7,8,9,10,11\n)\n\nselect * \nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__ad_group_report`"}, "model.apple_search_ads.apple_search_ads__keyword_report": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('keyword_report') }}\n), \n\nkeyword as (\n\n    select *\n    from {{ var('keyword_history') }}\n    where is_most_recent_record = True\n), \n\nad_group as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n), \n\ncampaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from {{ var('organization') }}\n), \n\njoined as (\n\n    select \n        report.date_day,\n        organization.organization_id,\n        organization.organization_name,\n        campaign.campaign_id, \n        campaign.campaign_name, \n        ad_group.ad_group_id,\n        ad_group.ad_group_name,\n        keyword.keyword_id,\n        keyword.keyword_text,\n        keyword.match_type,\n        report.currency,\n        keyword.keyword_status,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='apple_search_ads__keyword_passthrough_metrics', transform = 'sum') }}\n    from report\n    join keyword \n        on report.keyword_id = keyword.keyword_id\n    join ad_group \n        on keyword.ad_group_id = ad_group.ad_group_id\n    join campaign \n        on ad_group.campaign_id = campaign.campaign_id\n    join organization \n        on ad_group.organization_id = organization.organization_id\n    {{ dbt_utils.group_by(12) }}\n)\n\nselect * \nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report", "model.apple_search_ads_source.stg_apple_search_ads__keyword_history", "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__organization"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads", "fqn": ["apple_search_ads", "apple_search_ads__keyword_report"], "unique_id": "model.apple_search_ads.apple_search_ads__keyword_report", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "apple_search_ads__keyword_report.sql", "original_file_path": "models/apple_search_ads__keyword_report.sql", "name": "apple_search_ads__keyword_report", "alias": "apple_search_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "4d97a61a4bc7341b9c96b9ac52e3af5cf0cc52f2f316a60fe2acc8326907c596"}, "tags": [], "refs": [["stg_apple_search_ads__keyword_report"], ["stg_apple_search_ads__keyword_history"], ["stg_apple_search_ads__ad_group_history"], ["stg_apple_search_ads__campaign_history"], ["stg_apple_search_ads__organization"]], "sources": [], "metrics": [], "description": "Each record represents the daily ad performance of each creative set.", "columns": {"organization_id": {"name": "organization_id", "description": "Organization ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Organization name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "Creative set name associatd with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_text": {"name": "keyword_text", "description": "Creative set ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "Controls how ads are matched to user searches; EXACT or BROAD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_status": {"name": "keyword_status", "description": "The status of the keyword associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "Number of taps on keyword on given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed app of keyword in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Number of user downloads where user deletes app and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device of keyword in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_downloads": {"name": "total_downloads", "description": "The sum of new_downloads and redownloads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions of keyword in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on keyword in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads://models/apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads__keyword_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads", "materialized": "table"}, "created_at": 1660323535.093212, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_report`\n), \n\nkeyword as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_history`\n    where is_most_recent_record = True\n), \n\nad_group as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_history`\n    where is_most_recent_record = True\n), \n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization`\n), \n\njoined as (\n\n    select \n        report.date_day,\n        organization.organization_id,\n        organization.organization_name,\n        campaign.campaign_id, \n        campaign.campaign_name, \n        ad_group.ad_group_id,\n        ad_group.ad_group_name,\n        keyword.keyword_id,\n        keyword.keyword_text,\n        keyword.match_type,\n        report.currency,\n        keyword.keyword_status,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    join keyword \n        on report.keyword_id = keyword.keyword_id\n    join ad_group \n        on keyword.ad_group_id = ad_group.ad_group_id\n    join campaign \n        on ad_group.campaign_id = campaign.campaign_id\n    join organization \n        on ad_group.organization_id = organization.organization_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n)\n\nselect * \nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__keyword_report`"}, "model.apple_search_ads.apple_search_ads__search_term_report": {"raw_sql": "{{ config(enabled=var('apple_search_ads__using_search_terms', False)) }}\n\nwith report as (\n\n    select *\n    from {{ var('search_term_report') }}\n), \n\ncampaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from {{ var('organization') }}\n), \n\njoined as (\n\n    select \n        report.date_day,\n        organization.organization_id,\n        organization.organization_name,\n        campaign.campaign_id, \n        campaign.campaign_name, \n        report.ad_group_id,\n        report.ad_group_name,\n        report.keyword_id,\n        report.keyword_text,\n        report.search_term_text,\n        report.match_type,\n        report.currency,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='apple_search_ads__search_term_passthrough_metrics', transform = 'sum') }}\n    from report\n    join campaign \n        on report.campaign_id = campaign.campaign_id\n    join organization \n        on campaign.organization_id = organization.organization_id\n    where report.search_term_text is not null\n    {{ dbt_utils.group_by(12) }}\n)\n\nselect * \nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__organization"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads", "fqn": ["apple_search_ads", "apple_search_ads__search_term_report"], "unique_id": "model.apple_search_ads.apple_search_ads__search_term_report", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "apple_search_ads__search_term_report.sql", "original_file_path": "models/apple_search_ads__search_term_report.sql", "name": "apple_search_ads__search_term_report", "alias": "apple_search_ads__search_term_report", "checksum": {"name": "sha256", "checksum": "94b087fb94b48fb8ddd483693dc22597bed3f52599766b2dd1cfb5a0f329309e"}, "tags": [], "refs": [["stg_apple_search_ads__search_term_report"], ["stg_apple_search_ads__campaign_history"], ["stg_apple_search_ads__organization"]], "sources": [], "metrics": [], "description": "Each record represents the daily ad performance of each search term, only includes records with search term values.", "columns": {"organization_id": {"name": "organization_id", "description": "Organization ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Organization name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "Controls how ads are matched to user searches; EXACT or BROAD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_term_text": {"name": "search_term_text", "description": "Search term text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "Number of taps on organization on given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed app of organization in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Number of user downloads where user deletes app and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device of organization in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_downloads": {"name": "total_downloads", "description": "The sum of new_downloads and redownloads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions of organization in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on organization in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads://models/apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads__search_term_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads", "materialized": "table", "enabled": true}, "created_at": 1660323535.106299, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__search_term_report`\n), \n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization`\n), \n\njoined as (\n\n    select \n        report.date_day,\n        organization.organization_id,\n        organization.organization_name,\n        campaign.campaign_id, \n        campaign.campaign_name, \n        report.ad_group_id,\n        report.ad_group_name,\n        report.keyword_id,\n        report.keyword_text,\n        report.search_term_text,\n        report.match_type,\n        report.currency,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    join campaign \n        on report.campaign_id = campaign.campaign_id\n    join organization \n        on campaign.organization_id = organization.organization_id\n    where report.search_term_text is not null\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n)\n\nselect * \nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__search_term_report`"}, "model.apple_search_ads.apple_search_ads__campaign_report": {"raw_sql": "with report as (\n    \n    select *\n    from {{ var('campaign_report') }}\n\n), \n\ncampaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from {{ var('organization') }}\n\n), \n\njoined as (\n\n    select \n        report.date_day,\n        campaign.organization_id,\n        organization.organization_name,\n        campaign.campaign_id, \n        campaign.campaign_name, \n        report.currency,\n        campaign.campaign_status,\n        campaign.start_at,\n        campaign.end_at,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='apple_search_ads__campaign_passthrough_metrics', transform = 'sum') }}\n    from report\n    join campaign \n        on report.campaign_id = campaign.campaign_id\n    join organization \n        on campaign.organization_id = organization.organization_id\n    {{ dbt_utils.group_by(9) }}\n)\n\nselect * \nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__organization"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads", "fqn": ["apple_search_ads", "apple_search_ads__campaign_report"], "unique_id": "model.apple_search_ads.apple_search_ads__campaign_report", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "apple_search_ads__campaign_report.sql", "original_file_path": "models/apple_search_ads__campaign_report.sql", "name": "apple_search_ads__campaign_report", "alias": "apple_search_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "645a2a31da958fd725533e46ae80e4c9b05085bb641028ce251b9f1019add948"}, "tags": [], "refs": [["stg_apple_search_ads__campaign_report"], ["stg_apple_search_ads__campaign_history"], ["stg_apple_search_ads__organization"]], "sources": [], "metrics": [], "description": "Each record represents the daily ad performance of each campaign.", "columns": {"organization_id": {"name": "organization_id", "description": "Organization ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Organization name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the campaign associted with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_at": {"name": "start_at", "description": "The start timestamp of this campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_at": {"name": "end_at", "description": "The end timestamp of this campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "Number of taps on campaign on given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed app of campaign in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Number of user downloads where user deletes app and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device of campaign in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_downloads": {"name": "total_downloads", "description": "The sum of new_downloads and redownloads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions of campaign in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on campaign in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads://models/apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads", "materialized": "table"}, "created_at": 1660323535.084149, "compiled_sql": "with report as (\n    \n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_report`\n\n), \n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization`\n\n), \n\njoined as (\n\n    select \n        report.date_day,\n        campaign.organization_id,\n        organization.organization_name,\n        campaign.campaign_id, \n        campaign.campaign_name, \n        report.currency,\n        campaign.campaign_status,\n        campaign.start_at,\n        campaign.end_at,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    join campaign \n        on report.campaign_id = campaign.campaign_id\n    join organization \n        on campaign.organization_id = organization.organization_id\n    group by 1,2,3,4,5,6,7,8,9\n)\n\nselect * \nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__campaign_report`"}, "model.apple_search_ads.apple_search_ads__organization_report": {"raw_sql": "with report as (\n    \n    select *\n    from {{ var('campaign_report') }}\n), \n\ncampaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from {{ var('organization') }}\n), \n\njoined as (\n\n    select \n        report.date_day,\n        organization.organization_id,\n        organization.organization_name,\n        organization.currency,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='apple_search_ads__campaign_passthrough_metrics', transform = 'sum') }}\n    from report\n    join campaign \n        on report.campaign_id = campaign.campaign_id\n    join organization \n        on campaign.organization_id = organization.organization_id\n    {{ dbt_utils.group_by(4) }}\n)\n\nselect * \nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__organization"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads", "fqn": ["apple_search_ads", "apple_search_ads__organization_report"], "unique_id": "model.apple_search_ads.apple_search_ads__organization_report", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "apple_search_ads__organization_report.sql", "original_file_path": "models/apple_search_ads__organization_report.sql", "name": "apple_search_ads__organization_report", "alias": "apple_search_ads__organization_report", "checksum": {"name": "sha256", "checksum": "05009a045b5a4b918b7c4d3cb725eb9532c0a9684048e56acfa2fd97a59e9bd1"}, "tags": [], "refs": [["stg_apple_search_ads__campaign_report"], ["stg_apple_search_ads__campaign_history"], ["stg_apple_search_ads__organization"]], "sources": [], "metrics": [], "description": "Each record represents the daily ad performance of each organization.", "columns": {"organization_id": {"name": "organization_id", "description": "Organization ID associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Organization name associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "Number of taps on organization on given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed app of organization in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Number of user downloads where user deletes app and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device of organization in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_downloads": {"name": "total_downloads", "description": "The sum of new_downloads and redownloads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions of organization in a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on organization in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads://models/apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads__organization_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads", "materialized": "table"}, "created_at": 1660323535.098699, "compiled_sql": "with report as (\n    \n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_report`\n), \n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history`\n    where is_most_recent_record = True\n), \n\norganization as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization`\n), \n\njoined as (\n\n    select \n        report.date_day,\n        organization.organization_id,\n        organization.organization_name,\n        organization.currency,\n        sum(report.taps) as taps,\n        sum(report.new_downloads) as new_downloads,\n        sum(report.redownloads) as redownloads,\n        sum(report.new_downloads + report.redownloads) as total_downloads,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    join campaign \n        on report.campaign_id = campaign.campaign_id\n    join organization \n        on campaign.organization_id = organization.organization_id\n    group by 1,2,3,4\n)\n\nselect * \nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__organization_report`"}, "model.ad_reporting.ad_reporting__campaign_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int_ad_reporting__campaign_report') }}\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    {{ dbt_utils.group_by(6) }}\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.ad_reporting.int_ad_reporting__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "ad_reporting__campaign_report"], "unique_id": "model.ad_reporting.ad_reporting__campaign_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "ad_reporting__campaign_report.sql", "original_file_path": "models/ad_reporting__campaign_report.sql", "name": "ad_reporting__campaign_report", "alias": "ad_reporting__campaign_report", "checksum": {"name": "sha256", "checksum": "878249f7c238064fa15cdfa0eaf5919126d2d0152873c3e97e0371ecfbae05d1"}, "tags": [], "refs": [["int_ad_reporting__campaign_report"]], "sources": [], "metrics": [], "description": "Each record represents daily metrics by campaign and account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The ad platform associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID representing the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The count of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The cost of the ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ad_reporting://models/ad_reporting.yml", "compiled_path": "target/compiled/ad_reporting/models/ad_reporting__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323535.2620769, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__campaign_report`\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__campaign_report`"}, "model.ad_reporting.ad_reporting__account_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int_ad_reporting__account_report') }}\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    {{ dbt_utils.group_by(4) }}\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.ad_reporting.int_ad_reporting__account_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "ad_reporting__account_report"], "unique_id": "model.ad_reporting.ad_reporting__account_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "ad_reporting__account_report.sql", "original_file_path": "models/ad_reporting__account_report.sql", "name": "ad_reporting__account_report", "alias": "ad_reporting__account_report", "checksum": {"name": "sha256", "checksum": "cac4ee4fb054cd3f288aa0f5ab5a6a054f03795688ccb0a85d31e3b0637eca4a"}, "tags": [], "refs": [["int_ad_reporting__account_report"]], "sources": [], "metrics": [], "description": "Each record represents daily metrics by account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The ad platform associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The count of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The cost of the ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ad_reporting://models/ad_reporting.yml", "compiled_path": "target/compiled/ad_reporting/models/ad_reporting__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323535.2447848, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__account_report`\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    group by 1,2,3,4\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__account_report`"}, "model.ad_reporting.ad_reporting__ad_group_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int_ad_reporting__ad_group_report') }}\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    {{ dbt_utils.group_by(8) }}\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.ad_reporting.int_ad_reporting__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "ad_reporting__ad_group_report"], "unique_id": "model.ad_reporting.ad_reporting__ad_group_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "ad_reporting__ad_group_report.sql", "original_file_path": "models/ad_reporting__ad_group_report.sql", "name": "ad_reporting__ad_group_report", "alias": "ad_reporting__ad_group_report", "checksum": {"name": "sha256", "checksum": "47bad4c409996c8e62a35fe026f8b056207a3a2c6652c26429fe65e29377138c"}, "tags": [], "refs": [["int_ad_reporting__ad_group_report"]], "sources": [], "metrics": [], "description": "Each record represents daily metrics by ad group, campaign and account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The ad platform associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID representing the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID representing the ad group, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the ad group, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The count of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The cost of the ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ad_reporting://models/ad_reporting.yml", "compiled_path": "target/compiled/ad_reporting/models/ad_reporting__ad_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323535.250724, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__ad_group_report`\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    group by 1,2,3,4,5,6,7,8\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__ad_group_report`"}, "model.ad_reporting.ad_reporting__search_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int_ad_reporting__search_report') }}\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        keyword_id,\n        keyword_text,\n        search_query,\n        search_match_type,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    {{ dbt_utils.group_by(12) }}\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.ad_reporting.int_ad_reporting__search_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "ad_reporting__search_report"], "unique_id": "model.ad_reporting.ad_reporting__search_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "ad_reporting__search_report.sql", "original_file_path": "models/ad_reporting__search_report.sql", "name": "ad_reporting__search_report", "alias": "ad_reporting__search_report", "checksum": {"name": "sha256", "checksum": "a5a2b0da871f3896f1f4f7244161c5df819fd5f8e8e0eb0c4e1b8f58cf51a3cd"}, "tags": [], "refs": [["int_ad_reporting__search_report"]], "sources": [], "metrics": [], "description": "Each record represents daily metrics by search query, ad group, campaign and account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The ad platform associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID representing the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID representing the ad group, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the ad group, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "The ID representing the keyword, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_text": {"name": "keyword_text", "description": "The keyword text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_query": {"name": "search_query", "description": "The search query text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_match_type": {"name": "search_match_type", "description": "The search match type associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The count of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The cost of the ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ad_reporting://models/ad_reporting.yml", "compiled_path": "target/compiled/ad_reporting/models/ad_reporting__search_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323535.276474, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__search_report`\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        keyword_id,\n        keyword_text,\n        search_query,\n        search_match_type,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__search_report`"}, "model.ad_reporting.ad_reporting__ad_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int_ad_reporting__ad_report') }}\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        ad_id,\n        ad_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    {{ dbt_utils.group_by(10) }}\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.ad_reporting.int_ad_reporting__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "ad_reporting__ad_report"], "unique_id": "model.ad_reporting.ad_reporting__ad_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "ad_reporting__ad_report.sql", "original_file_path": "models/ad_reporting__ad_report.sql", "name": "ad_reporting__ad_report", "alias": "ad_reporting__ad_report", "checksum": {"name": "sha256", "checksum": "7f6107d438d80033758f4077bb0f0e8932c4b310267f2e33d5ec3f090791e8dc"}, "tags": [], "refs": [["int_ad_reporting__ad_report"]], "sources": [], "metrics": [], "description": "Each record represents daily metrics by ad, ad group, campaign and account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The ad platform associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID representing the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID representing the ad group, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the ad group, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID representing the ad, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the ad, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The count of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The cost of the ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ad_reporting://models/ad_reporting.yml", "compiled_path": "target/compiled/ad_reporting/models/ad_reporting__ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323535.25733, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__ad_report`\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        ad_id,\n        ad_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    group by 1,2,3,4,5,6,7,8,9,10\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__ad_report`"}, "model.ad_reporting.ad_reporting__url_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int_ad_reporting__url_report') }}\n),\n\naggregated as (\n    \n    select \n        date_day, \n        platform,\n        account_id, \n        account_name, \n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    {{ dbt_utils.group_by(16) }}\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.ad_reporting.int_ad_reporting__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "ad_reporting__url_report"], "unique_id": "model.ad_reporting.ad_reporting__url_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "ad_reporting__url_report.sql", "original_file_path": "models/ad_reporting__url_report.sql", "name": "ad_reporting__url_report", "alias": "ad_reporting__url_report", "checksum": {"name": "sha256", "checksum": "d25581ef9fb9cadd5098bc80377ebf7e45e5756ef1e948e68f8e704fbbad54b4"}, "tags": [], "refs": [["int_ad_reporting__url_report"]], "sources": [], "metrics": [], "description": "Each record represents daily metrics by URL (and if applicable, URL UTM parameters), ad group, campaign and account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The ad platform associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID representing the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID representing the ad group, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the ad group, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base url of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The count of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The cost of the ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ad_reporting://models/ad_reporting.yml", "compiled_path": "target/compiled/ad_reporting/models/ad_reporting__url_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323535.285016, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__url_report`\n),\n\naggregated as (\n    \n    select \n        date_day, \n        platform,\n        account_id, \n        account_name, \n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__url_report`"}, "model.ad_reporting.ad_reporting__keyword_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int_ad_reporting__keyword_report') }}\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        keyword_id,\n        keyword_text,\n        keyword_match_type,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    {{ dbt_utils.group_by(11) }}\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.ad_reporting.int_ad_reporting__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "ad_reporting__keyword_report"], "unique_id": "model.ad_reporting.ad_reporting__keyword_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "ad_reporting__keyword_report.sql", "original_file_path": "models/ad_reporting__keyword_report.sql", "name": "ad_reporting__keyword_report", "alias": "ad_reporting__keyword_report", "checksum": {"name": "sha256", "checksum": "e8796571d2d8c74754d4b3c637ef72ec6164201e6bde9952ad74c7faee3992ed"}, "tags": [], "refs": [["int_ad_reporting__keyword_report"]], "sources": [], "metrics": [], "description": "Each record represents daily metrics by keyword, ad group, campaign and account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The ad platform associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID representing the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID representing the ad group, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the ad group, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "The ID representing the keyword, if present in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_text": {"name": "keyword_text", "description": "The keyword text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_match_type": {"name": "keyword_match_type", "description": "The keyword match type associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The count of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The cost of the ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ad_reporting://models/ad_reporting.yml", "compiled_path": "target/compiled/ad_reporting/models/ad_reporting__keyword_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323535.268966, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__keyword_report`\n),\n\naggregated as (\n    \n    select \n        date_day,\n        platform,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        keyword_id,\n        keyword_text,\n        keyword_match_type,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from base\n    group by 1,2,3,4,5,6,7,8,9,10,11\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__keyword_report`"}, "model.ad_reporting.int_ad_reporting__campaign_report": {"raw_sql": "with prep_standardized_union as (\n\n    {{ dbt_utils.union_relations(\n        relations=[\n            ref('twitter_ads__campaign_report'),\n            ref('facebook_ads__campaign_report'), \n            ref('google_ads__campaign_report'),\n            ref('microsoft_ads__campaign_report')\n            ],\n        source_column_name='platform',\n        include=['date_day', \n                'account_id', \n                'account_name',\n                'campaign_id',\n                'campaign_name', \n                'clicks', \n                'impressions', \n                'spend']) }}\n), \n\nprep_standardized_union_platform_rename as (\n\n    select \n        cast(date_day as DATE) as date_day,\n        CASE \n            WHEN lower(platform) like '%facebook_ads__campaign_report`' then 'facebook_ads'\n            WHEN lower(platform) like '%google_ads__campaign_report`' then 'google_ads'\n            WHEN lower(platform) like '%microsoft_ads__campaign_report`' then 'microsoft_ads'\n            WHEN lower(platform) like '%twitter_ads__campaign_report`' then 'twitter_ads'\n        END as platform,\n\n        -- Below fields/aliases must be in alphabetical order \n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        cast(account_name as {{ dbt_utils.type_string() }}) as account_name,\n        cast(account_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        cast(account_name as {{ dbt_utils.type_string() }}) as campaign_name,\n        cast(clicks as {{ dbt_utils.type_int() }}) as clicks,\n        cast(impressions as {{ dbt_utils.type_int() }}) as impressions,\n        cast(spend as {{ dbt_utils.type_float() }}) as spend\n    from prep_standardized_union\n),\n\nprep_apple_search as (\n\n    {{ field_name_conversion(\n        platform='apple_search_ads', \n        report_type='campaign', \n        field_mapping={\n                'account_id': 'organization_id',\n                'account_name': 'organization_name',\n                'clicks': 'taps'\n            },\n        relation=ref('apple_search_ads__campaign_report')\n    ) }}\n),\n\nprep_linkedin as (\n\n    {{ field_name_conversion(\n        platform='linkedin_ads', \n        report_type='campaign', \n        field_mapping={\n                'campaign_id': 'campaign_group_id',\n                'campaign_name': 'campaign_group_name',\n                'spend': 'cost'\n            },\n        relation=ref('linkedin_ads__campaign_group_report')\n    ) }}\n),\n\nprep_pinterest as (\n\n    {{ field_name_conversion(\n        platform='pinterest_ads', \n        report_type='campaign', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name'\n            },\n        relation=ref('pinterest_ads__campaign_report')\n    ) }}\n),\n\nprep_snapchat as (\n\n    {{ field_name_conversion(\n        platform='snapchat_ads', \n        report_type='campaign', \n        field_mapping={\n                'account_id': 'ad_account_id',\n                'account_name': 'ad_account_name',\n                'clicks':'swipes'\n            },\n        relation=ref('snapchat_ads__campaign_report')\n    ) }}\n), \n\nprep_tiktok as (\n\n    {{ field_name_conversion(\n        platform='tiktok_ads', \n        report_type='campaign', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name'\n            },\n        relation=ref('tiktok_ads__campaign_report')\n    ) }}\n), \n\nunioned as (\n\n    {{ union_ctes(ctes=[\n        'prep_standardized_union_platform_rename',\n        'prep_apple_search',\n        'prep_linkedin',\n        'prep_pinterest',\n        'prep_snapchat',\n        'prep_tiktok']\n    ) }}\n)\n\nselect *\nfrom unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float", "macro.ad_reporting.field_name_conversion", "macro.ad_reporting.union_ctes"], "nodes": ["model.twitter_ads.twitter_ads__campaign_report", "model.facebook_ads.facebook_ads__campaign_report", "model.google_ads.google_ads__campaign_report", "model.microsoft_ads.microsoft_ads__campaign_report", "model.apple_search_ads.apple_search_ads__campaign_report", "model.linkedin.linkedin_ads__campaign_group_report", "model.pinterest.pinterest_ads__campaign_report", "model.snapchat_ads.snapchat_ads__campaign_report", "model.tiktok_ads.tiktok_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "intermediate", "int_ad_reporting__campaign_report"], "unique_id": "model.ad_reporting.int_ad_reporting__campaign_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "intermediate/int_ad_reporting__campaign_report.sql", "original_file_path": "models/intermediate/int_ad_reporting__campaign_report.sql", "name": "int_ad_reporting__campaign_report", "alias": "int_ad_reporting__campaign_report", "checksum": {"name": "sha256", "checksum": "7c5abfb65ba1c4882c1baf20ab5173823b1a70a487af9be1506188635ec52de7"}, "tags": [], "refs": [["twitter_ads__campaign_report"], ["facebook_ads__campaign_report"], ["google_ads__campaign_report"], ["microsoft_ads__campaign_report"], ["apple_search_ads__campaign_report"], ["linkedin_ads__campaign_group_report"], ["pinterest_ads__campaign_report"], ["snapchat_ads__campaign_report"], ["tiktok_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/intermediate/int_ad_reporting__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323531.937813, "compiled_sql": "with prep_standardized_union as (\n\n    \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__campaign_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__campaign_report`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__campaign_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__campaign_report`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__campaign_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__campaign_report`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__campaign_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__campaign_report`\n\n            \n        )\n\n        \n), \n\nprep_standardized_union_platform_rename as (\n\n    select \n        cast(date_day as DATE) as date_day,\n        CASE \n            WHEN lower(platform) like '%facebook_ads__campaign_report`' then 'facebook_ads'\n            WHEN lower(platform) like '%google_ads__campaign_report`' then 'google_ads'\n            WHEN lower(platform) like '%microsoft_ads__campaign_report`' then 'microsoft_ads'\n            WHEN lower(platform) like '%twitter_ads__campaign_report`' then 'twitter_ads'\n        END as platform,\n\n        -- Below fields/aliases must be in alphabetical order \n        cast(account_id as \n    string\n) as account_id,\n        cast(account_name as \n    string\n) as account_name,\n        cast(account_id as \n    string\n) as campaign_id,\n        cast(account_name as \n    string\n) as campaign_name,\n        cast(clicks as \n    int64\n) as clicks,\n        cast(impressions as \n    int64\n) as impressions,\n        cast(spend as \n    float64\n) as spend\n    from prep_standardized_union\n),\n\nprep_apple_search as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'apple_search_ads' as \n    string\n) as platform,\n\n    cast(organization_id as\n    string\n) as account_id \n    ,cast(organization_name as\n    string\n) as account_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(taps as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__campaign_report`\n\n),\n\nprep_linkedin as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'linkedin_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(campaign_group_id as\n    string\n) as campaign_id \n    ,cast(campaign_group_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(cost as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__campaign_group_report`\n\n),\n\nprep_pinterest as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'pinterest_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__campaign_report`\n\n),\n\nprep_snapchat as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'snapchat_ads' as \n    string\n) as platform,\n\n    cast(ad_account_id as\n    string\n) as account_id \n    ,cast(ad_account_name as\n    string\n) as account_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(swipes as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__campaign_report`\n\n), \n\nprep_tiktok as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'tiktok_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__campaign_report`\n\n), \n\nunioned as (\n\n    \n\n\nselect * from prep_standardized_union_platform_rename\n\nunion all\n\nselect * from prep_apple_search\n\nunion all\n\nselect * from prep_linkedin\n\nunion all\n\nselect * from prep_pinterest\n\nunion all\n\nselect * from prep_snapchat\n\nunion all\n\nselect * from prep_tiktok\n\n\n\n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__campaign_report`"}, "model.ad_reporting.int_ad_reporting__keyword_report": {"raw_sql": "{# Standard fields for keyword reports are:\n    - 'account_id'\n    - 'account_name'\n    - 'campaign_id'\n    - 'campaign_name'\n    - 'ad_group_id'\n    - 'ad_group_name'\n    - 'keyword_id'\n    - 'keyword_text'\n    - 'keyword_match_type'\n    - 'clicks'\n    - 'impressions'\n    - 'spend'\n#}\n\nwith prep_apple_search as (\n\n    {{ field_name_conversion(\n        platform='apple_search_ads', \n        report_type='keyword', \n        field_mapping={\n                'account_id': 'organization_id',\n                'account_name': 'organization_name',\n                'keyword_match_type': 'match_type',\n                'clicks': 'taps'\n            },\n        relation=ref('apple_search_ads__keyword_report')\n    ) }}\n),\n\nprep_google as (\n\n    {{ field_name_conversion(\n        platform='google_ads', \n        report_type='keyword', \n        field_mapping={\n                'keyword_id': 'criterion_id',\n            },\n        relation=ref('google_ads__keyword_report')\n    ) }}\n),\n\nprep_microsoft as (\n\n    {{ field_name_conversion(\n        platform='microsoft_ads', \n        report_type='keyword', \n        field_mapping={\n                'keyword_text': 'keyword_name',\n                'keyword_match_type': 'match_type'\n            },\n        relation=ref('microsoft_ads__keyword_report')\n    ) }}\n),\n\nprep_pinterest as (\n\n    {{ field_name_conversion(\n        platform='pinterest_ads', \n        report_type='keyword', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name',\n                'keyword_text': 'keyword_value',\n                'keyword_match_type': 'match_type'\n            },\n        relation=ref('pinterest_ads__keyword_report')\n    ) }}\n),\n\n{% if var('twitter_ads__using_keywords') %}\nprep_twitter as (\n\n    {{ field_name_conversion(\n        platform='twitter_ads', \n        report_type='keyword', \n        field_mapping={\n                'ad_group_id': 'line_item_id',\n                'ad_group_name': 'line_item_name',\n                'keyword_id': 'null',\n                'keyword_text': 'keyword',\n                'keyword_match_type': 'null'\n            },\n        relation=ref('twitter_ads__keyword_report')\n    ) }}\n), \n{% endif %}\n\nunioned as (\n\n    {{ union_ctes(ctes=[\n        'prep_apple_search',\n        'prep_google',\n        'prep_microsoft',\n        'prep_pinterest',\n        'prep_twitter'\n        ] if var('twitter_ads__using_keywords')\n        else [\n        'prep_apple_search',\n        'prep_google',\n        'prep_microsoft',\n        'prep_pinterest'\n        ]\n    ) }}\n)\n\nselect *\nfrom unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ad_reporting.field_name_conversion", "macro.ad_reporting.union_ctes"], "nodes": ["model.apple_search_ads.apple_search_ads__keyword_report", "model.google_ads.google_ads__keyword_report", "model.microsoft_ads.microsoft_ads__keyword_report", "model.pinterest.pinterest_ads__keyword_report", "model.twitter_ads.twitter_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "intermediate", "int_ad_reporting__keyword_report"], "unique_id": "model.ad_reporting.int_ad_reporting__keyword_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "intermediate/int_ad_reporting__keyword_report.sql", "original_file_path": "models/intermediate/int_ad_reporting__keyword_report.sql", "name": "int_ad_reporting__keyword_report", "alias": "int_ad_reporting__keyword_report", "checksum": {"name": "sha256", "checksum": "5d870b2cddf3339d179cd149de7510ba1550d5172cd2f911a2277983105531e1"}, "tags": [], "refs": [["apple_search_ads__keyword_report"], ["google_ads__keyword_report"], ["microsoft_ads__keyword_report"], ["pinterest_ads__keyword_report"], ["twitter_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/intermediate/int_ad_reporting__keyword_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323531.989994, "compiled_sql": "\n\nwith prep_apple_search as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'apple_search_ads' as \n    string\n) as platform,\n\n    cast(organization_id as\n    string\n) as account_id \n    ,cast(organization_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(taps as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(keyword_id as\n    string\n) as keyword_id \n    ,cast(match_type as\n    string\n) as keyword_match_type \n    ,cast(keyword_text as\n    string\n) as keyword_text \n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__keyword_report`\n\n),\n\nprep_google as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'google_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(criterion_id as\n    string\n) as keyword_id \n    ,cast(keyword_match_type as\n    string\n) as keyword_match_type \n    ,cast(keyword_text as\n    string\n) as keyword_text \n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__keyword_report`\n\n),\n\nprep_microsoft as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'microsoft_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(keyword_id as\n    string\n) as keyword_id \n    ,cast(match_type as\n    string\n) as keyword_match_type \n    ,cast(keyword_name as\n    string\n) as keyword_text \n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__keyword_report`\n\n),\n\nprep_pinterest as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'pinterest_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(keyword_id as\n    string\n) as keyword_id \n    ,cast(match_type as\n    string\n) as keyword_match_type \n    ,cast(keyword_value as\n    string\n) as keyword_text \n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__keyword_report`\n\n),\n\n\nprep_twitter as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'twitter_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(line_item_id as\n    string\n) as ad_group_id \n    ,cast(line_item_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(null as\n    string\n) as keyword_id \n    ,cast(null as\n    string\n) as keyword_match_type \n    ,cast(keyword as\n    string\n) as keyword_text \n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__keyword_report`\n\n), \n\n\nunioned as (\n\n    \n\n\nselect * from prep_apple_search\n\nunion all\n\nselect * from prep_google\n\nunion all\n\nselect * from prep_microsoft\n\nunion all\n\nselect * from prep_pinterest\n\nunion all\n\nselect * from prep_twitter\n\n\n\n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__keyword_report`"}, "model.ad_reporting.int_ad_reporting__ad_report": {"raw_sql": "-- missing apple search ads (standalone), \n-- twitter (ask jamie which report maps to ad group) and \n-- linkedin (confirm with jamie if its campaign_group) and\n-- due to new persist logic \n\n\nwith prep_standardized_union as (\n\n    {{ dbt_utils.union_relations(\n        relations=[\n            ref('google_ads__ad_report'),\n            ref('microsoft_ads__ad_report')],\n        source_column_name='platform',\n        include=['date_day', \n                'account_id', \n                'account_name', \n                'campaign_id',\n                'campaign_name',\n                'ad_group_id',\n                'ad_group_name',\n                'ad_id',\n                'ad_name',\n                'clicks', \n                'impressions', \n                'spend']) }}\n), \n\nprep_standardized_union_platform_rename as (\n\n    select \n        cast(date_day as DATE) as date_day,\n        CASE \n            WHEN lower(platform) like '%google_ads__ad_report`' then 'google_ads'\n            WHEN lower(platform) like '%microsoft_ads__ad_report`' then 'microsoft_ads'\n        END as platform,\n\n        -- Below field/aliases must be in alphabetical order\n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        cast(account_name as {{ dbt_utils.type_string() }}) as account_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        cast(ad_group_name as {{ dbt_utils.type_string() }}) as ad_group_name,\n        cast(ad_id as {{ dbt_utils.type_string() }}) as ad_id,\n        cast(ad_name as {{ dbt_utils.type_string() }}) as ad_name,\n        cast(account_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        cast(account_name as {{ dbt_utils.type_string() }}) as campaign_name,\n        cast(clicks as {{ dbt_utils.type_int() }}) as clicks,\n        cast(impressions as {{ dbt_utils.type_int() }}) as impressions,\n        cast(spend as {{ dbt_utils.type_float() }}) as spend\n    from prep_standardized_union\n),\n\nprep_apple_search as (\n\n    {{ field_name_conversion(\n        platform='apple_search_ads', \n        report_type='ad', \n        field_mapping={\n                'account_id': 'organization_id',\n                'account_name': 'organization_name',\n                'clicks': 'taps'\n            },\n        relation=ref('apple_search_ads__ad_report')\n    ) }}\n),\n\nprep_facebook as (\n\n    {{ field_name_conversion(\n        platform='facebook_ads', \n        report_type='ad', \n        field_mapping={\n                'ad_group_id': 'ad_set_id',\n                'ad_group_name': 'ad_set_name'\n            },\n        relation=ref('facebook_ads__ad_report')\n    ) }}\n),\n\nprep_linkedin as (\n\n    {{ field_name_conversion(\n        platform='linkedin_ads', \n        report_type='ad', \n        field_mapping={\n                'campaign_id': 'campaign_group_id',\n                'campaign_name': 'campaign_group_name',\n                'ad_group_id': 'campaign_id',\n                'ad_group_name': 'campaign_name',\n                'ad_id': 'creative_id',\n                'ad_name': 'null',\n                'spend': 'cost'\n            },\n        relation=ref('linkedin_ads__creative_report')\n    ) }}\n),\n\nprep_pinterest as (\n\n    {{ field_name_conversion(\n        platform='pinterest_ads', \n        report_type='ad', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name',\n                'ad_id': 'pin_promotion_id',\n                'ad_name': 'pin_name'\n            },\n        relation=ref('pinterest_ads__pin_promotion_report')\n    ) }}\n),\n\nprep_snapchat as (\n\n    {{ field_name_conversion(\n        platform='snapchat_ads', \n        report_type='ad', \n        field_mapping={\n                'account_id': 'ad_account_id',\n                'account_name': 'ad_account_name',\n                'campaign_id': 'null',\n                'campaign_name': 'null',\n                'ad_group_id': 'null',\n                'ad_group_name': 'null',\n                'clicks':'swipes'\n            },\n        relation=ref('snapchat_ads__ad_report')\n    ) }}\n), \n\nprep_tiktok as (\n\n    {{ field_name_conversion(\n        platform='tiktok_ads', \n        report_type='ad', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name'\n            },\n        relation=ref('tiktok_ads__ad_report')\n    ) }}\n), \n\nprep_twitter as (\n\n    {{ field_name_conversion(\n        platform='twitter_ads', \n        report_type='ad', \n        field_mapping={\n                'ad_group_id': 'line_item_id',\n                'ad_group_name': 'line_item_name',\n                'ad_id': 'promoted_tweet_id',\n                'ad_name': 'tweet_name'\n            },\n        relation=ref('twitter_ads__promoted_tweet_report')\n    ) }}\n), \n\nunioned as (\n\n    {{ union_ctes(ctes=[\n        'prep_standardized_union_platform_rename',\n        'prep_apple_search',\n        'prep_facebook',\n        'prep_linkedin',\n        'prep_pinterest',\n        'prep_snapchat',\n        'prep_tiktok',\n        'prep_twitter']\n    ) }}\n)\n\nselect *\nfrom unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float", "macro.ad_reporting.field_name_conversion", "macro.ad_reporting.union_ctes"], "nodes": ["model.google_ads.google_ads__ad_report", "model.microsoft_ads.microsoft_ads__ad_report", "model.apple_search_ads.apple_search_ads__ad_report", "model.facebook_ads.facebook_ads__ad_report", "model.linkedin.linkedin_ads__creative_report", "model.pinterest.pinterest_ads__pin_promotion_report", "model.snapchat_ads.snapchat_ads__ad_report", "model.tiktok_ads.tiktok_ads__ad_report", "model.twitter_ads.twitter_ads__promoted_tweet_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "intermediate", "int_ad_reporting__ad_report"], "unique_id": "model.ad_reporting.int_ad_reporting__ad_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "intermediate/int_ad_reporting__ad_report.sql", "original_file_path": "models/intermediate/int_ad_reporting__ad_report.sql", "name": "int_ad_reporting__ad_report", "alias": "int_ad_reporting__ad_report", "checksum": {"name": "sha256", "checksum": "329fac6a4897422923e6cc30ab37c2f19c5dd4e9a9cc852e6d7363ebaf93235e"}, "tags": [], "refs": [["google_ads__ad_report"], ["microsoft_ads__ad_report"], ["apple_search_ads__ad_report"], ["facebook_ads__ad_report"], ["linkedin_ads__creative_report"], ["pinterest_ads__pin_promotion_report"], ["snapchat_ads__ad_report"], ["tiktok_ads__ad_report"], ["twitter_ads__promoted_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/intermediate/int_ad_reporting__ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323532.008728, "compiled_sql": "-- missing apple search ads (standalone), \n-- twitter (ask jamie which report maps to ad group) and \n-- linkedin (confirm with jamie if its campaign_group) and\n-- due to new persist logic \n\n\nwith prep_standardized_union as (\n\n    \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__ad_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__ad_report`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__ad_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__ad_report`\n\n            \n        )\n\n        \n), \n\nprep_standardized_union_platform_rename as (\n\n    select \n        cast(date_day as DATE) as date_day,\n        CASE \n            WHEN lower(platform) like '%google_ads__ad_report`' then 'google_ads'\n            WHEN lower(platform) like '%microsoft_ads__ad_report`' then 'microsoft_ads'\n        END as platform,\n\n        -- Below field/aliases must be in alphabetical order\n        cast(account_id as \n    string\n) as account_id,\n        cast(account_name as \n    string\n) as account_name,\n        cast(ad_group_id as \n    string\n) as ad_group_id,\n        cast(ad_group_name as \n    string\n) as ad_group_name,\n        cast(ad_id as \n    string\n) as ad_id,\n        cast(ad_name as \n    string\n) as ad_name,\n        cast(account_id as \n    string\n) as campaign_id,\n        cast(account_name as \n    string\n) as campaign_name,\n        cast(clicks as \n    int64\n) as clicks,\n        cast(impressions as \n    int64\n) as impressions,\n        cast(spend as \n    float64\n) as spend\n    from prep_standardized_union\n),\n\nprep_apple_search as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'apple_search_ads' as \n    string\n) as platform,\n\n    cast(organization_id as\n    string\n) as account_id \n    ,cast(organization_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(ad_id as\n    string\n) as ad_id \n    ,cast(ad_name as\n    string\n) as ad_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(taps as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__ad_report`\n\n),\n\nprep_facebook as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'facebook_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(ad_set_id as\n    string\n) as ad_group_id \n    ,cast(ad_set_name as\n    string\n) as ad_group_name \n    ,cast(ad_id as\n    string\n) as ad_id \n    ,cast(ad_name as\n    string\n) as ad_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__ad_report`\n\n),\n\nprep_linkedin as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'linkedin_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(campaign_id as\n    string\n) as ad_group_id \n    ,cast(campaign_name as\n    string\n) as ad_group_name \n    ,cast(creative_id as\n    string\n) as ad_id \n    ,cast(null as\n    string\n) as ad_name \n    ,cast(campaign_group_id as\n    string\n) as campaign_id \n    ,cast(campaign_group_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(cost as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__creative_report`\n\n),\n\nprep_pinterest as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'pinterest_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(pin_promotion_id as\n    string\n) as ad_id \n    ,cast(pin_name as\n    string\n) as ad_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__pin_promotion_report`\n\n),\n\nprep_snapchat as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'snapchat_ads' as \n    string\n) as platform,\n\n    cast(ad_account_id as\n    string\n) as account_id \n    ,cast(ad_account_name as\n    string\n) as account_name \n    ,cast(null as\n    string\n) as ad_group_id \n    ,cast(null as\n    string\n) as ad_group_name \n    ,cast(ad_id as\n    string\n) as ad_id \n    ,cast(ad_name as\n    string\n) as ad_name \n    ,cast(null as\n    string\n) as campaign_id \n    ,cast(null as\n    string\n) as campaign_name \n    ,cast(swipes as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__ad_report`\n\n), \n\nprep_tiktok as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'tiktok_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(ad_id as\n    string\n) as ad_id \n    ,cast(ad_name as\n    string\n) as ad_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__ad_report`\n\n), \n\nprep_twitter as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'twitter_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(line_item_id as\n    string\n) as ad_group_id \n    ,cast(line_item_name as\n    string\n) as ad_group_name \n    ,cast(promoted_tweet_id as\n    string\n) as ad_id \n    ,cast(tweet_name as\n    string\n) as ad_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__promoted_tweet_report`\n\n), \n\nunioned as (\n\n    \n\n\nselect * from prep_standardized_union_platform_rename\n\nunion all\n\nselect * from prep_apple_search\n\nunion all\n\nselect * from prep_facebook\n\nunion all\n\nselect * from prep_linkedin\n\nunion all\n\nselect * from prep_pinterest\n\nunion all\n\nselect * from prep_snapchat\n\nunion all\n\nselect * from prep_tiktok\n\nunion all\n\nselect * from prep_twitter\n\n\n\n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__ad_report`"}, "model.ad_reporting.int_ad_reporting__account_report": {"raw_sql": "with prep_standardized_union as (\n\n    {{ dbt_utils.union_relations(\n        relations=[\n            ref('twitter_ads__account_report'),  \n            ref('facebook_ads__account_report'),\n            ref('google_ads__account_report'),\n            ref('microsoft_ads__account_report')    \n            ],\n        source_column_name='platform',\n        include=['date_day',\n                'account_id', \n                'account_name', \n                'clicks', \n                'impressions', \n                'spend']) }}\n), \n\nprep_standardized_union_platform_rename as (\n\n    select \n        cast(date_day as DATE) as date_day,\n        CASE \n            WHEN lower(platform) like '%facebook_ads__account_report`' then 'facebook_ads'\n            WHEN lower(platform) like '%google_ads__account_report`' then 'google_ads'\n            WHEN lower(platform) like '%microsoft_ads__account_report`' then 'microsoft_ads'\n            WHEN lower(platform) like '%twitter_ads__account_report`' then 'twitter_ads'\n        END as platform,\n\n        -- Below fields/aliases must be in alphabetical order \n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        cast(account_name as {{ dbt_utils.type_string() }}) as account_name,\n        cast(clicks as {{ dbt_utils.type_int() }}) as clicks,\n        cast(impressions as {{ dbt_utils.type_int() }}) as impressions,\n        cast(spend as {{ dbt_utils.type_float() }}) as spend\n    from prep_standardized_union\n),\n\nprep_apple_search as (\n\n    {{ field_name_conversion(\n        platform='apple_search_ads', \n        report_type='account', \n        field_mapping={\n                'account_id': 'organization_id',\n                'account_name': 'organization_name',\n                'clicks': 'taps'\n            },\n        relation=ref('apple_search_ads__organization_report')\n    ) }}\n),\n\nprep_linkedin as (\n\n    {{ field_name_conversion(\n        platform='linkedin_ads', \n        report_type='account', \n        field_mapping={\n                'spend': 'cost'\n            },\n        relation=ref('linkedin_ads__account_report')\n    ) }}\n),\n\nprep_pinterest as (\n\n    {{ field_name_conversion(\n        platform='pinterest_ads', \n        report_type='account', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name'\n            },\n        relation=ref('pinterest_ads__advertiser_report')\n    ) }}\n),\n\nprep_snapchat as (\n\n    {{ field_name_conversion(\n        platform='snapchat_ads', \n        report_type='account', \n        field_mapping={\n                'account_id': 'ad_account_id',\n                'account_name': 'ad_account_name',\n                'clicks':'swipes'\n            },\n        relation=ref('snapchat_ads__account_report')\n    ) }}\n), \n\nprep_tiktok as (\n\n    {{ field_name_conversion(\n        platform='tiktok_ads', \n        report_type='account', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name'\n            },\n        relation=ref('tiktok_ads__advertiser_report')\n    ) }}\n), \n\nunioned as (\n\n    {{ union_ctes(ctes=[\n        'prep_standardized_union_platform_rename',\n        'prep_apple_search',\n        'prep_linkedin',\n        'prep_pinterest',\n        'prep_snapchat',\n        'prep_tiktok']\n    ) }}\n)\n\nselect *\nfrom unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float", "macro.ad_reporting.field_name_conversion", "macro.ad_reporting.union_ctes"], "nodes": ["model.twitter_ads.twitter_ads__account_report", "model.facebook_ads.facebook_ads__account_report", "model.google_ads.google_ads__account_report", "model.microsoft_ads.microsoft_ads__account_report", "model.apple_search_ads.apple_search_ads__organization_report", "model.linkedin.linkedin_ads__account_report", "model.pinterest.pinterest_ads__advertiser_report", "model.snapchat_ads.snapchat_ads__account_report", "model.tiktok_ads.tiktok_ads__advertiser_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "intermediate", "int_ad_reporting__account_report"], "unique_id": "model.ad_reporting.int_ad_reporting__account_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "intermediate/int_ad_reporting__account_report.sql", "original_file_path": "models/intermediate/int_ad_reporting__account_report.sql", "name": "int_ad_reporting__account_report", "alias": "int_ad_reporting__account_report", "checksum": {"name": "sha256", "checksum": "69e47d16ae37c328e6c0e758f920d311f6fd79b3d8f7065a16c164e94ae432d2"}, "tags": [], "refs": [["twitter_ads__account_report"], ["facebook_ads__account_report"], ["google_ads__account_report"], ["microsoft_ads__account_report"], ["apple_search_ads__organization_report"], ["linkedin_ads__account_report"], ["pinterest_ads__advertiser_report"], ["snapchat_ads__account_report"], ["tiktok_ads__advertiser_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/intermediate/int_ad_reporting__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323532.03794, "compiled_sql": "with prep_standardized_union as (\n\n    \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__account_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__account_report`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__account_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__account_report`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__account_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__account_report`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__account_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__account_report`\n\n            \n        )\n\n        \n), \n\nprep_standardized_union_platform_rename as (\n\n    select \n        cast(date_day as DATE) as date_day,\n        CASE \n            WHEN lower(platform) like '%facebook_ads__account_report`' then 'facebook_ads'\n            WHEN lower(platform) like '%google_ads__account_report`' then 'google_ads'\n            WHEN lower(platform) like '%microsoft_ads__account_report`' then 'microsoft_ads'\n            WHEN lower(platform) like '%twitter_ads__account_report`' then 'twitter_ads'\n        END as platform,\n\n        -- Below fields/aliases must be in alphabetical order \n        cast(account_id as \n    string\n) as account_id,\n        cast(account_name as \n    string\n) as account_name,\n        cast(clicks as \n    int64\n) as clicks,\n        cast(impressions as \n    int64\n) as impressions,\n        cast(spend as \n    float64\n) as spend\n    from prep_standardized_union\n),\n\nprep_apple_search as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'apple_search_ads' as \n    string\n) as platform,\n\n    cast(organization_id as\n    string\n) as account_id \n    ,cast(organization_name as\n    string\n) as account_name \n    ,cast(taps as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__organization_report`\n\n),\n\nprep_linkedin as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'linkedin_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(cost as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__account_report`\n\n),\n\nprep_pinterest as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'pinterest_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__advertiser_report`\n\n),\n\nprep_snapchat as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'snapchat_ads' as \n    string\n) as platform,\n\n    cast(ad_account_id as\n    string\n) as account_id \n    ,cast(ad_account_name as\n    string\n) as account_name \n    ,cast(swipes as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__account_report`\n\n), \n\nprep_tiktok as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'tiktok_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__advertiser_report`\n\n), \n\nunioned as (\n\n    \n\n\nselect * from prep_standardized_union_platform_rename\n\nunion all\n\nselect * from prep_apple_search\n\nunion all\n\nselect * from prep_linkedin\n\nunion all\n\nselect * from prep_pinterest\n\nunion all\n\nselect * from prep_snapchat\n\nunion all\n\nselect * from prep_tiktok\n\n\n\n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__account_report`"}, "model.ad_reporting.int_ad_reporting__url_report": {"raw_sql": "-- missing apple search ads (standalone), \n-- twitter (ask jamie which report maps to ad group) and \n-- linkedin (confirm with jamie if its campaign_group) and\n-- due to new persist logic \n\n\nwith prep_standardized_union as (\n\n    {{ dbt_utils.union_relations(\n        relations=[\n            ref('google_ads__url_report'),\n            ref('microsoft_ads__url_report')],\n        source_column_name='platform',\n        include=['date_day', \n                'account_id', \n                'account_name', \n                'campaign_id',\n                'campaign_name',\n                'ad_group_id',\n                'ad_group_name',\n                'base_url',\n                'url_host',\n                'url_path',\n                'utm_source',\n                'utm_medium',\n                'utm_campaign',\n                'utm_content',\n                'utm_term',\n                'clicks', \n                'impressions', \n                'spend']) }}\n), \n\nprep_standardized_union_platform_rename as (\n\n    select \n        cast(date_day as DATE) as date_day,\n        CASE \n            WHEN lower(platform) like '%google_ads__url_report`' then 'google_ads'\n            WHEN lower(platform) like '%microsoft_ads__url_report`' then 'microsoft_ads'\n        END as platform,\n\n        -- Below field/aliases must be in alphabetical order\n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        cast(account_name as {{ dbt_utils.type_string() }}) as account_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        cast(ad_group_name as {{ dbt_utils.type_string() }}) as ad_group_name,\n        cast(base_url as {{ dbt_utils.type_string() }}) as base_url,\n        cast(account_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        cast(account_name as {{ dbt_utils.type_string() }}) as campaign_name,\n        cast(clicks as {{ dbt_utils.type_int() }}) as clicks,\n        cast(impressions as {{ dbt_utils.type_int() }}) as impressions,\n        cast(spend as {{ dbt_utils.type_float() }}) as spend,\n        cast(url_host as {{ dbt_utils.type_string() }}) as url_host,\n        cast(url_path as {{ dbt_utils.type_string() }}) as url_path,\n        cast(utm_campaign as {{ dbt_utils.type_string() }}) as utm_campaign,\n        cast(utm_content as {{ dbt_utils.type_string() }}) as utm_content,\n        cast(utm_medium as {{ dbt_utils.type_string() }}) as utm_medium,\n        cast(utm_source as {{ dbt_utils.type_string() }}) as utm_source,\n        cast(utm_term as {{ dbt_utils.type_string() }}) as utm_term\n    from prep_standardized_union\n),\n\nprep_facebook as (\n\n    {{ field_name_conversion(\n        platform='facebook_ads', \n        report_type='url', \n        field_mapping={\n                'ad_group_id': 'ad_set_id',\n                'ad_group_name': 'ad_set_name'\n            },\n        relation=ref('facebook_ads__url_report')\n    ) }}\n),\n\nprep_pinterest as (\n\n    {{ field_name_conversion(\n        platform='pinterest_ads', \n        report_type='url', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name'\n            },\n        relation=ref('pinterest_ads__url_report')\n    ) }}\n),\n\nprep_snapchat as (\n\n    {{ field_name_conversion(\n        platform='snapchat_ads', \n        report_type='url', \n        field_mapping={\n                'account_id': 'ad_account_id',\n                'account_name': 'ad_account_name',\n                'campaign_id': 'null',\n                'campaign_name': 'null',\n                'ad_group_id': 'null',\n                'ad_group_name': 'null',\n                'clicks':'swipes'\n            },\n        relation=ref('snapchat_ads__url_report')\n    ) }}\n), \n\nprep_tiktok as (\n\n    {{ field_name_conversion(\n        platform='tiktok_ads', \n        report_type='url', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name'\n            },\n        relation=ref('tiktok_ads__url_report')\n    ) }}\n), \n\nunioned as (\n\n    {{ union_ctes(ctes=[\n        'prep_standardized_union_platform_rename',\n        'prep_facebook',\n        'prep_pinterest',\n        'prep_snapchat',\n        'prep_tiktok']\n    ) }}\n)\n\nselect *\nfrom unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float", "macro.ad_reporting.field_name_conversion", "macro.ad_reporting.union_ctes"], "nodes": ["model.google_ads.google_ads__url_report", "model.microsoft_ads.microsoft_ads__url_report", "model.facebook_ads.facebook_ads__url_report", "model.pinterest.pinterest_ads__url_report", "model.snapchat_ads.snapchat_ads__url_report", "model.tiktok_ads.tiktok_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "intermediate", "int_ad_reporting__url_report"], "unique_id": "model.ad_reporting.int_ad_reporting__url_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "intermediate/int_ad_reporting__url_report.sql", "original_file_path": "models/intermediate/int_ad_reporting__url_report.sql", "name": "int_ad_reporting__url_report", "alias": "int_ad_reporting__url_report", "checksum": {"name": "sha256", "checksum": "8cbe4b40866a5d80fd624c4ab3d240b205622f507d7dd9bebd4891efb4e671bc"}, "tags": [], "refs": [["google_ads__url_report"], ["microsoft_ads__url_report"], ["facebook_ads__url_report"], ["pinterest_ads__url_report"], ["snapchat_ads__url_report"], ["tiktok_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/intermediate/int_ad_reporting__url_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323532.054622, "compiled_sql": "-- missing apple search ads (standalone), \n-- twitter (ask jamie which report maps to ad group) and \n-- linkedin (confirm with jamie if its campaign_group) and\n-- due to new persist logic \n\n\nwith prep_standardized_union as (\n\n    \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__url_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__url_report`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__url_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__url_report`\n\n            \n        )\n\n        \n), \n\nprep_standardized_union_platform_rename as (\n\n    select \n        cast(date_day as DATE) as date_day,\n        CASE \n            WHEN lower(platform) like '%google_ads__url_report`' then 'google_ads'\n            WHEN lower(platform) like '%microsoft_ads__url_report`' then 'microsoft_ads'\n        END as platform,\n\n        -- Below field/aliases must be in alphabetical order\n        cast(account_id as \n    string\n) as account_id,\n        cast(account_name as \n    string\n) as account_name,\n        cast(ad_group_id as \n    string\n) as ad_group_id,\n        cast(ad_group_name as \n    string\n) as ad_group_name,\n        cast(base_url as \n    string\n) as base_url,\n        cast(account_id as \n    string\n) as campaign_id,\n        cast(account_name as \n    string\n) as campaign_name,\n        cast(clicks as \n    int64\n) as clicks,\n        cast(impressions as \n    int64\n) as impressions,\n        cast(spend as \n    float64\n) as spend,\n        cast(url_host as \n    string\n) as url_host,\n        cast(url_path as \n    string\n) as url_path,\n        cast(utm_campaign as \n    string\n) as utm_campaign,\n        cast(utm_content as \n    string\n) as utm_content,\n        cast(utm_medium as \n    string\n) as utm_medium,\n        cast(utm_source as \n    string\n) as utm_source,\n        cast(utm_term as \n    string\n) as utm_term\n    from prep_standardized_union\n),\n\nprep_facebook as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'facebook_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(ad_set_id as\n    string\n) as ad_group_id \n    ,cast(ad_set_name as\n    string\n) as ad_group_name \n    ,cast(base_url as\n    string\n) as base_url \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    ,cast(url_host as\n    string\n) as url_host \n    ,cast(url_path as\n    string\n) as url_path \n    ,cast(utm_campaign as\n    string\n) as utm_campaign \n    ,cast(utm_content as\n    string\n) as utm_content \n    ,cast(utm_medium as\n    string\n) as utm_medium \n    ,cast(utm_source as\n    string\n) as utm_source \n    ,cast(utm_term as\n    string\n) as utm_term \n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__url_report`\n\n),\n\nprep_pinterest as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'pinterest_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(base_url as\n    string\n) as base_url \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    ,cast(url_host as\n    string\n) as url_host \n    ,cast(url_path as\n    string\n) as url_path \n    ,cast(utm_campaign as\n    string\n) as utm_campaign \n    ,cast(utm_content as\n    string\n) as utm_content \n    ,cast(utm_medium as\n    string\n) as utm_medium \n    ,cast(utm_source as\n    string\n) as utm_source \n    ,cast(utm_term as\n    string\n) as utm_term \n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__url_report`\n\n),\n\nprep_snapchat as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'snapchat_ads' as \n    string\n) as platform,\n\n    cast(ad_account_id as\n    string\n) as account_id \n    ,cast(ad_account_name as\n    string\n) as account_name \n    ,cast(null as\n    string\n) as ad_group_id \n    ,cast(null as\n    string\n) as ad_group_name \n    ,cast(base_url as\n    string\n) as base_url \n    ,cast(null as\n    string\n) as campaign_id \n    ,cast(null as\n    string\n) as campaign_name \n    ,cast(swipes as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    ,cast(url_host as\n    string\n) as url_host \n    ,cast(url_path as\n    string\n) as url_path \n    ,cast(utm_campaign as\n    string\n) as utm_campaign \n    ,cast(utm_content as\n    string\n) as utm_content \n    ,cast(utm_medium as\n    string\n) as utm_medium \n    ,cast(utm_source as\n    string\n) as utm_source \n    ,cast(utm_term as\n    string\n) as utm_term \n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__url_report`\n\n), \n\nprep_tiktok as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'tiktok_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(base_url as\n    string\n) as base_url \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    ,cast(url_host as\n    string\n) as url_host \n    ,cast(url_path as\n    string\n) as url_path \n    ,cast(utm_campaign as\n    string\n) as utm_campaign \n    ,cast(utm_content as\n    string\n) as utm_content \n    ,cast(utm_medium as\n    string\n) as utm_medium \n    ,cast(utm_source as\n    string\n) as utm_source \n    ,cast(utm_term as\n    string\n) as utm_term \n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__url_report`\n\n), \n\nunioned as (\n\n    \n\n\nselect * from prep_standardized_union_platform_rename\n\nunion all\n\nselect * from prep_facebook\n\nunion all\n\nselect * from prep_pinterest\n\nunion all\n\nselect * from prep_snapchat\n\nunion all\n\nselect * from prep_tiktok\n\n\n\n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__url_report`"}, "model.ad_reporting.int_ad_reporting__search_report": {"raw_sql": "{# Standard fields for search reports are:\n    - 'account_id'\n    - 'account_name'\n    - 'campaign_id'\n    - 'campaign_name'\n    - 'ad_group_id'\n    - 'ad_group_name'\n    - 'keyword_id'\n    - 'keyword_text'\n    - 'search_query'\n    - 'search_match_type'\n    - 'clicks'\n    - 'impressions'\n    - 'spend'\n#}\n\nwith prep_microsoft as (\n\n    {{ field_name_conversion(\n        platform='microsoft_ads', \n        report_type='search', \n        field_mapping={\n                'keyword_text': 'keyword_name',\n                'search_match_type': 'match_type'\n            },\n        relation=ref('microsoft_ads__search_report')\n    ) }}\n), \n\n{% if var('apple_search_ads__using_search_terms') %}\nprep_apple_search as (\n\n    {{ field_name_conversion(\n        platform='apple_search_ads', \n        report_type='search', \n        field_mapping={\n                'account_id': 'organization_id',\n                'account_name': 'organization_name',\n                'search_match_type': 'match_type',\n                'search_query': 'search_term_text',\n                'clicks': 'taps'\n            },\n        relation=ref('apple_search_ads__search_term_report')\n    ) }}\n), \n{% endif %}\n\nunioned as (\n\n    {{ union_ctes(ctes=[\n        'prep_microsoft', \n        'prep_apple_search'\n        ] if var('apple_search_ads__using_search_terms') \n        else ['prep_microsoft']\n    ) }}\n)\n\nselect *\nfrom unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ad_reporting.field_name_conversion", "macro.ad_reporting.union_ctes"], "nodes": ["model.microsoft_ads.microsoft_ads__search_report", "model.apple_search_ads.apple_search_ads__search_term_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "intermediate", "int_ad_reporting__search_report"], "unique_id": "model.ad_reporting.int_ad_reporting__search_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "intermediate/int_ad_reporting__search_report.sql", "original_file_path": "models/intermediate/int_ad_reporting__search_report.sql", "name": "int_ad_reporting__search_report", "alias": "int_ad_reporting__search_report", "checksum": {"name": "sha256", "checksum": "cbcc16b490524f60fed977936cbc2608a55bc4b4b96873d90924bdfe11a668a1"}, "tags": [], "refs": [["microsoft_ads__search_report"], ["apple_search_ads__search_term_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/intermediate/int_ad_reporting__search_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323532.080039, "compiled_sql": "\n\nwith prep_microsoft as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'microsoft_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(keyword_id as\n    string\n) as keyword_id \n    ,cast(keyword_name as\n    string\n) as keyword_text \n    ,cast(match_type as\n    string\n) as search_match_type \n    ,cast(search_query as\n    string\n) as search_query \n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__search_report`\n\n), \n\n\nprep_apple_search as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'apple_search_ads' as \n    string\n) as platform,\n\n    cast(organization_id as\n    string\n) as account_id \n    ,cast(organization_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(taps as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(keyword_id as\n    string\n) as keyword_id \n    ,cast(keyword_text as\n    string\n) as keyword_text \n    ,cast(match_type as\n    string\n) as search_match_type \n    ,cast(search_term_text as\n    string\n) as search_query \n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__search_term_report`\n\n), \n\n\nunioned as (\n\n    \n\n\nselect * from prep_microsoft\n\nunion all\n\nselect * from prep_apple_search\n\n\n\n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__search_report`"}, "model.ad_reporting.int_ad_reporting__ad_group_report": {"raw_sql": "with prep_standardized_union as (\n\n    {{ dbt_utils.union_relations(\n        relations=[\n            ref('google_ads__ad_group_report'),\n            ref('microsoft_ads__ad_group_report')],\n        source_column_name='platform',\n        include=['date_day', \n                'account_id', \n                'account_name', \n                'campaign_id',\n                'campaign_name',\n                'ad_group_id',\n                'ad_group_name',\n                'clicks', \n                'impressions', \n                'spend']) }}\n), \n\nprep_standardized_union_platform_rename as (\n\n    select \n        cast(date_day as DATE) as date_day,\n        CASE \n            WHEN lower(platform) like '%google_ads__ad_group_report`' then 'google_ads'\n            WHEN lower(platform) like '%microsoft_ads__ad_group_report`' then 'microsoft_ads'\n        END as platform,\n\n        -- Below fields/aliases must be in alphabetical order \n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        cast(account_name as {{ dbt_utils.type_string() }}) as account_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        cast(ad_group_name as {{ dbt_utils.type_string() }}) as ad_group_name,\n        cast(account_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        cast(account_name as {{ dbt_utils.type_string() }}) as campaign_name,\n        cast(clicks as {{ dbt_utils.type_int() }}) as clicks,\n        cast(impressions as {{ dbt_utils.type_int() }}) as impressions,\n        cast(spend as {{ dbt_utils.type_float() }}) as spend\n    from prep_standardized_union\n),\n\nprep_apple_search as (\n\n    {{ field_name_conversion(\n        platform='apple_search_ads', \n        report_type='ad_group', \n        field_mapping={\n                'account_id': 'organization_id',\n                'account_name': 'organization_name',\n                'clicks': 'taps'\n            },\n        relation=ref('apple_search_ads__ad_group_report')\n    ) }}\n),\n\nprep_linkedin as (\n\n    {{ field_name_conversion(\n        platform='linkedin_ads', \n        report_type='ad_group', \n        field_mapping={\n                'campaign_id': 'campaign_group_id',\n                'campaign_name': 'campaign_group_name',\n                'ad_group_id': 'campaign_id',\n                'ad_group_name': 'campaign_name',\n                'spend': 'cost'\n            },\n        relation=ref('linkedin_ads__campaign_report')\n    ) }}\n),\n\nprep_facebook as (\n\n    {{ field_name_conversion(\n        platform='facebook_ads', \n        report_type='ad_group', \n        field_mapping={\n                'ad_group_id': 'ad_set_id',\n                'ad_group_name': 'ad_set_name'\n            },\n        relation=ref('facebook_ads__ad_set_report')\n    ) }}\n),\n\nprep_pinterest as (\n\n    {{ field_name_conversion(\n        platform='pinterest_ads', \n        report_type='ad_group', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name'\n            },\n        relation=ref('pinterest_ads__ad_group_report')\n    ) }}\n),\n\nprep_snapchat as (\n\n    {{ field_name_conversion(\n        platform='snapchat_ads', \n        report_type='ad_group', \n        field_mapping={\n                'account_id': 'ad_account_id',\n                'account_name': 'ad_account_name',\n                'ad_group_id': 'ad_squad_id',\n                'ad_group_name': 'ad_squad_name',\n                'clicks':'swipes'\n            },\n        relation=ref('snapchat_ads__ad_squad_report')\n    ) }}\n), \n\nprep_tiktok as (\n\n    {{ field_name_conversion(\n        platform='tiktok_ads', \n        report_type='ad_group', \n        field_mapping={\n                'account_id': 'advertiser_id',\n                'account_name': 'advertiser_name'\n            },\n        relation=ref('tiktok_ads__ad_group_report')\n    ) }}\n), \n\nprep_twitter as (\n\n    {{ field_name_conversion(\n        platform='twitter_ads', \n        report_type='ad_group', \n        field_mapping={\n                'ad_group_id': 'line_item_id',\n                'ad_group_name': 'line_item_name'\n            },\n        relation=ref('twitter_ads__line_item_report')\n    ) }}\n), \n\nunioned as (\n\n    {{ union_ctes(ctes=[\n        'prep_standardized_union_platform_rename',\n        'prep_apple_search',\n        'prep_facebook',\n        'prep_linkedin',\n        'prep_pinterest',\n        'prep_snapchat',\n        'prep_tiktok',\n        'prep_twitter']\n    ) }}\n)\n\nselect *\nfrom unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float", "macro.ad_reporting.field_name_conversion", "macro.ad_reporting.union_ctes"], "nodes": ["model.google_ads.google_ads__ad_group_report", "model.microsoft_ads.microsoft_ads__ad_group_report", "model.apple_search_ads.apple_search_ads__ad_group_report", "model.linkedin.linkedin_ads__campaign_report", "model.facebook_ads.facebook_ads__ad_set_report", "model.pinterest.pinterest_ads__ad_group_report", "model.snapchat_ads.snapchat_ads__ad_squad_report", "model.tiktok_ads.tiktok_ads__ad_group_report", "model.twitter_ads.twitter_ads__line_item_report"]}, "config": {"enabled": true, "alias": null, "schema": "ad_reporting", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_ad_reporting", "fqn": ["ad_reporting", "intermediate", "int_ad_reporting__ad_group_report"], "unique_id": "model.ad_reporting.int_ad_reporting__ad_group_report", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "intermediate/int_ad_reporting__ad_group_report.sql", "original_file_path": "models/intermediate/int_ad_reporting__ad_group_report.sql", "name": "int_ad_reporting__ad_group_report", "alias": "int_ad_reporting__ad_group_report", "checksum": {"name": "sha256", "checksum": "db710e9367e70c254947389d5fbd37ba29e8c303c0d4b2f84c22c44f653b3126"}, "tags": [], "refs": [["google_ads__ad_group_report"], ["microsoft_ads__ad_group_report"], ["apple_search_ads__ad_group_report"], ["linkedin_ads__campaign_report"], ["facebook_ads__ad_set_report"], ["pinterest_ads__ad_group_report"], ["snapchat_ads__ad_squad_report"], ["tiktok_ads__ad_group_report"], ["twitter_ads__line_item_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/intermediate/int_ad_reporting__ad_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ad_reporting", "materialized": "view"}, "created_at": 1660323532.092267, "compiled_sql": "with prep_standardized_union as (\n\n    \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__ad_group_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__ad_group_report`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__ad_group_report`' as \n    string\n) as platform,\n                \n\n            from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__ad_group_report`\n\n            \n        )\n\n        \n), \n\nprep_standardized_union_platform_rename as (\n\n    select \n        cast(date_day as DATE) as date_day,\n        CASE \n            WHEN lower(platform) like '%google_ads__ad_group_report`' then 'google_ads'\n            WHEN lower(platform) like '%microsoft_ads__ad_group_report`' then 'microsoft_ads'\n        END as platform,\n\n        -- Below fields/aliases must be in alphabetical order \n        cast(account_id as \n    string\n) as account_id,\n        cast(account_name as \n    string\n) as account_name,\n        cast(ad_group_id as \n    string\n) as ad_group_id,\n        cast(ad_group_name as \n    string\n) as ad_group_name,\n        cast(account_id as \n    string\n) as campaign_id,\n        cast(account_name as \n    string\n) as campaign_name,\n        cast(clicks as \n    int64\n) as clicks,\n        cast(impressions as \n    int64\n) as impressions,\n        cast(spend as \n    float64\n) as spend\n    from prep_standardized_union\n),\n\nprep_apple_search as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'apple_search_ads' as \n    string\n) as platform,\n\n    cast(organization_id as\n    string\n) as account_id \n    ,cast(organization_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(taps as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__ad_group_report`\n\n),\n\nprep_linkedin as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'linkedin_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(campaign_id as\n    string\n) as ad_group_id \n    ,cast(campaign_name as\n    string\n) as ad_group_name \n    ,cast(campaign_group_id as\n    string\n) as campaign_id \n    ,cast(campaign_group_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(cost as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__campaign_report`\n\n),\n\nprep_facebook as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'facebook_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(ad_set_id as\n    string\n) as ad_group_id \n    ,cast(ad_set_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__ad_set_report`\n\n),\n\nprep_pinterest as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'pinterest_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__ad_group_report`\n\n),\n\nprep_snapchat as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'snapchat_ads' as \n    string\n) as platform,\n\n    cast(ad_account_id as\n    string\n) as account_id \n    ,cast(ad_account_name as\n    string\n) as account_name \n    ,cast(ad_squad_id as\n    string\n) as ad_group_id \n    ,cast(ad_squad_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(swipes as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__ad_squad_report`\n\n), \n\nprep_tiktok as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'tiktok_ads' as \n    string\n) as platform,\n\n    cast(advertiser_id as\n    string\n) as account_id \n    ,cast(advertiser_name as\n    string\n) as account_name \n    ,cast(ad_group_id as\n    string\n) as ad_group_id \n    ,cast(ad_group_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__ad_group_report`\n\n), \n\nprep_twitter as (\n\n    select \n    cast(date_day as DATE) as date_day,\n    cast( 'twitter_ads' as \n    string\n) as platform,\n\n    cast(account_id as\n    string\n) as account_id \n    ,cast(account_name as\n    string\n) as account_name \n    ,cast(line_item_id as\n    string\n) as ad_group_id \n    ,cast(line_item_name as\n    string\n) as ad_group_name \n    ,cast(campaign_id as\n    string\n) as campaign_id \n    ,cast(campaign_name as\n    string\n) as campaign_name \n    ,cast(clicks as \n    int64\n) as clicks\n\n    ,cast(impressions as \n    int64\n) as impressions\n\n    ,cast(spend as\n    float64\n) as spend\n\n    \nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__line_item_report`\n\n), \n\nunioned as (\n\n    \n\n\nselect * from prep_standardized_union_platform_rename\n\nunion all\n\nselect * from prep_apple_search\n\nunion all\n\nselect * from prep_facebook\n\nunion all\n\nselect * from prep_linkedin\n\nunion all\n\nselect * from prep_pinterest\n\nunion all\n\nselect * from prep_snapchat\n\nunion all\n\nselect * from prep_tiktok\n\nunion all\n\nselect * from prep_twitter\n\n\n\n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`int_ad_reporting__ad_group_report`"}, "model.apple_search_ads_source.stg_apple_search_ads__campaign_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_apple_search_ads__campaign_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_apple_search_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        modification_time as modified_at,\n        organization_id,\n        name as campaign_name,\n        id as campaign_id,\n        status as campaign_status,\n        start_time as start_at,\n        end_time as end_at,\n        row_number() over (partition by id order by modification_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.apple_search_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "stg_apple_search_ads__campaign_history"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "stg_apple_search_ads__campaign_history.sql", "original_file_path": "models/stg_apple_search_ads__campaign_history.sql", "name": "stg_apple_search_ads__campaign_history", "alias": "stg_apple_search_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "294e54bc10f47e44786be1c445e764b49464643d75c0bf7a4fc3a38f3868e0de"}, "tags": [], "refs": [["stg_apple_search_ads__campaign_history_tmp"], ["stg_apple_search_ads__campaign_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a campaign in Apple Search Ads.", "columns": {"modified_at": {"name": "modified_at", "description": "Timestamp of when the campaign object was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_at": {"name": "start_at", "description": "The designated ad group start time (ad group with the earliest start time associated with this campaign).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_at": {"name": "end_at", "description": "The designated campaign end time (ad group with the latest start time associated with this campaign).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Organization ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The current status of the campaign, values include ENABLED and PAUSED.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads_source://models/stg_apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.427613, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int64\n) as \n    \n    adam_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    budget_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    budget_currency\n    \n , \n    cast(null as \n    string\n) as \n    \n    budget_orders\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    daily_budget_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    daily_budget_currency\n    \n , \n    cast(null as boolean) as \n    \n    deleted\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    end_time\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    loc_invoice_detail_buyer_email\n    \n , \n    cast(null as \n    string\n) as \n    \n    loc_invoice_detail_buyer_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    loc_invoice_detail_client_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    loc_invoice_detail_order_number\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    modification_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    organization_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    payment_model\n    \n , \n    cast(null as \n    string\n) as \n    \n    serving_state_reasons\n    \n , \n    cast(null as \n    string\n) as \n    \n    serving_status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        modification_time as modified_at,\n        organization_id,\n        name as campaign_name,\n        id as campaign_id,\n        status as campaign_status,\n        start_time as start_at,\n        end_time as end_at,\n        row_number() over (partition by id order by modification_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history`"}, "model.apple_search_ads_source.stg_apple_search_ads__ad_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_apple_search_ads__ad_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_apple_search_ads__ad_report_tmp')),\n                staging_columns=get_ad_level_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        impressions,\n        local_spend_amount as spend,\n        local_spend_currency as currency,\n        new_downloads,\n        redownloads,\n        taps\n\n        {{ fivetran_utils.fill_pass_through_columns('apple_search_ads__ad_passthrough_metrics') }}\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.apple_search_ads_source.get_ad_level_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report_tmp", "model.apple_search_ads_source.stg_apple_search_ads__ad_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "stg_apple_search_ads__ad_report"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__ad_report", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "stg_apple_search_ads__ad_report.sql", "original_file_path": "models/stg_apple_search_ads__ad_report.sql", "name": "stg_apple_search_ads__ad_report", "alias": "stg_apple_search_ads__ad_report", "checksum": {"name": "sha256", "checksum": "45019dc2d949eecadbbd9d4a052049a60dca00c32f726da678972fa8bdadd1f6"}, "tags": [], "refs": [["stg_apple_search_ads__ad_report_tmp"], ["stg_apple_search_ads__ad_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of an ad in Apple Search Ads.", "columns": {"date_day": {"name": "date_day", "description": "Date for daily report aggregation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "Ad ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of times your ad appeared in App Store search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of costs associated with the number of impressions served; Spend is measured in the currency used in the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed the respective app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Occurs when a user downloads respective app, deletes it, and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "The number of times ad was tapped by users within the reporting time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads_source://models/stg_apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads__ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.424428, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    local_spend_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    local_spend_currency\n    \n , \n    cast(null as \n    int64\n) as \n    \n    new_downloads\n    \n , \n    cast(null as \n    int64\n) as \n    \n    redownloads\n    \n , \n    cast(null as \n    int64\n) as \n    \n    taps\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        impressions,\n        local_spend_amount as spend,\n        local_spend_currency as currency,\n        new_downloads,\n        redownloads,\n        taps\n\n        \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_report`"}, "model.apple_search_ads_source.stg_apple_search_ads__campaign_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_apple_search_ads__campaign_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_apple_search_ads__campaign_report_tmp')),\n                staging_columns=get_campaign_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        id as campaign_id,\n        impressions,\n        local_spend_amount as spend,\n        local_spend_currency as currency,\n        new_downloads,\n        redownloads,\n        taps\n\n        {{ fivetran_utils.fill_pass_through_columns('apple_search_ads__campaign_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.apple_search_ads_source.get_campaign_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp", "model.apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "stg_apple_search_ads__campaign_report"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__campaign_report", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "stg_apple_search_ads__campaign_report.sql", "original_file_path": "models/stg_apple_search_ads__campaign_report.sql", "name": "stg_apple_search_ads__campaign_report", "alias": "stg_apple_search_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "c4681d203c58d68501b9d2d3a84fc28598e9705eb4cc7f4496be52e3209768d3"}, "tags": [], "refs": [["stg_apple_search_ads__campaign_report_tmp"], ["stg_apple_search_ads__campaign_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a campaign in Apple Search Ads.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date for daily report aggregation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of times your ad appeared in App Store search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of costs associated with the number of impressions served; Spend is measured in the currency used in the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed the respective app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Occurs when a user downloads respective app, deletes it, and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "The number of times ad was tapped by users within the reporting time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads_source://models/stg_apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.430918, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    local_spend_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    local_spend_currency\n    \n , \n    cast(null as \n    int64\n) as \n    \n    new_downloads\n    \n , \n    cast(null as \n    int64\n) as \n    \n    redownloads\n    \n , \n    cast(null as \n    int64\n) as \n    \n    taps\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        id as campaign_id,\n        impressions,\n        local_spend_amount as spend,\n        local_spend_currency as currency,\n        new_downloads,\n        redownloads,\n        taps\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_report`"}, "model.apple_search_ads_source.stg_apple_search_ads__organization": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_apple_search_ads__organization_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_apple_search_ads__organization_tmp')),\n                staging_columns=get_organization_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        currency,\n        payment_model,\n        name as organization_name,\n        time_zone\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.apple_search_ads_source.get_organization_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__organization_tmp", "model.apple_search_ads_source.stg_apple_search_ads__organization_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "stg_apple_search_ads__organization"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__organization", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "stg_apple_search_ads__organization.sql", "original_file_path": "models/stg_apple_search_ads__organization.sql", "name": "stg_apple_search_ads__organization", "alias": "stg_apple_search_ads__organization", "checksum": {"name": "sha256", "checksum": "24d3ee4e2d050e8ade0b3222ea535ed1837d2ea4265f00cf3f3b7b67a7a30dab"}, "tags": [], "refs": [["stg_apple_search_ads__organization_tmp"], ["stg_apple_search_ads__organization_tmp"]], "sources": [], "metrics": [], "description": "Each record represents an organization in Apple Search Ads.", "columns": {"organization_id": {"name": "organization_id", "description": "Organization ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Specified currency for respective organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_model": {"name": "payment_model", "description": "Values include 'LOC', 'PAYG' or <empty string> (payment method hasn't been set).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Name of organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "Organization default timezone; values can be ORTZ or UTC.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads_source://models/stg_apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads__organization.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.440966, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    payment_model\n    \n , \n    cast(null as \n    string\n) as \n    \n    role_names\n    \n , \n    cast(null as \n    string\n) as \n    \n    time_zone\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        currency,\n        payment_model,\n        name as organization_name,\n        time_zone\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization`"}, "model.apple_search_ads_source.stg_apple_search_ads__keyword_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_apple_search_ads__keyword_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_apple_search_ads__keyword_report_tmp')),\n                staging_columns=get_keyword_report_columns()\n            )\n        }}     \n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        id as keyword_id,\n        impressions,\n        local_spend_amount as spend,\n        local_spend_currency as currency,\n        new_downloads,\n        redownloads,\n        taps\n\n        {{ fivetran_utils.fill_pass_through_columns('apple_search_ads__keyword_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.apple_search_ads_source.get_keyword_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp", "model.apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "stg_apple_search_ads__keyword_report"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__keyword_report", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "stg_apple_search_ads__keyword_report.sql", "original_file_path": "models/stg_apple_search_ads__keyword_report.sql", "name": "stg_apple_search_ads__keyword_report", "alias": "stg_apple_search_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "087cf73b201edc946f1b30c28096f4d513aca817fc3e510cac05f28dc781c665"}, "tags": [], "refs": [["stg_apple_search_ads__keyword_report_tmp"], ["stg_apple_search_ads__keyword_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a keyword in Apple Search Ads.", "columns": {"keyword_id": {"name": "keyword_id", "description": "Keyword ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date for daily report aggregation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of times your ad appeared in App Store search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of costs associated with the number of impressions served; Spend is measured in the currency used in the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed the respective app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Occurs when a user downloads respective app, deletes it, and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "The number of times ad was tapped by users within the reporting time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads_source://models/stg_apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads__keyword_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.438325, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    local_spend_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    local_spend_currency\n    \n , \n    cast(null as \n    int64\n) as \n    \n    new_downloads\n    \n , \n    cast(null as \n    int64\n) as \n    \n    redownloads\n    \n , \n    cast(null as \n    int64\n) as \n    \n    taps\n    \n \n\n     \n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        id as keyword_id,\n        impressions,\n        local_spend_amount as spend,\n        local_spend_currency as currency,\n        new_downloads,\n        redownloads,\n        taps\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_report`"}, "model.apple_search_ads_source.stg_apple_search_ads__keyword_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_apple_search_ads__keyword_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_apple_search_ads__keyword_history_tmp')),\n                staging_columns=get_keyword_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        modification_time as modified_at,\n        campaign_id,\n        ad_group_id,\n        id as keyword_id,\n        bid_amount, \n        bid_currency,\n        match_type,\n        status as keyword_status,\n        text as keyword_text,\n        row_number() over (partition by id order by modification_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.apple_search_ads_source.get_keyword_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp", "model.apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "stg_apple_search_ads__keyword_history"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__keyword_history", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "stg_apple_search_ads__keyword_history.sql", "original_file_path": "models/stg_apple_search_ads__keyword_history.sql", "name": "stg_apple_search_ads__keyword_history", "alias": "stg_apple_search_ads__keyword_history", "checksum": {"name": "sha256", "checksum": "5ee576e97a5fffaf97916376ca747fcb9389b6733d268f9b42308a8f244ade8e"}, "tags": [], "refs": [["stg_apple_search_ads__keyword_history_tmp"], ["stg_apple_search_ads__keyword_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a keyword in Apple Search Ads.", "columns": {"modified_at": {"name": "modified_at", "description": "Timestamp of when the keyword object was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "Keyword ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount": {"name": "bid_amount", "description": "The bid amount to display your ad for the matching text value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_currency": {"name": "bid_currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "Controls how ads are matched to user searches; EXACT or BROAD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The current status of the keyword, values include ENABLED and PAUSED.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_text": {"name": "keyword_text", "description": "The word or phrase to match in user searches, to show respective ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads_source://models/stg_apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads__keyword_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.4348102, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    bid_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_currency\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as boolean) as \n    \n    deleted\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    match_type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    modification_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    text\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        modification_time as modified_at,\n        campaign_id,\n        ad_group_id,\n        id as keyword_id,\n        bid_amount, \n        bid_currency,\n        match_type,\n        status as keyword_status,\n        text as keyword_text,\n        row_number() over (partition by id order by modification_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_history`"}, "model.apple_search_ads_source.stg_apple_search_ads__search_term_report": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['ad_reporting__apple_search_ads_enabled','apple_search_ads__using_search_terms'])) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_apple_search_ads__search_term_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_apple_search_ads__search_term_report_tmp')),\n                staging_columns=get_search_term_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        _fivetran_id,\n        campaign_id,\n        ad_group_id,\n        ad_group_name,\n        bid_amount_amount as bid_amount,\n        bid_amount_currency as bid_currency,\n        keyword as keyword_text,\n        keyword_display_status,\n        keyword_id,\n        local_spend_amount as spend,\n        local_spend_currency as currency,\n        match_type,\n        search_term_source,\n        search_term_text,\n        impressions,\n        taps,\n        new_downloads,\n        redownloads\n\n        {{ fivetran_utils.fill_pass_through_columns('apple_search_ads__search_term_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.apple_search_ads_source.get_search_term_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp", "model.apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "stg_apple_search_ads__search_term_report"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__search_term_report", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "stg_apple_search_ads__search_term_report.sql", "original_file_path": "models/stg_apple_search_ads__search_term_report.sql", "name": "stg_apple_search_ads__search_term_report", "alias": "stg_apple_search_ads__search_term_report", "checksum": {"name": "sha256", "checksum": "6345a092b669f3283eb8b09b8590cdcf4e89da7ac486c18bb626315fac6db0e0"}, "tags": [], "refs": [["stg_apple_search_ads__search_term_report_tmp"], ["stg_apple_search_ads__search_term_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a search term in Apple Search Ads.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "A Fivetran internal unique id that helps us avoid duplicate rows in primary keyless tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_format": {"name": "ad_format", "description": "Format of creative set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date for daily report aggregation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount": {"name": "bid_amount", "description": "The bid amount to display your ad for the matching text value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_currency": {"name": "bid_currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_text": {"name": "keyword_text", "description": "The word or phrase to match in user searches, to show respective ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_display_status": {"name": "keyword_display_status", "description": "The keyword display status can either be ACTIVE or PAUSED.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "Keyword ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of costs associated with the number of impressions served; Spend is measured in the currency used in the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "Controls how ads are matched to user searches; values include EXACT, BROAD or AUTO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_term_source": {"name": "search_term_source", "description": "The search term source can either be TARGETED or AUTO; if this value is AUTO so will match_type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_term_text": {"name": "search_term_text", "description": "The word or phrase to match of user searches.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of times your ad appeared in App Store search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "The number of times ad was tapped by users within the reporting time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed the respective app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Occurs when a user downloads respective app, deletes it, and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads_source://models/stg_apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads__search_term_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.4488719, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__search_term_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as boolean) as \n    \n    ad_group_deleted\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_name\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    bid_amount_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_amount_currency\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as boolean) as \n    \n    deleted\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    string\n) as \n    \n    keyword\n    \n , \n    cast(null as \n    string\n) as \n    \n    keyword_display_status\n    \n , \n    cast(null as \n    int64\n) as \n    \n    keyword_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    local_spend_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    local_spend_currency\n    \n , \n    cast(null as \n    string\n) as \n    \n    match_type\n    \n , \n    cast(null as \n    int64\n) as \n    \n    new_downloads\n    \n , \n    cast(null as \n    int64\n) as \n    \n    redownloads\n    \n , \n    cast(null as \n    string\n) as \n    \n    search_term_source\n    \n , \n    cast(null as \n    string\n) as \n    \n    search_term_text\n    \n , \n    cast(null as \n    int64\n) as \n    \n    taps\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        _fivetran_id,\n        campaign_id,\n        ad_group_id,\n        ad_group_name,\n        bid_amount_amount as bid_amount,\n        bid_amount_currency as bid_currency,\n        keyword as keyword_text,\n        keyword_display_status,\n        keyword_id,\n        local_spend_amount as spend,\n        local_spend_currency as currency,\n        match_type,\n        search_term_source,\n        search_term_text,\n        impressions,\n        taps,\n        new_downloads,\n        redownloads\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__search_term_report`"}, "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_apple_search_ads__ad_group_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_apple_search_ads__ad_group_history_tmp')),\n                staging_columns=get_ad_group_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    select \n        modification_time as modified_at,\n        organization_id,\n        campaign_id,\n        name as ad_group_name,\n        id as ad_group_id,\n        status as ad_group_status,\n        start_time as start_at,\n        end_time as end_at,\n        row_number() over (partition by id order by modification_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.apple_search_ads_source.get_ad_group_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp", "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "stg_apple_search_ads__ad_group_history"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "stg_apple_search_ads__ad_group_history.sql", "original_file_path": "models/stg_apple_search_ads__ad_group_history.sql", "name": "stg_apple_search_ads__ad_group_history", "alias": "stg_apple_search_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "b2081179706957545ca7818fd65e298a3948051372426039e2ecffd091fef371"}, "tags": [], "refs": [["stg_apple_search_ads__ad_group_history_tmp"], ["stg_apple_search_ads__ad_group_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of an ad group in Apple Search Ads.", "columns": {"modified_at": {"name": "modified_at", "description": "Timestamp of when the ad group object was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean indicating whether record was the most recent instance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_at": {"name": "start_at", "description": "The designated ad group start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_at": {"name": "end_at", "description": "The designated ad group end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Organization ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The current status of the ad group, values include ENABLED and PAUSED.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads_source://models/stg_apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads__ad_group_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.412823, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    automated_keywords_opt_in\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    cpa_goal_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    cpa_goal_currency\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    default_cpc_bid_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    default_cpc_bid_currency\n    \n , \n    cast(null as boolean) as \n    \n    deleted\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    end_time\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    modification_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    organization_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    serving_state_reasons\n    \n , \n    cast(null as \n    string\n) as \n    \n    serving_status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    string\n) as \n    \n    storefronts\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    select \n        modification_time as modified_at,\n        organization_id,\n        campaign_id,\n        name as ad_group_name,\n        id as ad_group_id,\n        status as ad_group_status,\n        start_time as start_at,\n        end_time as end_at,\n        row_number() over (partition by id order by modification_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_history`"}, "model.apple_search_ads_source.stg_apple_search_ads__ad_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_apple_search_ads__ad_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_apple_search_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        creation_time as created_at,\n        modification_time as modified_at,\n        org_id as organization_id,\n        campaign_id,\n        ad_group_id,\n        name as ad_name,\n        id as ad_id,\n        status as ad_status, \n        row_number() over (partition by id order by modification_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.apple_search_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_history_tmp", "model.apple_search_ads_source.stg_apple_search_ads__ad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "stg_apple_search_ads__ad_history"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__ad_history", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "stg_apple_search_ads__ad_history.sql", "original_file_path": "models/stg_apple_search_ads__ad_history.sql", "name": "stg_apple_search_ads__ad_history", "alias": "stg_apple_search_ads__ad_history", "checksum": {"name": "sha256", "checksum": "4abb76f80d87af32ba976747bb0accf3b1641854a41a3e9d8ebec94533405d23"}, "tags": [], "refs": [["stg_apple_search_ads__ad_history_tmp"], ["stg_apple_search_ads__ad_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of an ad in Apple Search Ads.", "columns": {"created_at": {"name": "created_at", "description": "Timestamp of when ad was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp of when the ad object was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Organization ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Ad name associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "Ad ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_status": {"name": "ad_status", "description": "The current status of the ad, values include ENABLED and PAUSED.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads_source://models/stg_apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads__ad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.41919, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    creation_time\n    \n , \n    cast(null as \n    int64\n) as \n    \n    creative_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    creative_type\n    \n , \n    cast(null as boolean) as \n    \n    deleted\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    modification_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    org_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    serving_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        creation_time as created_at,\n        modification_time as modified_at,\n        org_id as organization_id,\n        campaign_id,\n        ad_group_id,\n        name as ad_name,\n        id as ad_id,\n        status as ad_status, \n        row_number() over (partition by id order by modification_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_history`"}, "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_apple_search_ads__ad_group_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_apple_search_ads__ad_group_report_tmp')),\n                staging_columns=get_ad_group_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        date as date_day, \n        ad_group_id,\n        impressions,\n        local_spend_amount as spend,\n        local_spend_currency as currency,\n        new_downloads,\n        redownloads,\n        taps\n\n        {{ fivetran_utils.fill_pass_through_columns('apple_search_ads__ad_group_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.apple_search_ads_source.get_ad_group_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp", "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "stg_apple_search_ads__ad_group_report"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "stg_apple_search_ads__ad_group_report.sql", "original_file_path": "models/stg_apple_search_ads__ad_group_report.sql", "name": "stg_apple_search_ads__ad_group_report", "alias": "stg_apple_search_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "a6f8f1e79e88e2512acd90e2768436ef73939e82acd46b79c0775ba19865147d"}, "tags": [], "refs": [["stg_apple_search_ads__ad_group_report_tmp"], ["stg_apple_search_ads__ad_group_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of an ad group in Apple Search Ads.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date for daily report aggregation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of times your ad appeared in App Store search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of costs associated with the number of impressions served. Spend is measured in the currency used in the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed the respective app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Occurs when a user downloads respective app, deletes it, and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "The number of times ad was tapped by users within the reporting time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "apple_search_ads_source://models/stg_apple_search_ads.yml", "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads__ad_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.4159691, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    local_spend_amount\n    \n , \n    cast(null as \n    string\n) as \n    \n    local_spend_currency\n    \n , \n    cast(null as \n    int64\n) as \n    \n    new_downloads\n    \n , \n    cast(null as \n    int64\n) as \n    \n    redownloads\n    \n , \n    cast(null as \n    int64\n) as \n    \n    taps\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        date as date_day, \n        ad_group_id,\n        impressions,\n        local_spend_amount as spend,\n        local_spend_currency as currency,\n        new_downloads,\n        redownloads,\n        taps\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_report`"}, "model.apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['ad_reporting__apple_search_ads_enabled','apple_search_ads__using_search_terms'])) }}\n\nselect * \nfrom {{ var('search_term_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.apple_search_ads_source.apple_search_ads.search_term_report"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "tmp", "stg_apple_search_ads__search_term_report_tmp"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "tmp/stg_apple_search_ads__search_term_report_tmp.sql", "original_file_path": "models/tmp/stg_apple_search_ads__search_term_report_tmp.sql", "name": "stg_apple_search_ads__search_term_report_tmp", "alias": "stg_apple_search_ads__search_term_report_tmp", "checksum": {"name": "sha256", "checksum": "86f6e99ff5c0373cf5ec106d4011966278601cb5350d588466564e2dca2fa951"}, "tags": [], "refs": [], "sources": [["apple_search_ads", "search_term_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/tmp/stg_apple_search_ads__search_term_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.3404028, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`apple_search_ads_integration_tests`.`search_term_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__search_term_report_tmp`"}, "model.apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.apple_search_ads_source.apple_search_ads.campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "tmp", "stg_apple_search_ads__campaign_history_tmp"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "tmp/stg_apple_search_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_apple_search_ads__campaign_history_tmp.sql", "name": "stg_apple_search_ads__campaign_history_tmp", "alias": "stg_apple_search_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "e23c062d3d75b890a717ab4047e5a0dccf7c098b3927935df02f76c17acb3ea7"}, "tags": [], "refs": [], "sources": [["apple_search_ads", "campaign_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/tmp/stg_apple_search_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.3463, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`apple_search_ads_integration_tests`.`campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history_tmp`"}, "model.apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('keyword_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.apple_search_ads_source.apple_search_ads.keyword_history"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "tmp", "stg_apple_search_ads__keyword_history_tmp"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "tmp/stg_apple_search_ads__keyword_history_tmp.sql", "original_file_path": "models/tmp/stg_apple_search_ads__keyword_history_tmp.sql", "name": "stg_apple_search_ads__keyword_history_tmp", "alias": "stg_apple_search_ads__keyword_history_tmp", "checksum": {"name": "sha256", "checksum": "852fa9ece91c72dd36f654ce0d71f2af4a1707385c0fa00e3d68e206e4ac456b"}, "tags": [], "refs": [], "sources": [["apple_search_ads", "keyword_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/tmp/stg_apple_search_ads__keyword_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.352939, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`apple_search_ads_integration_tests`.`keyword_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_history_tmp`"}, "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('ad_group_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.apple_search_ads_source.apple_search_ads.ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "tmp", "stg_apple_search_ads__ad_group_history_tmp"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "tmp/stg_apple_search_ads__ad_group_history_tmp.sql", "original_file_path": "models/tmp/stg_apple_search_ads__ad_group_history_tmp.sql", "name": "stg_apple_search_ads__ad_group_history_tmp", "alias": "stg_apple_search_ads__ad_group_history_tmp", "checksum": {"name": "sha256", "checksum": "69317b26b7a3c109c0e5e61d7fdad053cb0549479a0dfdacd0d67ff0757cc97e"}, "tags": [], "refs": [], "sources": [["apple_search_ads", "ad_group_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/tmp/stg_apple_search_ads__ad_group_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.358804, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`apple_search_ads_integration_tests`.`ad_group_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_history_tmp`"}, "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('ad_group_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.apple_search_ads_source.apple_search_ads.ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "tmp", "stg_apple_search_ads__ad_group_report_tmp"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "tmp/stg_apple_search_ads__ad_group_report_tmp.sql", "original_file_path": "models/tmp/stg_apple_search_ads__ad_group_report_tmp.sql", "name": "stg_apple_search_ads__ad_group_report_tmp", "alias": "stg_apple_search_ads__ad_group_report_tmp", "checksum": {"name": "sha256", "checksum": "91089253c95dee7d0aea3f9b8cc49cf343c2d06acf0de36641ebaef03e1d2b1b"}, "tags": [], "refs": [], "sources": [["apple_search_ads", "ad_group_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/tmp/stg_apple_search_ads__ad_group_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.364688, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`apple_search_ads_integration_tests`.`ad_group_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_report_tmp`"}, "model.apple_search_ads_source.stg_apple_search_ads__ad_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('ad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.apple_search_ads_source.apple_search_ads.ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "tmp", "stg_apple_search_ads__ad_history_tmp"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__ad_history_tmp", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "tmp/stg_apple_search_ads__ad_history_tmp.sql", "original_file_path": "models/tmp/stg_apple_search_ads__ad_history_tmp.sql", "name": "stg_apple_search_ads__ad_history_tmp", "alias": "stg_apple_search_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "7b184af2299b7d42defa4606467cf9bf379e10cec768bf1e5825c040dbdfacb8"}, "tags": [], "refs": [], "sources": [["apple_search_ads", "ad_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/tmp/stg_apple_search_ads__ad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.370574, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`apple_search_ads_integration_tests`.`ad_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_history_tmp`"}, "model.apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('campaign_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.apple_search_ads_source.apple_search_ads.campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "tmp", "stg_apple_search_ads__campaign_report_tmp"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "tmp/stg_apple_search_ads__campaign_report_tmp.sql", "original_file_path": "models/tmp/stg_apple_search_ads__campaign_report_tmp.sql", "name": "stg_apple_search_ads__campaign_report_tmp", "alias": "stg_apple_search_ads__campaign_report_tmp", "checksum": {"name": "sha256", "checksum": "ae8d95be0097305356d0ba251d324d35bbe367edcf342c958f69fea9f89625f2"}, "tags": [], "refs": [], "sources": [["apple_search_ads", "campaign_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/tmp/stg_apple_search_ads__campaign_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.377901, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`apple_search_ads_integration_tests`.`campaign_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_report_tmp`"}, "model.apple_search_ads_source.stg_apple_search_ads__organization_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('organization') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.apple_search_ads_source.apple_search_ads.organization"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "tmp", "stg_apple_search_ads__organization_tmp"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__organization_tmp", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "tmp/stg_apple_search_ads__organization_tmp.sql", "original_file_path": "models/tmp/stg_apple_search_ads__organization_tmp.sql", "name": "stg_apple_search_ads__organization_tmp", "alias": "stg_apple_search_ads__organization_tmp", "checksum": {"name": "sha256", "checksum": "4a62af784e819ec6034aa89fe16019f027c9994b192426e70bcf18bda3d117a9"}, "tags": [], "refs": [], "sources": [["apple_search_ads", "organization"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/tmp/stg_apple_search_ads__organization_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.3838332, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`apple_search_ads_integration_tests`.`organization_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization_tmp`"}, "model.apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('keyword_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.apple_search_ads_source.apple_search_ads.keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "tmp", "stg_apple_search_ads__keyword_report_tmp"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "tmp/stg_apple_search_ads__keyword_report_tmp.sql", "original_file_path": "models/tmp/stg_apple_search_ads__keyword_report_tmp.sql", "name": "stg_apple_search_ads__keyword_report_tmp", "alias": "stg_apple_search_ads__keyword_report_tmp", "checksum": {"name": "sha256", "checksum": "5009b770850f4f2648d5498a78b1491e6a44250d9ac2d7c08c249e8624f517f2"}, "tags": [], "refs": [], "sources": [["apple_search_ads", "keyword_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/tmp/stg_apple_search_ads__keyword_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.389687, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`apple_search_ads_integration_tests`.`keyword_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_report_tmp`"}, "model.apple_search_ads_source.stg_apple_search_ads__ad_report_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__apple_search_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('ad_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.apple_search_ads_source.apple_search_ads.ad_level_report"]}, "config": {"enabled": true, "alias": null, "schema": "apple_search_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_apple_search_ads_source", "fqn": ["apple_search_ads_source", "tmp", "stg_apple_search_ads__ad_report_tmp"], "unique_id": "model.apple_search_ads_source.stg_apple_search_ads__ad_report_tmp", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "tmp/stg_apple_search_ads__ad_report_tmp.sql", "original_file_path": "models/tmp/stg_apple_search_ads__ad_report_tmp.sql", "name": "stg_apple_search_ads__ad_report_tmp", "alias": "stg_apple_search_ads__ad_report_tmp", "checksum": {"name": "sha256", "checksum": "1744a47e20045a53726079456f5aba358e0292dd8a14d670e6ab7b2c30ece7ee"}, "tags": [], "refs": [], "sources": [["apple_search_ads", "ad_level_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/tmp/stg_apple_search_ads__ad_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "apple_search_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.39555, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`apple_search_ads_integration_tests`.`ad_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_report_tmp`"}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__pin_promotion_history_tmp') }}\n), \n\nfields as (\n\n    select\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__pin_promotion_history_tmp')),\n                staging_columns=get_pin_promotion_history_columns()\n            )\n        }}\n    from base\n), \n\nfinal as (\n\n    select\n        id as pin_promotion_id,\n        ad_group_id,\n        created_time as created_at,\n        destination_url,\n        {{ dbt_utils.split_part('destination_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('destination_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('destination_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_term') }} as utm_term,\n        name as pin_name,\n        pin_id,\n        status as pin_status,\n        creative_type,\n        _fivetran_synced\n    from fields\n), \n\nsurrogate_key as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_pin_promotion_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "stg_pinterest_ads__pin_promotion_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__pin_promotion_history.sql", "original_file_path": "models/stg_pinterest_ads__pin_promotion_history.sql", "name": "stg_pinterest_ads__pin_promotion_history", "alias": "stg_pinterest_ads__pin_promotion_history", "checksum": {"name": "sha256", "checksum": "e58d90c1bb7d29becd3d75c83d9739700ab06395c88512b82cb292411aa0b846"}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_history_tmp"], ["stg_pinterest_ads__pin_promotion_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a Pinterest Pin promotion.", "columns": {"pin_promotion_id": {"name": "pin_promotion_id", "description": "Pin promotion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Pin promotion ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Pin creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_url": {"name": "destination_url", "description": "Pin destination URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_name": {"name": "pin_name", "description": "Pin promotion name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_id": {"name": "pin_id", "description": "Original pin ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_status": {"name": "pin_status", "description": "The status of the Pin promotion. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "The creative type. \nOne of \"APP\", \"APP_VIDEO\", \"BOARD\", \"CAROUSEL\", \"CINEMATIC\", \"COMMERCE\", \"MAX_VIDEO\", \"NATIVE_VIDEO\", \"REGULAR\", \n\"SEARCH_PROMINENCE\", \"SEARCH_PROMINENCE_CAROUSEL\", \"SHOPPING\", \"SHOP_THE_PIN\", \"THIRD_PARTY\", or \"VIDEO\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether the record is the most recent version of the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__pin_promotion_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "table"}, "created_at": 1660323535.5774028, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_history_tmp`\n), \n\nfields as (\n\n    select\n\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    android_deep_link\n    \n , \n    cast(null as \n    string\n) as \n    \n    click_tracking_url\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    creative_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    destination_url\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ios_deep_link\n    \n , \n    cast(null as boolean) as \n    \n    is_pin_deleted\n    \n , \n    cast(null as boolean) as \n    \n    is_removable\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    pin_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    review_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    view_tracking_url\n    \n \n\n\n    from base\n), \n\nfinal as (\n\n    select\n        id as pin_promotion_id,\n        ad_group_id,\n        created_time as created_at,\n        destination_url,\n        \n\n  \n    split(\n        destination_url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        destination_url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_source,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        destination_url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_medium,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        destination_url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_campaign,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        destination_url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_content,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        destination_url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_term,\n        name as pin_name,\n        pin_id,\n        status as pin_status,\n        creative_type,\n        _fivetran_synced\n    from fields\n), \n\nsurrogate_key as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_history`"}, "model.pinterest_source.stg_pinterest_ads__keyword_report": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_pinterest_ads__keyword_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__keyword_report_tmp')),\n                staging_columns=get_keyword_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        date as date_day,\n        keyword_id,\n        pin_promotion_id,\n        ad_group_id,\n        ad_group_name,\n        ad_group_status,\n        campaign_id,\n        advertiser_id,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n\n        {% for metric in var('pinterest__keyword_report_passthrough_metrics',[]) %}\n            , {{ metric }}\n        {% endfor %}\n\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_keyword_report_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.pinterest_source.stg_pinterest_ads__keyword_report_tmp", "model.pinterest_source.stg_pinterest_ads__keyword_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "stg_pinterest_ads__keyword_report"], "unique_id": "model.pinterest_source.stg_pinterest_ads__keyword_report", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__keyword_report.sql", "original_file_path": "models/stg_pinterest_ads__keyword_report.sql", "name": "stg_pinterest_ads__keyword_report", "alias": "stg_pinterest_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "c91ccdc933830f32cd39e88713145bb31847fc659a848c3f064cf6470954e10c"}, "tags": [], "refs": [["stg_pinterest_ads__keyword_report_tmp"], ["stg_pinterest_ads__keyword_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of Keywords by ad group, campaign, and advertiser.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "Unique identifier of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of paid and earned impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of paid and earned clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__keyword_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "table"}, "created_at": 1660323535.6044102, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clickthrough_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clickthrough_2\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impression_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impression_2\n    \n , \n    cast(null as \n    string\n) as \n    \n    keyword_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    pin_promotion_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    spend_in_micro_dollar\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        date as date_day,\n        keyword_id,\n        pin_promotion_id,\n        ad_group_id,\n        ad_group_name,\n        ad_group_status,\n        campaign_id,\n        advertiser_id,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_report`"}, "model.pinterest_source.stg_pinterest_ads__ad_group_report": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_pinterest_ads__ad_group_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__ad_group_report_tmp')),\n                staging_columns=get_ad_group_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        ad_group_id,\n        ad_group_name,\n        ad_group_status,\n        campaign_id,\n        advertiser_id,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n\n        {% for metric in var('pinterest__ad_group_report_passthrough_metrics',[]) %}\n            , {{ metric }}\n        {% endfor %}\n\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_ad_group_report_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_report_tmp", "model.pinterest_source.stg_pinterest_ads__ad_group_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "stg_pinterest_ads__ad_group_report"], "unique_id": "model.pinterest_source.stg_pinterest_ads__ad_group_report", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__ad_group_report.sql", "original_file_path": "models/stg_pinterest_ads__ad_group_report.sql", "name": "stg_pinterest_ads__ad_group_report", "alias": "stg_pinterest_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "831a620b53cd2228cfb4d7f5bdd9ad85631972d6049b263d3e15234d84ae3e18"}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_report_tmp"], ["stg_pinterest_ads__ad_group_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Pinterest Ad Groups by campaign and advertiser.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of paid and earned impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of paid and earned clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__ad_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "table"}, "created_at": 1660323535.5841658, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clickthrough_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clickthrough_2\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impression_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impression_2\n    \n , \n    cast(null as \n    int64\n) as \n    \n    spend_in_micro_dollar\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        ad_group_id,\n        ad_group_name,\n        ad_group_status,\n        campaign_id,\n        advertiser_id,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_report`"}, "model.pinterest_source.stg_pinterest_ads__campaign_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__campaign_history_tmp') }}\n), \n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n    from base\n), \n\nfinal as (\n\n    select \n        id as campaign_id,\n        name as campaign_name,\n        advertiser_id,\n        status as campaign_status,\n        _fivetran_synced,\n        created_time as created_at\n    from fields\n),\n\nmost_recent as (\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect *\nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "stg_pinterest_ads__campaign_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__campaign_history", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__campaign_history.sql", "original_file_path": "models/stg_pinterest_ads__campaign_history.sql", "name": "stg_pinterest_ads__campaign_history", "alias": "stg_pinterest_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "dc5acb7c99056c415b7b7819b6054f15750b165179f7e55ab21afb705088b6eb"}, "tags": [], "refs": [["stg_pinterest_ads__campaign_history_tmp"], ["stg_pinterest_ads__campaign_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a Pinterest Campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Campaign creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the Campaign. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether the record is the most recent version of the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "table"}, "created_at": 1660323535.5700521, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_history_tmp`\n), \n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n    from base\n), \n\nfinal as (\n\n    select \n        id as campaign_id,\n        name as campaign_name,\n        advertiser_id,\n        status as campaign_status,\n        _fivetran_synced,\n        created_time as created_at\n    from fields\n),\n\nmost_recent as (\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect *\nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_history`"}, "model.pinterest_source.stg_pinterest_ads__advertiser_report": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_pinterest_ads__advertiser_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__advertiser_report_tmp')),\n                staging_columns=get_advertiser_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        advertiser_id,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n\n        {% for metric in var('pinterest__advertiser_report_passthrough_metrics',[]) %}\n            , {{ metric }}\n        {% endfor %}\n\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_advertiser_report_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_report_tmp", "model.pinterest_source.stg_pinterest_ads__advertiser_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "stg_pinterest_ads__advertiser_report"], "unique_id": "model.pinterest_source.stg_pinterest_ads__advertiser_report", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__advertiser_report.sql", "original_file_path": "models/stg_pinterest_ads__advertiser_report.sql", "name": "stg_pinterest_ads__advertiser_report", "alias": "stg_pinterest_ads__advertiser_report", "checksum": {"name": "sha256", "checksum": "03f1b3e5345e9e8b873f1c6e2b5d3b59148ec9df51694167a83bb69c1859e010"}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_report_tmp"], ["stg_pinterest_ads__advertiser_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of an Advertiser.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of paid and earned impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of paid and earned clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__advertiser_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "table"}, "created_at": 1660323535.592215, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clickthrough_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clickthrough_2\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impression_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impression_2\n    \n , \n    cast(null as \n    int64\n) as \n    \n    spend_in_micro_dollar\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        advertiser_id,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_report`"}, "model.pinterest_source.stg_pinterest_ads__advertiser_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_pinterest_ads__advertiser_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__advertiser_history_tmp')),\n                staging_columns=get_advertiser_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as advertiser_id,\n        name as advertiser_name,\n        status as advertiser_status,\n        billing_profile_status,\n        billing_type,\n        country,\n        created_time as created_at,\n        currency as currency_code,\n        merchant_id,\n        owner_user_id,\n        updated_time as updated_at\n    from fields\n),\n\nmost_recent as (\n    select\n        *,\n        row_number() over (partition by advertiser_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect *\nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_advertiser_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp", "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "stg_pinterest_ads__advertiser_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__advertiser_history", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__advertiser_history.sql", "original_file_path": "models/stg_pinterest_ads__advertiser_history.sql", "name": "stg_pinterest_ads__advertiser_history", "alias": "stg_pinterest_ads__advertiser_history", "checksum": {"name": "sha256", "checksum": "a735cb6bffb3302d2717a3133bb5e1989c3b174bd15b94631e4f62d67d2bc71e"}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_history_tmp"], ["stg_pinterest_ads__advertiser_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of an advertiser.", "columns": {"advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_status": {"name": "advertiser_status", "description": "Status of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_profile_status": {"name": "billing_profile_status", "description": "Status of the billing profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_type": {"name": "billing_type", "description": "The billing type of the advertiser. Will typically be CREDIT_CARD or INVOICE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country code where the advertiser is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when a record was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code which the advertiser is set up using.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "merchant_id": {"name": "merchant_id", "description": "Unique ID of the merchant associated with the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Unique identifier of the owner user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when a record was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether the record is the most recent version of the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__advertiser_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "table"}, "created_at": 1660323535.588727, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_profile_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    billing_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    country\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    merchant_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    owner_user_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_time\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as advertiser_id,\n        name as advertiser_name,\n        status as advertiser_status,\n        billing_profile_status,\n        billing_type,\n        country,\n        created_time as created_at,\n        currency as currency_code,\n        merchant_id,\n        owner_user_id,\n        updated_time as updated_at\n    from fields\n),\n\nmost_recent as (\n    select\n        *,\n        row_number() over (partition by advertiser_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect *\nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history`"}, "model.pinterest_source.stg_pinterest_ads__campaign_report": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_pinterest_ads__campaign_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__campaign_report_tmp')),\n                staging_columns=get_campaign_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        campaign_id,\n        campaign_name,\n        campaign_status,\n        advertiser_id,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n\n        {% for metric in var('pinterest__campaign_report_passthrough_metrics',[]) %}\n            , {{ metric }}\n        {% endfor %}\n\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_campaign_report_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_report_tmp", "model.pinterest_source.stg_pinterest_ads__campaign_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "stg_pinterest_ads__campaign_report"], "unique_id": "model.pinterest_source.stg_pinterest_ads__campaign_report", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__campaign_report.sql", "original_file_path": "models/stg_pinterest_ads__campaign_report.sql", "name": "stg_pinterest_ads__campaign_report", "alias": "stg_pinterest_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "6951407d8fc8c1e72020f1da5c8d36a746f7d5d4f9c20ed5592b75dec402d725"}, "tags": [], "refs": [["stg_pinterest_ads__campaign_report_tmp"], ["stg_pinterest_ads__campaign_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of Campaigns by advertiser.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of paid and earned impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of paid and earned clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "table"}, "created_at": 1660323535.595731, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_status\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clickthrough_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clickthrough_2\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impression_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impression_2\n    \n , \n    cast(null as \n    int64\n) as \n    \n    spend_in_micro_dollar\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        date as date_day,\n        campaign_id,\n        campaign_name,\n        campaign_status,\n        advertiser_id,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_report`"}, "model.pinterest_source.stg_pinterest_ads__keyword_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_pinterest_ads__keyword_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__keyword_history_tmp')),\n                staging_columns=get_keyword_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        id as keyword_id,\n        value as keyword_value,\n        _fivetran_id,\n        _fivetran_synced,\n        ad_group_id,\n        advertiser_id,\n        archived,\n        bid,\n        campaign_id,\n        match_type,\n        parent_type\n    from fields\n),\n\nmost_recent as (\n    select\n        *,\n        row_number() over (partition by keyword_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect *\nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_keyword_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.pinterest_source.stg_pinterest_ads__keyword_history_tmp", "model.pinterest_source.stg_pinterest_ads__keyword_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "stg_pinterest_ads__keyword_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__keyword_history", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__keyword_history.sql", "original_file_path": "models/stg_pinterest_ads__keyword_history.sql", "name": "stg_pinterest_ads__keyword_history", "alias": "stg_pinterest_ads__keyword_history", "checksum": {"name": "sha256", "checksum": "699cd5961a1e73f18759bc85f569a503a381173579b2aa02bc27e1e8ae33fefd"}, "tags": [], "refs": [["stg_pinterest_ads__keyword_history_tmp"], ["stg_pinterest_ads__keyword_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Keyword.", "columns": {"keyword_id": {"name": "keyword_id", "description": "Unique identifier of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_value": {"name": "keyword_value", "description": "The text value that makes upd the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_id": {"name": "_fivetran_id", "description": "The unique identifier of the record within the Fivetran synced table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived": {"name": "archived", "description": "Boolean indicating if the keyword is archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid": {"name": "bid", "description": "Bid amount set for the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "Type of match the keyword is tied to. Either Exact or Broad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_type": {"name": "parent_type", "description": "Identifier of what grain the parent type is. Ad group or campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether the record is the most recent version of the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__keyword_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "table"}, "created_at": 1660323535.600257, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as boolean) as \n    \n    archived\n    \n , \n    cast(null as \n    int64\n) as \n    \n    bid\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    match_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    parent_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    value\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as keyword_id,\n        value as keyword_value,\n        _fivetran_id,\n        _fivetran_synced,\n        ad_group_id,\n        advertiser_id,\n        archived,\n        bid,\n        campaign_id,\n        match_type,\n        parent_type\n    from fields\n),\n\nmost_recent as (\n    select\n        *,\n        row_number() over (partition by keyword_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect *\nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_history`"}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__pin_promotion_report_tmp') }}\n), \n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__pin_promotion_report_tmp')),\n                staging_columns=get_pin_promotion_report_columns()\n            )\n        }}\n    from base\n), \n\nfinal as (\n\n    select \n        date as date_day,\n        pin_promotion_id,\n        ad_group_id,\n        campaign_id,\n        advertiser_id,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n\n        {% for metric in var('pinterest__pin_promotion_report_passthrough_metrics',[]) %}\n            , {{ metric }}\n        {% endfor %}\n\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_pin_promotion_report_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "stg_pinterest_ads__pin_promotion_report"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__pin_promotion_report.sql", "original_file_path": "models/stg_pinterest_ads__pin_promotion_report.sql", "name": "stg_pinterest_ads__pin_promotion_report", "alias": "stg_pinterest_ads__pin_promotion_report", "checksum": {"name": "sha256", "checksum": "64a1d7976df9e9ee2f030affc190a3ca54469f80497c95b7d636abf3065c602a"}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report_tmp"], ["stg_pinterest_ads__pin_promotion_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Pinterest Pin promotion by ad group, campaign, and advertiser.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of paid and earned impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of paid and earned clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__pin_promotion_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "table"}, "created_at": 1660323535.580947, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_report_tmp`\n), \n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    clickthrough_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    clickthrough_2\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    impression_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    impression_2\n    \n , \n    cast(null as \n    string\n) as \n    \n    pin_promotion_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    spend_in_micro_dollar\n    \n \n\n\n    from base\n), \n\nfinal as (\n\n    select \n        date as date_day,\n        pin_promotion_id,\n        ad_group_id,\n        campaign_id,\n        advertiser_id,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_report`"}, "model.pinterest_source.stg_pinterest_ads__ad_group_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__ad_group_history_tmp') }}\n), \n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__ad_group_history_tmp')),\n                staging_columns=get_ad_group_history_columns()\n            )\n        }}\n    from base\n), \n\nfinal as (\n\n    select \n        id as ad_group_id,\n        name as ad_group_name,\n        status as ad_group_status,\n        _fivetran_synced,\n        campaign_id,\n        created_time as created_at,\n        end_time,\n        start_time\n    from fields\n),\n\nmost_recent as (\n    select\n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect *\nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_ad_group_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "stg_pinterest_ads__ad_group_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__ad_group_history", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__ad_group_history.sql", "original_file_path": "models/stg_pinterest_ads__ad_group_history.sql", "name": "stg_pinterest_ads__ad_group_history", "alias": "stg_pinterest_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "c84e7a8de947ba3bc3101e41f3ce4686265dc854469da158e839759dc2844303"}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_history_tmp"], ["stg_pinterest_ads__ad_group_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a Pinterest Ad Group.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "Ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Parent Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Ad group creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "The status of the Ad group. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Ad group start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "Ad group end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether the record is the most recent version of the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__ad_group_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "table"}, "created_at": 1660323535.5659158, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_history_tmp`\n), \n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    end_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n    from base\n), \n\nfinal as (\n\n    select \n        id as ad_group_id,\n        name as ad_group_name,\n        status as ad_group_status,\n        _fivetran_synced,\n        campaign_id,\n        created_time as created_at,\n        end_time,\n        start_time\n    from fields\n),\n\nmost_recent as (\n    select\n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect *\nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_history`"}, "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp": {"raw_sql": "select * \nfrom {{ var('advertiser_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.pinterest_source.pinterest_ads.advertiser_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__advertiser_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__advertiser_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__advertiser_history_tmp.sql", "name": "stg_pinterest_ads__advertiser_history_tmp", "alias": "stg_pinterest_ads__advertiser_history_tmp", "checksum": {"name": "sha256", "checksum": "60dc1039a40b4fd101ac71b52584219ef441b8f3231fab7270a1725731849343"}, "tags": [], "refs": [], "sources": [["pinterest_ads", "advertiser_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__advertiser_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "view"}, "created_at": 1660323532.562195, "compiled_sql": "select * \nfrom `dbt-package-testing`.`pinterest_ads`.`advertiser_history`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history_tmp`"}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp": {"raw_sql": "select *\nfrom {{ var('pin_promotion_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.pin_promotion_report_data"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__pin_promotion_report_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "name": "stg_pinterest_ads__pin_promotion_report_tmp", "alias": "stg_pinterest_ads__pin_promotion_report_tmp", "checksum": {"name": "sha256", "checksum": "18cfa5bd72f823f350eb4fd5f5400957cc628d66510236ca582e0186f4ed24f4"}, "tags": [], "refs": [["pin_promotion_report_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "view"}, "created_at": 1660323532.567869, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`pin_promotion_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_report_tmp`"}, "model.pinterest_source.stg_pinterest_ads__campaign_report_tmp": {"raw_sql": "select * \nfrom {{ var('campaign_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.pinterest_source.pinterest_ads.campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__campaign_report_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__campaign_report_tmp", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__campaign_report_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__campaign_report_tmp.sql", "name": "stg_pinterest_ads__campaign_report_tmp", "alias": "stg_pinterest_ads__campaign_report_tmp", "checksum": {"name": "sha256", "checksum": "5f611ed15f119a95ac9ba29f2463d1924782790c0678cfca4fd0f25aab4d4296"}, "tags": [], "refs": [], "sources": [["pinterest_ads", "campaign_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__campaign_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "view"}, "created_at": 1660323532.573323, "compiled_sql": "select * \nfrom `dbt-package-testing`.`pinterest_ads`.`campaign_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_report_tmp`"}, "model.pinterest_source.stg_pinterest_ads__advertiser_report_tmp": {"raw_sql": "select * \nfrom {{ var('advertiser_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.pinterest_source.pinterest_ads.advertiser_report"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__advertiser_report_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__advertiser_report_tmp", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__advertiser_report_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__advertiser_report_tmp.sql", "name": "stg_pinterest_ads__advertiser_report_tmp", "alias": "stg_pinterest_ads__advertiser_report_tmp", "checksum": {"name": "sha256", "checksum": "68f4f29d7cc41371c11bca9e1ac615df584965bb7be78dda187252b1893b6a17"}, "tags": [], "refs": [], "sources": [["pinterest_ads", "advertiser_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__advertiser_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "view"}, "created_at": 1660323532.5787342, "compiled_sql": "select * \nfrom `dbt-package-testing`.`pinterest_ads`.`advertiser_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_report_tmp`"}, "model.pinterest_source.stg_pinterest_ads__keyword_report_tmp": {"raw_sql": "select * \nfrom {{ var('keyword_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.pinterest_source.pinterest_ads.keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__keyword_report_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__keyword_report_tmp", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__keyword_report_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__keyword_report_tmp.sql", "name": "stg_pinterest_ads__keyword_report_tmp", "alias": "stg_pinterest_ads__keyword_report_tmp", "checksum": {"name": "sha256", "checksum": "180a05437502b97ae4654b06e70dee2f2324b4b80815c2be214cdc9cfcb4a99d"}, "tags": [], "refs": [], "sources": [["pinterest_ads", "keyword_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__keyword_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "view"}, "created_at": 1660323532.584874, "compiled_sql": "select * \nfrom `dbt-package-testing`.`pinterest_ads`.`keyword_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_report_tmp`"}, "model.pinterest_source.stg_pinterest_ads__ad_group_report_tmp": {"raw_sql": "select * \nfrom {{ var('ad_group_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.pinterest_source.pinterest_ads.ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__ad_group_report_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__ad_group_report_tmp", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__ad_group_report_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__ad_group_report_tmp.sql", "name": "stg_pinterest_ads__ad_group_report_tmp", "alias": "stg_pinterest_ads__ad_group_report_tmp", "checksum": {"name": "sha256", "checksum": "7302e33164e446b0631e0dda341de8949d3ead51adddb6ba93fbda32b00449e2"}, "tags": [], "refs": [], "sources": [["pinterest_ads", "ad_group_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__ad_group_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "view"}, "created_at": 1660323532.5903099, "compiled_sql": "select * \nfrom `dbt-package-testing`.`pinterest_ads`.`ad_group_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_report_tmp`"}, "model.pinterest_source.stg_pinterest_ads__keyword_history_tmp": {"raw_sql": "select * \nfrom {{ var('keyword_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.pinterest_source.pinterest_ads.keyword_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__keyword_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__keyword_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__keyword_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__keyword_history_tmp.sql", "name": "stg_pinterest_ads__keyword_history_tmp", "alias": "stg_pinterest_ads__keyword_history_tmp", "checksum": {"name": "sha256", "checksum": "beb1849e58089e1dbb21b3eca90782b48e6de96d5df38693417b91488ac622b1"}, "tags": [], "refs": [], "sources": [["pinterest_ads", "keyword_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__keyword_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "view"}, "created_at": 1660323532.595708, "compiled_sql": "select * \nfrom `dbt-package-testing`.`pinterest_ads`.`keyword_history`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_history_tmp`"}, "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__campaign_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__campaign_history_tmp.sql", "name": "stg_pinterest_ads__campaign_history_tmp", "alias": "stg_pinterest_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "ea41c8d4ba83ff540a5f38f481cbd17406e99954f8b9b7b086ac94203a8dd6bd"}, "tags": [], "refs": [["campaign_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "view"}, "created_at": 1660323532.601126, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_history_tmp`"}, "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp": {"raw_sql": "select *\nfrom {{ var('ad_group_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.ad_group_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__ad_group_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "name": "stg_pinterest_ads__ad_group_history_tmp", "alias": "stg_pinterest_ads__ad_group_history_tmp", "checksum": {"name": "sha256", "checksum": "23726e9b019c8268e9aaae828c6c1430685538bef615e52f2c17436dd3615dfa"}, "tags": [], "refs": [["ad_group_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "view"}, "created_at": 1660323532.6073558, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`ad_group_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_history_tmp`"}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp": {"raw_sql": "select *\nfrom {{ var('pin_promotion_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.pin_promotion_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_pinterest_source", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__pin_promotion_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "name": "stg_pinterest_ads__pin_promotion_history_tmp", "alias": "stg_pinterest_ads__pin_promotion_history_tmp", "checksum": {"name": "sha256", "checksum": "065bd24ab667bb3742cf11e3d96295c4c78ecdc04bb4d86a8bfa521482c55e71"}, "tags": [], "refs": [["pin_promotion_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest_source", "materialized": "view"}, "created_at": 1660323532.612728, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`pin_promotion_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_history_tmp`"}, "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_tiktok_ads__campaign_report_hourly_tmp') }}\n), \n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_tiktok_ads__campaign_report_hourly_tmp')),\n                staging_columns=get_campaign_report_hourly_columns()\n            )\n        }}\n        \n        {% for metric in var('tiktok_ads__campaign_hourly_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n\n    from base\n), \n\nfinal as (\n\n    select  \n        campaign_id,\n        cast(stat_time_hour as {{ dbt_utils.type_timestamp() }}) as stat_time_hour,\n        cpc, \n        cpm,\n        ctr, \n        impressions, \n        clicks, \n        spend, \n        reach,\n        conversion, \n        cost_per_conversion, \n        conversion_rate, \n        likes, \n        comments, \n        shares, \n        profile_visits,\n        follows, \n        video_play_actions, \n        video_watched_2_s, \n        video_watched_6_s, \n        video_views_p_25, \n        video_views_p_50,\n        video_views_p_75,  \n        average_video_play, \n        average_video_play_per_user\n\n        {{ fivetran_utils.fill_pass_through_columns('tiktok_ads__campaign_hourly_passthrough_metrics') }}\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.tiktok_ads_source.get_campaign_report_hourly_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly_tmp", "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "stg_tiktok_ads__campaign_report_hourly"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "stg_tiktok_ads__campaign_report_hourly.sql", "original_file_path": "models/stg_tiktok_ads__campaign_report_hourly.sql", "name": "stg_tiktok_ads__campaign_report_hourly", "alias": "stg_tiktok_ads__campaign_report_hourly", "checksum": {"name": "sha256", "checksum": "64b3c1360dd75718c2fd3098ddf8c99af44a82ec0947a025f7b4025cad56c143"}, "tags": [], "refs": [["stg_tiktok_ads__campaign_report_hourly_tmp"], ["stg_tiktok_ads__campaign_report_hourly_tmp"]], "sources": [], "metrics": [], "description": "Each record represent data for each campaign for each hour.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Campaign id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stat_time_hour": {"name": "stat_time_hour", "description": "Hour of activity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_conversion": {"name": "cost_per_conversion", "description": "The average amount of money you've spent on a conversion.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpc": {"name": "cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_play_actions": {"name": "video_play_actions", "description": "The number of times your video starts to play. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_rate": {"name": "conversion_rate", "description": "The percentage of results you received out of all the clicks of your ads.   (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of times your ads were on screen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.   As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns.  Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on your ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_1000_reached": {"name": "cost_per_1000_reached", "description": "The average cost to reach 1,000 unique users. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits_rate": {"name": "profile_visits_rate", "description": "The rate of profile visits per impression the paid ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play": {"name": "average_video_play", "description": "The average time your video was played per single video view, including any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play_per_user": {"name": "average_video_play_per_user", "description": "The average time per user your video was played per single video view, including any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits the ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpm": {"name": "cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctr": {"name": "ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of new followers that were gained within 1 day of a user seeing a paid ad. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The estimated total amount of money you've spent on your campaign, ad group or ad during its schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads_source://models/stg_tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads__campaign_report_hourly.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_tiktok_ads"}, "created_at": 1660323535.894945, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_report_hourly_tmp`\n), \n\nfields as (\n\n    select\n        \n    cast(null as \n    numeric\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    float64\n) as \n    \n    average_video_play\n    \n , \n    cast(null as \n    float64\n) as \n    \n    average_video_play_per_user\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    comments\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    conversion\n    \n , \n    cast(null as \n    float64\n) as \n    \n    conversion_rate\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cost_per_conversion\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cpc\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cpm\n    \n , \n    cast(null as \n    float64\n) as \n    \n    ctr\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    follows\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    likes\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    profile_visits\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    reach\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    shares\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    spend\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    stat_time_hour\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_play_actions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_views_p_25\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_views_p_50\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_views_p_75\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_watched_2_s\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_watched_6_s\n    \n \n\n\n        \n        \n\n    from base\n), \n\nfinal as (\n\n    select  \n        campaign_id,\n        cast(stat_time_hour as \n    timestamp\n) as stat_time_hour,\n        cpc, \n        cpm,\n        ctr, \n        impressions, \n        clicks, \n        spend, \n        reach,\n        conversion, \n        cost_per_conversion, \n        conversion_rate, \n        likes, \n        comments, \n        shares, \n        profile_visits,\n        follows, \n        video_play_actions, \n        video_watched_2_s, \n        video_watched_6_s, \n        video_views_p_25, \n        video_views_p_50,\n        video_views_p_75,  \n        average_video_play, \n        average_video_play_per_user\n\n        \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_report_hourly`"}, "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_tiktok_ads__ad_group_report_hourly_tmp') }}\n), \n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_tiktok_ads__ad_group_report_hourly_tmp')),\n                staging_columns=get_ad_group_report_hourly_columns()\n            )\n        }}\n        \n        {% for metric in var('tiktok_ads__ad_group_hourly_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n\n    from base\n), \n\nfinal as (\n\n    select  \n        adgroup_id as ad_group_id,\n        cast(stat_time_hour as {{ dbt_utils.type_timestamp() }}) as stat_time_hour, \n        cpc, \n        cpm, \n        ctr, \n        impressions, \n        clicks, \n        spend, \n        reach, \n        conversion, \n        cost_per_conversion, \n        conversion_rate, \n        likes, \n        comments, \n        shares, \n        profile_visits,\n        follows, \n        video_play_actions, \n        video_watched_2_s, \n        video_watched_6_s, \n        video_views_p_25, \n        video_views_p_50,\n        video_views_p_75,  \n        average_video_play, \n        average_video_play_per_user\n\n        {{ fivetran_utils.fill_pass_through_columns('tiktok_ads__ad_group_hourly_passthrough_metrics') }}\n    from fields\n) \n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.tiktok_ads_source.get_ad_group_report_hourly_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly_tmp", "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "stg_tiktok_ads__ad_group_report_hourly"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "stg_tiktok_ads__ad_group_report_hourly.sql", "original_file_path": "models/stg_tiktok_ads__ad_group_report_hourly.sql", "name": "stg_tiktok_ads__ad_group_report_hourly", "alias": "stg_tiktok_ads__ad_group_report_hourly", "checksum": {"name": "sha256", "checksum": "4a549ea7c4f8d9590b7b82be4f2e7b7ea0aee47d0deafa4b41d0cb6b1b3140fc"}, "tags": [], "refs": [["stg_tiktok_ads__ad_group_report_hourly_tmp"], ["stg_tiktok_ads__ad_group_report_hourly_tmp"]], "sources": [], "metrics": [], "description": "Each record represents data for each ad group for each hour.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "Ad group id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stat_time_hour": {"name": "stat_time_hour", "description": "Hour of activity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_conversion": {"name": "cost_per_conversion", "description": "The average amount of money you've spent on a conversion.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpc": {"name": "cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_play_actions": {"name": "video_play_actions", "description": "The number of times your video starts to play. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_rate": {"name": "conversion_rate", "description": "The percentage of results you received out of all the clicks of your ads.   (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of times your ads were on screen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.   As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns.  Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on your ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_1000_reached": {"name": "cost_per_1000_reached", "description": "The average cost to reach 1,000 unique users. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits_rate": {"name": "profile_visits_rate", "description": "The rate of profile visits per impression the paid ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play": {"name": "average_video_play", "description": "The average time your video was played per single video view, including any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play_per_user": {"name": "average_video_play_per_user", "description": "The average time per user your video was played per single video view, including any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits the ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpm": {"name": "cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctr": {"name": "ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of new followers that were gained within 1 day of a user seeing a paid ad. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The estimated total amount of money you've spent on your campaign, ad group or ad during its schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads_source://models/stg_tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads__ad_group_report_hourly.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_tiktok_ads"}, "created_at": 1660323535.8846989, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_report_hourly_tmp`\n), \n\nfields as (\n\n    select\n        \n    cast(null as \n    numeric\n) as \n    \n    adgroup_id\n    \n , \n    cast(null as \n    float64\n) as \n    \n    average_video_play\n    \n , \n    cast(null as \n    float64\n) as \n    \n    average_video_play_per_user\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    comments\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    conversion\n    \n , \n    cast(null as \n    float64\n) as \n    \n    conversion_rate\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cost_per_conversion\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cpc\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cpm\n    \n , \n    cast(null as \n    float64\n) as \n    \n    ctr\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    follows\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    likes\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    profile_visits\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    reach\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    shares\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    spend\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    stat_time_hour\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_play_actions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_views_p_25\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_views_p_50\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_views_p_75\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_watched_2_s\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_watched_6_s\n    \n \n\n\n        \n        \n\n    from base\n), \n\nfinal as (\n\n    select  \n        adgroup_id as ad_group_id,\n        cast(stat_time_hour as \n    timestamp\n) as stat_time_hour, \n        cpc, \n        cpm, \n        ctr, \n        impressions, \n        clicks, \n        spend, \n        reach, \n        conversion, \n        cost_per_conversion, \n        conversion_rate, \n        likes, \n        comments, \n        shares, \n        profile_visits,\n        follows, \n        video_play_actions, \n        video_watched_2_s, \n        video_watched_6_s, \n        video_views_p_25, \n        video_views_p_50,\n        video_views_p_75,  \n        average_video_play, \n        average_video_play_per_user\n\n        \n\n\n\n\n    from fields\n) \n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_report_hourly`"}, "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_tiktok_ads__ad_group_history_tmp') }}\n), \n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_tiktok_ads__ad_group_history_tmp')),\n                staging_columns=get_ad_group_history_columns()\n            )\n        }}\n\n    from base\n), \n\nfinal as (\n\n    select\n        adgroup_id as ad_group_id,\n        cast(updated_at as {{ dbt_utils.type_timestamp() }}) as updated_at,\n        advertiser_id,\n        campaign_id,\n        action_days,\n        action_categories,\n        adgroup_name as ad_group_name,\n        age,\n        audience_type,\n        budget,\n        category,\n        display_name,\n        interest_category_v_2 as interest_category,\n        frequency,\n        frequency_schedule,\n        gender,\n        languages, \n        landing_page_url\n    from fields\n), \n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.tiktok_ads_source.get_ad_group_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history_tmp", "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "stg_tiktok_ads__ad_group_history"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "stg_tiktok_ads__ad_group_history.sql", "original_file_path": "models/stg_tiktok_ads__ad_group_history.sql", "name": "stg_tiktok_ads__ad_group_history", "alias": "stg_tiktok_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "9175d821a78b78d0aa0a1d79455563d95dd7ef8276aa6fb986257d4c4acd0a36"}, "tags": [], "refs": [["stg_tiktok_ads__ad_group_history_tmp"], ["stg_tiktok_ads__ad_group_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents data for each ad group.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "Ad group ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Time the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_categories": {"name": "action_categories", "description": "IDs of the action categories (behaviors) that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The Ad group's campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_days": {"name": "action_days", "description": "Action days", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name. Character limit is 512 and cannot contain emoji.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "age": {"name": "age", "description": "Age groups you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "audience_type": {"name": "audience_type", "description": "Audience Type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget": {"name": "budget", "description": "Ad budget. Returns 0.0 when Campaign Budget Optimization (budget_optimize_switch) is on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Ad group category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "Display name of ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interest_category": {"name": "interest_category", "description": "Interest classification. If the interest is specified, users that do not meet interest target will be excluded during delivery.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency": {"name": "frequency", "description": "frequency, together with frequency_schedule, controls how often people see your ad (only available for REACH ads).  For example, frequency = 2 frequency_schedule = 3 means \"show ads no more than twice every 3 day\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency_schedule": {"name": "frequency_schedule", "description": "frequency, together with frequency, controls how often people see your ad (only available for REACH ads).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_url": {"name": "landing_page_url", "description": "Landing page URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "languages": {"name": "languages", "description": "Codes of the languages that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Whether record is the most recent one for this particular grain.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads_source://models/stg_tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads__ad_group_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_tiktok_ads"}, "created_at": 1660323535.8545852, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_history_tmp`\n), \n\nfields as (\n\n    select\n        \n    cast(null as \n    numeric\n) as \n    \n    action_days\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    adgroup_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    adgroup_name\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    audience_type\n    \n , \n    cast(null as \n    float64\n) as \n    \n    budget\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    category\n    \n , \n    cast(null as \n    string\n) as \n    \n    display_name\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    frequency\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    frequency_schedule\n    \n , \n    cast(null as \n    string\n) as \n    \n    gender\n    \n , \n    cast(null as \n    string\n) as \n    \n    landing_page_url\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    interest_category_v_2\n    \n , \n    cast(null as \n    string\n) as \n    \n    action_categories\n    \n , \n    cast(null as \n    string\n) as \n    \n    age\n    \n , \n    cast(null as \n    string\n) as \n    \n    languages\n    \n \n\n\n\n    from base\n), \n\nfinal as (\n\n    select\n        adgroup_id as ad_group_id,\n        cast(updated_at as \n    timestamp\n) as updated_at,\n        advertiser_id,\n        campaign_id,\n        action_days,\n        action_categories,\n        adgroup_name as ad_group_name,\n        age,\n        audience_type,\n        budget,\n        category,\n        display_name,\n        interest_category_v_2 as interest_category,\n        frequency,\n        frequency_schedule,\n        gender,\n        languages, \n        landing_page_url\n    from fields\n), \n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_history`"}, "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_tiktok_ads__ad_report_hourly_tmp') }}\n), \n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_tiktok_ads__ad_report_hourly_tmp')),\n                staging_columns=get_ad_report_hourly_columns()\n            )\n        }}\n        \n        {% for metric in var('tiktok_ads__ad_hourly_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n\n    from base\n), \n\nfinal as (\n\n    select  \n        ad_id, \n        cast(stat_time_hour as {{ dbt_utils.type_timestamp() }}) as stat_time_hour, \n        cpc, \n        cpm, \n        ctr, \n        impressions, \n        clicks, \n        spend, \n        reach, \n        conversion, \n        cost_per_conversion, \n        conversion_rate, \n        likes, \n        comments, \n        shares, \n        profile_visits,\n        follows, \n        video_play_actions, \n        video_watched_2_s, \n        video_watched_6_s, \n        video_views_p_25, \n        video_views_p_50,\n        video_views_p_75,  \n        average_video_play, \n        average_video_play_per_user\n\n        {{ fivetran_utils.fill_pass_through_columns('tiktok_ads__ad_hourly_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.tiktok_ads_source.get_ad_report_hourly_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly_tmp", "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "stg_tiktok_ads__ad_report_hourly"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "stg_tiktok_ads__ad_report_hourly.sql", "original_file_path": "models/stg_tiktok_ads__ad_report_hourly.sql", "name": "stg_tiktok_ads__ad_report_hourly", "alias": "stg_tiktok_ads__ad_report_hourly", "checksum": {"name": "sha256", "checksum": "4917a69b65ea3b1552bf40c9b93957f750d4b6e59827d1ec9df02ff9181a83f7"}, "tags": [], "refs": [["stg_tiktok_ads__ad_report_hourly_tmp"], ["stg_tiktok_ads__ad_report_hourly_tmp"]], "sources": [], "metrics": [], "description": "Each record represents data for each ad for each hour.", "columns": {"ad_id": {"name": "ad_id", "description": "Ad id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stat_time_hour": {"name": "stat_time_hour", "description": "Hour of activity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_conversion": {"name": "cost_per_conversion", "description": "The average amount of money you've spent on a conversion.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpc": {"name": "cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_play_actions": {"name": "video_play_actions", "description": "The number of times your video starts to play. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_rate": {"name": "conversion_rate", "description": "The percentage of results you received out of all the clicks of your ads.   (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of times your ads were on screen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.   As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns.  Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on your ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_1000_reached": {"name": "cost_per_1000_reached", "description": "The average cost to reach 1,000 unique users. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits_rate": {"name": "profile_visits_rate", "description": "The rate of profile visits per impression the paid ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play": {"name": "average_video_play", "description": "The average time your video was played per single video view, including any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play_per_user": {"name": "average_video_play_per_user", "description": "The average time per user your video was played per single video view, including any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits the ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpm": {"name": "cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctr": {"name": "ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of new followers that were gained within 1 day of a user seeing a paid ad. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The estimated total amount of money you've spent on your campaign, ad group or ad during its schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads_source://models/stg_tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads__ad_report_hourly.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_tiktok_ads"}, "created_at": 1660323535.875498, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_report_hourly_tmp`\n), \n\nfields as (\n\n    select\n        \n    cast(null as \n    numeric\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    float64\n) as \n    \n    average_video_play\n    \n , \n    cast(null as \n    float64\n) as \n    \n    average_video_play_per_user\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    comments\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    conversion\n    \n , \n    cast(null as \n    float64\n) as \n    \n    conversion_rate\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cost_per_conversion\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cpc\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cpm\n    \n , \n    cast(null as \n    float64\n) as \n    \n    ctr\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    follows\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    likes\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    profile_visits\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    reach\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    shares\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    spend\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    stat_time_hour\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_play_actions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_views_p_25\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_views_p_50\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_views_p_75\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_watched_2_s\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_watched_6_s\n    \n \n\n\n        \n        \n\n    from base\n), \n\nfinal as (\n\n    select  \n        ad_id, \n        cast(stat_time_hour as \n    timestamp\n) as stat_time_hour, \n        cpc, \n        cpm, \n        ctr, \n        impressions, \n        clicks, \n        spend, \n        reach, \n        conversion, \n        cost_per_conversion, \n        conversion_rate, \n        likes, \n        comments, \n        shares, \n        profile_visits,\n        follows, \n        video_play_actions, \n        video_watched_2_s, \n        video_watched_6_s, \n        video_views_p_25, \n        video_views_p_50,\n        video_views_p_75,  \n        average_video_play, \n        average_video_play_per_user\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_report_hourly`"}, "model.tiktok_ads_source.stg_tiktok_ads__advertiser": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_tiktok_ads__advertiser_tmp') }}\n), \n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_tiktok_ads__advertiser_tmp')),\n                staging_columns=get_advertiser_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select   \n        id as advertiser_id, \n        address, \n        balance, \n        company, \n        contacter, \n        country, \n        currency, \n        description, \n        email, \n        industry, \n        language,\n        name as advertiser_name, \n        phone_number, \n        telephone, \n        timezone\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.tiktok_ads_source.get_advertiser_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__advertiser_tmp", "model.tiktok_ads_source.stg_tiktok_ads__advertiser_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "stg_tiktok_ads__advertiser"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__advertiser", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "stg_tiktok_ads__advertiser.sql", "original_file_path": "models/stg_tiktok_ads__advertiser.sql", "name": "stg_tiktok_ads__advertiser", "alias": "stg_tiktok_ads__advertiser", "checksum": {"name": "sha256", "checksum": "300666e61406b8816159808ea46adfc61484cf4f9e46a171255e6f7db94bd8f5"}, "tags": [], "refs": [["stg_tiktok_ads__advertiser_tmp"], ["stg_tiktok_ads__advertiser_tmp"]], "sources": [], "metrics": [], "description": "Each record represents data for each advertiser.", "columns": {"advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address": {"name": "address", "description": "Advertiser address information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Account available balance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "Advertiser's company name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contacter": {"name": "contacter", "description": "Contact Person", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The advertiser's country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "create_time": {"name": "create_time", "description": "Advertiser's create time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Type of currency used by advertisers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Brand description, i.e. promotional content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Advertiser contact email, desensitised data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry": {"name": "industry", "description": "Advertiser industry category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "Language used by advertisers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "license_no": {"name": "license_no", "description": "License number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "license_url": {"name": "license_url", "description": "License preview address, the link is valid for an hour by default.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "Advertiser name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Contact mobile number, desensitised data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "telephone": {"name": "telephone", "description": "Fixed phone number, desensitised data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Ad account time zone including GMT offset", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads_source://models/stg_tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads__advertiser.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_tiktok_ads"}, "created_at": 1660323535.848311, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__advertiser_tmp`\n), \n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    address\n    \n , \n    cast(null as \n    float64\n) as \n    \n    balance\n    \n , \n    cast(null as \n    string\n) as \n    \n    company\n    \n , \n    cast(null as \n    string\n) as \n    \n    contacter\n    \n , \n    cast(null as \n    string\n) as \n    \n    country\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency\n    \n , \n    cast(null as \n    string\n) as \n    \n    description\n    \n , \n    cast(null as \n    string\n) as \n    \n    email\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    industry\n    \n , \n    cast(null as \n    string\n) as \n    \n    language\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    phone_number\n    \n , \n    cast(null as \n    string\n) as \n    \n    telephone\n    \n , \n    cast(null as \n    string\n) as \n    \n    timezone\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select   \n        id as advertiser_id, \n        address, \n        balance, \n        company, \n        contacter, \n        country, \n        currency, \n        description, \n        email, \n        industry, \n        language,\n        name as advertiser_name, \n        phone_number, \n        telephone, \n        timezone\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__advertiser`"}, "model.tiktok_ads_source.stg_tiktok_ads__ad_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_tiktok_ads__ad_history_tmp') }}\n), \n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_tiktok_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n\n    from base\n), \n\nfinal as (\n\n    select  \n        ad_id,\n        cast(updated_at as {{ dbt_utils.type_timestamp() }}) as updated_at,\n        adgroup_id as ad_group_id,\n        advertiser_id,\n        campaign_id,\n        ad_name,\n        call_to_action,\n        click_tracking_url,\n        impression_tracking_url,\n        {{ dbt_utils.split_part('landing_page_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('landing_page_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('landing_page_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('landing_page_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('landing_page_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('landing_page_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('landing_page_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('landing_page_url', 'utm_term') }} as utm_term,\n        landing_page_url\n    from fields\n), \n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.tiktok_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_history_tmp", "model.tiktok_ads_source.stg_tiktok_ads__ad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "stg_tiktok_ads__ad_history"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__ad_history", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "stg_tiktok_ads__ad_history.sql", "original_file_path": "models/stg_tiktok_ads__ad_history.sql", "name": "stg_tiktok_ads__ad_history", "alias": "stg_tiktok_ads__ad_history", "checksum": {"name": "sha256", "checksum": "8d980a128704aea99662ccd2b8face0d3290e428948cee76a082aaea2d43cc64"}, "tags": [], "refs": [["stg_tiktok_ads__ad_history_tmp"], ["stg_tiktok_ads__ad_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents data for each ad.", "columns": {"ad_id": {"name": "ad_id", "description": "Ad ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Time the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `landing page url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Ad Name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_to_action": {"name": "call_to_action", "description": "Call to action values.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_tracking_url": {"name": "click_tracking_url", "description": "Click monitoring URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_tracking_url": {"name": "impression_tracking_url", "description": "Display monitoring URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_url": {"name": "landing_page_url", "description": "Landing page URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `landing_page_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `landing_page_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `landing_page_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `landing_page_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `landing_page_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `landing_page_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `landing_page_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Whether record is the most recent one for this particular grain.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads_source://models/stg_tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads__ad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_tiktok_ads"}, "created_at": 1660323535.862875, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_history_tmp`\n), \n\nfields as (\n\n    select\n        \n    cast(null as \n    numeric\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_name\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    adgroup_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    call_to_action\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    click_tracking_url\n    \n , \n    cast(null as \n    string\n) as \n    \n    impression_tracking_url\n    \n , \n    cast(null as \n    string\n) as \n    \n    landing_page_url\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n\n    from base\n), \n\nfinal as (\n\n    select  \n        ad_id,\n        cast(updated_at as \n    timestamp\n) as updated_at,\n        adgroup_id as ad_group_id,\n        advertiser_id,\n        campaign_id,\n        ad_name,\n        call_to_action,\n        click_tracking_url,\n        impression_tracking_url,\n        \n\n  \n    split(\n        landing_page_url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        landing_page_url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        landing_page_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        landing_page_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        landing_page_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        landing_page_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        landing_page_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        landing_page_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        landing_page_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        landing_page_url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_source,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        landing_page_url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_medium,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        landing_page_url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_campaign,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        landing_page_url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_content,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        landing_page_url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_term,\n        landing_page_url\n    from fields\n), \n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_history`"}, "model.tiktok_ads_source.stg_tiktok_ads__campaign_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_tiktok_ads__campaign_history_tmp') }}\n), \n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_tiktok_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n), \n\nfinal as (\n\n    select   \n        campaign_id,\n        cast(updated_at as {{ dbt_utils.type_timestamp() }}) as updated_at,\n        advertiser_id,\n        campaign_name,\n        campaign_type,\n        split_test_variable\n    from fields\n), \n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect *\nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.tiktok_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_history_tmp", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "stg_tiktok_ads__campaign_history"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__campaign_history", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "stg_tiktok_ads__campaign_history.sql", "original_file_path": "models/stg_tiktok_ads__campaign_history.sql", "name": "stg_tiktok_ads__campaign_history", "alias": "stg_tiktok_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "73897ed9f3908f8885dfb0cc7e9a445de78226ea87e51b6ecc8a314825189561"}, "tags": [], "refs": [["stg_tiktok_ads__campaign_history_tmp"], ["stg_tiktok_ads__campaign_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents data for each campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Campaign ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Time the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "Campaign Type, indicates the campaign is a regular campaign or iOS 14 campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "split_test_variable": {"name": "split_test_variable", "description": "Split Test variables. Optional values; TARGETING, BIDDING_OPTIMIZATION , CREATIVE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Whether record is the most recent one for this particular grain.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tiktok_ads_source://models/stg_tiktok_ads.yml", "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_tiktok_ads"}, "created_at": 1660323535.865686, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_history_tmp`\n), \n\nfields as (\n\n    select\n        \n    cast(null as \n    numeric\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    split_test_variable\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n), \n\nfinal as (\n\n    select   \n        campaign_id,\n        cast(updated_at as \n    timestamp\n) as updated_at,\n        advertiser_id,\n        campaign_name,\n        campaign_type,\n        split_test_variable\n    from fields\n), \n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by updated_at desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect *\nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_history`"}, "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly_tmp": {"raw_sql": "select *\nfrom {{ var('ad_report_hourly') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.tiktok_ad_report_hourly_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "tmp", "stg_tiktok_ads__ad_report_hourly_tmp"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly_tmp", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "tmp/stg_tiktok_ads__ad_report_hourly_tmp.sql", "original_file_path": "models/tmp/stg_tiktok_ads__ad_report_hourly_tmp.sql", "name": "stg_tiktok_ads__ad_report_hourly_tmp", "alias": "stg_tiktok_ads__ad_report_hourly_tmp", "checksum": {"name": "sha256", "checksum": "a487182a6ea56715aff4fb53a16e8e185223097096f8b06c53beeaf354bffb3f"}, "tags": [], "refs": [["tiktok_ad_report_hourly_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/tmp/stg_tiktok_ads__ad_report_hourly_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_tiktok_ads"}, "created_at": 1660323532.830251, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_ad_report_hourly_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_report_hourly_tmp`"}, "model.tiktok_ads_source.stg_tiktok_ads__ad_history_tmp": {"raw_sql": "select *\nfrom {{ var('ad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.tiktok_ad_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "tmp", "stg_tiktok_ads__ad_history_tmp"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__ad_history_tmp", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "tmp/stg_tiktok_ads__ad_history_tmp.sql", "original_file_path": "models/tmp/stg_tiktok_ads__ad_history_tmp.sql", "name": "stg_tiktok_ads__ad_history_tmp", "alias": "stg_tiktok_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "a57ca2d986b3dbad7d2bbd8b0a0dd7c992c25bc5cda65daee19e3541f40b6890"}, "tags": [], "refs": [["tiktok_ad_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/tmp/stg_tiktok_ads__ad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_tiktok_ads"}, "created_at": 1660323532.8369322, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_ad_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_history_tmp`"}, "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history_tmp": {"raw_sql": "select *\nfrom {{ var('ad_group_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.tiktok_adgroup_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "tmp", "stg_tiktok_ads__ad_group_history_tmp"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history_tmp", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "tmp/stg_tiktok_ads__ad_group_history_tmp.sql", "original_file_path": "models/tmp/stg_tiktok_ads__ad_group_history_tmp.sql", "name": "stg_tiktok_ads__ad_group_history_tmp", "alias": "stg_tiktok_ads__ad_group_history_tmp", "checksum": {"name": "sha256", "checksum": "b3d1b8772b0465ed063cfa1f77cb9384475c21fa4ac9f970065e3da5c327ad1a"}, "tags": [], "refs": [["tiktok_adgroup_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/tmp/stg_tiktok_ads__ad_group_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_tiktok_ads"}, "created_at": 1660323532.8432798, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_adgroup_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_history_tmp`"}, "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_report_hourly') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.tiktok_campaign_report_hourly_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "tmp", "stg_tiktok_ads__campaign_report_hourly_tmp"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly_tmp", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "tmp/stg_tiktok_ads__campaign_report_hourly_tmp.sql", "original_file_path": "models/tmp/stg_tiktok_ads__campaign_report_hourly_tmp.sql", "name": "stg_tiktok_ads__campaign_report_hourly_tmp", "alias": "stg_tiktok_ads__campaign_report_hourly_tmp", "checksum": {"name": "sha256", "checksum": "198e8d143514167295dfe352776c5050850cb7bc60e46b122a6a0a0da08a14ce"}, "tags": [], "refs": [["tiktok_campaign_report_hourly_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/tmp/stg_tiktok_ads__campaign_report_hourly_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_tiktok_ads"}, "created_at": 1660323532.8490539, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_campaign_report_hourly_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_report_hourly_tmp`"}, "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly_tmp": {"raw_sql": "select *\nfrom {{ var('ad_group_hourly') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.tiktok_adgroup_report_hourly_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "tmp", "stg_tiktok_ads__ad_group_report_hourly_tmp"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly_tmp", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "tmp/stg_tiktok_ads__ad_group_report_hourly_tmp.sql", "original_file_path": "models/tmp/stg_tiktok_ads__ad_group_report_hourly_tmp.sql", "name": "stg_tiktok_ads__ad_group_report_hourly_tmp", "alias": "stg_tiktok_ads__ad_group_report_hourly_tmp", "checksum": {"name": "sha256", "checksum": "187c3f6f290dd9846646843a108714a51fff1700c838c4c7e58852db64a1edfd"}, "tags": [], "refs": [["tiktok_adgroup_report_hourly_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/tmp/stg_tiktok_ads__ad_group_report_hourly_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_tiktok_ads"}, "created_at": 1660323532.854663, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_adgroup_report_hourly_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_report_hourly_tmp`"}, "model.tiktok_ads_source.stg_tiktok_ads__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.tiktok_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "tmp", "stg_tiktok_ads__campaign_history_tmp"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__campaign_history_tmp", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "tmp/stg_tiktok_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_tiktok_ads__campaign_history_tmp.sql", "name": "stg_tiktok_ads__campaign_history_tmp", "alias": "stg_tiktok_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "d695c134485444137d663f41732085a5cfa81de49f3ec2676e9f8e58f1c62c02"}, "tags": [], "refs": [["tiktok_campaign_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/tmp/stg_tiktok_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_tiktok_ads"}, "created_at": 1660323532.8624032, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_history_tmp`"}, "model.tiktok_ads_source.stg_tiktok_ads__advertiser_tmp": {"raw_sql": "select *\nfrom {{ var('advertiser') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.tiktok_advertiser_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_tiktok_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_stg_tiktok_ads", "fqn": ["tiktok_ads_source", "tmp", "stg_tiktok_ads__advertiser_tmp"], "unique_id": "model.tiktok_ads_source.stg_tiktok_ads__advertiser_tmp", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "tmp/stg_tiktok_ads__advertiser_tmp.sql", "original_file_path": "models/tmp/stg_tiktok_ads__advertiser_tmp.sql", "name": "stg_tiktok_ads__advertiser_tmp", "alias": "stg_tiktok_ads__advertiser_tmp", "checksum": {"name": "sha256", "checksum": "2806a63477df7962ac6a4476e3e514a47ae56470e95f490e88b58696a99c2fcf"}, "tags": [], "refs": [["tiktok_advertiser_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/tmp/stg_tiktok_ads__advertiser_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_tiktok_ads"}, "created_at": 1660323532.8680792, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`tiktok_advertiser_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__advertiser_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__basic_ad": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__basic_ad_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__basic_ad_tmp')),\n                staging_columns=get_basic_ad_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(ad_id as {{ dbt_utils.type_bigint() }}) as ad_id,\n        ad_name,\n        adset_name as ad_set_name,\n        date as date_day,\n        cast(account_id as {{ dbt_utils.type_bigint() }}) as account_id,\n        impressions,\n        coalesce(inline_link_clicks,0) as clicks,\n        spend,\n        reach,\n        frequency\n\n        {{ fivetran_utils.fill_pass_through_columns('facebook_ads__basic_ad_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_basic_ad_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_bigint", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "stg_facebook_ads__basic_ad"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__basic_ad", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__basic_ad.sql", "original_file_path": "models/stg_facebook_ads__basic_ad.sql", "name": "stg_facebook_ads__basic_ad", "alias": "stg_facebook_ads__basic_ad", "checksum": {"name": "sha256", "checksum": "d831e56799b6ad74e33a5d7f977a602494c2f9d5dd5208f8e0c7dbd099b86b45"}, "tags": [], "refs": [["stg_facebook_ads__basic_ad_tmp"], ["stg_facebook_ads__basic_ad_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of an ad in Facebook.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Name of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "Name of the ad set the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the reported performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of people who saw any content from your Page or about your Page. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency": {"name": "frequency", "description": "The average number of times each person saw your ad; it is calculated as impressions divided by reach.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__basic_ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.989272, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    adset_name\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    int64\n) as \n    \n    inline_link_clicks\n    \n , \n    cast(null as \n    float64\n) as \n    \n    spend\n    \n , \n    cast(null as \n    int64\n) as \n    \n    reach\n    \n , \n    cast(null as \n    float64\n) as \n    \n    frequency\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(ad_id as \n    int64\n) as ad_id,\n        ad_name,\n        adset_name as ad_set_name,\n        date as date_day,\n        cast(account_id as \n    int64\n) as account_id,\n        impressions,\n        coalesce(inline_link_clicks,0) as clicks,\n        spend,\n        reach,\n        frequency\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad`"}, "model.facebook_ads_source.stg_facebook_ads__creative_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__creative_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        cast(id as {{ dbt_utils.type_bigint() }}) as creative_id,\n        cast(account_id as {{ dbt_utils.type_bigint() }}) as account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_bigint"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "stg_facebook_ads__creative_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__creative_history", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__creative_history.sql", "original_file_path": "models/stg_facebook_ads__creative_history.sql", "name": "stg_facebook_ads__creative_history", "alias": "stg_facebook_ads__creative_history", "checksum": {"name": "sha256", "checksum": "c6fe833085d58ff2d99e096a37af1567c55e115cd2027bd18fea4bf075a7d207"}, "tags": [], "refs": [["stg_facebook_ads__creative_history_tmp"], ["stg_facebook_ads__creative_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table reflects a Facebook creative.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique record identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "Unique ID for an ad creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Ad account ID for the account this ad creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "Name of this ad creative as seen in the ad account's library.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_tags": {"name": "url_tags", "description": "A set of query string parameters which will replace or be appended to urls clicked from page post ads, message of the post, and canvas app install creatives only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Indicates whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_link": {"name": "page_link", "description": "Link for the page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_page_link": {"name": "template_page_link", "description": "URL destination of Facebook dynamic ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_feed_spec_link_urls": {"name": "asset_feed_spec_link_urls", "description": "Link to the asset feed spec", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_child_attachments": {"name": "object_story_link_data_child_attachments", "description": "Link of the object story child attachments", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_caption": {"name": "object_story_link_data_caption", "description": "Link of the object story caption", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_description": {"name": "object_story_link_data_description", "description": "Link of the object story description", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_link": {"name": "object_story_link_data_link", "description": "Link of the object story link", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_message": {"name": "object_story_link_data_message", "description": "Link of the object story message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ios": {"name": "template_app_link_spec_ios", "description": "Link of the object story spec for ios", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ipad": {"name": "template_app_link_spec_ipad", "description": "Link of the template app spec for ipad", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_android": {"name": "template_app_link_spec_android", "description": "Link of the template app for android", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_iphone": {"name": "template_app_link_spec_iphone", "description": "Link of the template app for iphone", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__creative_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.9858382, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__creative_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    page_link\n    \n , \n    cast(null as \n    string\n) as \n    \n    template_page_link\n    \n , \n    cast(null as \n    string\n) as \n    \n    url_tags\n    \n , \n    cast(null as \n    string\n) as \n    \n    asset_feed_spec_link_urls\n    \n , \n    cast(null as \n    string\n) as \n    \n    object_story_link_data_child_attachments\n    \n , \n    cast(null as \n    string\n) as \n    \n    object_story_link_data_caption\n    \n , \n    cast(null as \n    string\n) as \n    \n    object_story_link_data_description\n    \n , \n    cast(null as \n    string\n) as \n    \n    object_story_link_data_link\n    \n , \n    cast(null as \n    string\n) as \n    \n    object_story_link_data_message\n    \n , \n    cast(null as \n    string\n) as \n    \n    template_app_link_spec_android\n    \n , \n    cast(null as \n    string\n) as \n    \n    template_app_link_spec_ios\n    \n , \n    cast(null as \n    string\n) as \n    \n    template_app_link_spec_ipad\n    \n , \n    cast(null as \n    string\n) as \n    \n    template_app_link_spec_iphone\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        cast(id as \n    int64\n) as creative_id,\n        cast(account_id as \n    int64\n) as account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__creative_history`"}, "model.facebook_ads_source.stg_facebook_ads__campaign_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__campaign_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        updated_time as updated_at,\n        created_time as created_at,\n        cast(account_id as {{ dbt_utils.type_bigint() }}) as account_id,\n        cast(id as {{ dbt_utils.type_bigint() }}) as campaign_id,\n        name as campaign_name,\n        start_time as start_at,\n        stop_time as end_at,\n        status,\n        daily_budget,\n        lifetime_budget,\n        budget_remaining,\n        row_number() over (partition by id order by updated_time desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_bigint"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "stg_facebook_ads__campaign_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__campaign_history", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__campaign_history.sql", "original_file_path": "models/stg_facebook_ads__campaign_history.sql", "name": "stg_facebook_ads__campaign_history", "alias": "stg_facebook_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "94da6a989316561af0f55e34db3d2fa3f661b113b2aef18c7bd3199d6efaa819"}, "tags": [], "refs": [["stg_facebook_ads__campaign_history_tmp"], ["stg_facebook_ads__campaign_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table reflects a Facebook campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp of the last update of a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The time the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_at": {"name": "start_at", "description": "Timestamp of designated campaign start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_at": {"name": "end_at", "description": "Timestamp of designated campaign end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget": {"name": "daily_budget", "description": "Daily budget of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_remaining": {"name": "budget_remaining", "description": "Remaining budget of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifetime_budget": {"name": "lifetime_budget", "description": "Lifetime budget of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status values are - 'ACTIVE', 'PAUSED', 'DELETED', 'ARCHIVED'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.978367, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__campaign_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    updated_time\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    stop_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    int64\n) as \n    \n    daily_budget\n    \n , \n    cast(null as \n    int64\n) as \n    \n    lifetime_budget\n    \n , \n    cast(null as \n    float64\n) as \n    \n    budget_remaining\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        updated_time as updated_at,\n        created_time as created_at,\n        cast(account_id as \n    int64\n) as account_id,\n        cast(id as \n    int64\n) as campaign_id,\n        name as campaign_name,\n        start_time as start_at,\n        stop_time as end_at,\n        status,\n        daily_budget,\n        lifetime_budget,\n        budget_remaining,\n        row_number() over (partition by id order by updated_time desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__campaign_history`"}, "model.facebook_ads_source.stg_facebook_ads__account_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__account_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_bigint() }}) as account_id,\n        _fivetran_synced,\n        name as account_name,\n        account_status,\n        business_country_code,\n        created_time as created_at,\n        currency,\n        timezone_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_bigint"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "model.facebook_ads_source.stg_facebook_ads__account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "stg_facebook_ads__account_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__account_history", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__account_history.sql", "original_file_path": "models/stg_facebook_ads__account_history.sql", "name": "stg_facebook_ads__account_history", "alias": "stg_facebook_ads__account_history", "checksum": {"name": "sha256", "checksum": "ebad79f217e4917524a32c0c825e173162e34d2f8b570ed1c7eaf3fcccf9fd01"}, "tags": [], "refs": [["stg_facebook_ads__account_history_tmp"], ["stg_facebook_ads__account_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table reflects a Facebook ad account.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the ad account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_status": {"name": "account_status", "description": "Current status of account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_country_code": {"name": "business_country_code", "description": "Country code of business associated to account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The time account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency associated with account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone_name": {"name": "timezone_name", "description": "Timezone associated with account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.965659, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    account_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    business_country_code\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency\n    \n , \n    cast(null as \n    string\n) as \n    \n    timezone_name\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as account_id,\n        _fivetran_synced,\n        name as account_name,\n        account_status,\n        business_country_code,\n        created_time as created_at,\n        currency,\n        timezone_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history`"}, "model.facebook_ads_source.stg_facebook_ads__ad_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__ad_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        updated_time as updated_at,\n        cast(id as {{ dbt_utils.type_bigint() }}) as ad_id,\n        name as ad_name,\n        cast(account_id as {{ dbt_utils.type_bigint() }}) as account_id,\n        cast(ad_set_id as {{ dbt_utils.type_bigint() }}) as ad_set_id,   \n        cast(campaign_id as {{ dbt_utils.type_bigint() }}) as campaign_id,\n        cast(creative_id as {{ dbt_utils.type_bigint() }}) as creative_id,\n        row_number() over (partition by id order by updated_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_bigint"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "stg_facebook_ads__ad_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_history", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__ad_history.sql", "original_file_path": "models/stg_facebook_ads__ad_history.sql", "name": "stg_facebook_ads__ad_history", "alias": "stg_facebook_ads__ad_history", "checksum": {"name": "sha256", "checksum": "b09ee1eca3b5810bb34967118f276d923b4e76e3637326e2e586de9cfb99d48a"}, "tags": [], "refs": [["stg_facebook_ads__ad_history_tmp"], ["stg_facebook_ads__ad_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table reflects a Facebook ad.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "ID of the ad set that contains the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the ad creative to be used by this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Name of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp of the last update of a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__ad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.968655, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    updated_time\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    ad_set_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    creative_id\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        updated_time as updated_at,\n        cast(id as \n    int64\n) as ad_id,\n        name as ad_name,\n        cast(account_id as \n    int64\n) as account_id,\n        cast(ad_set_id as \n    int64\n) as ad_set_id,   \n        cast(campaign_id as \n    int64\n) as campaign_id,\n        cast(creative_id as \n    int64\n) as creative_id,\n        row_number() over (partition by id order by updated_time desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_history`"}, "model.facebook_ads_source.stg_facebook_ads__ad_set_history": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__ad_set_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__ad_set_history_tmp')),\n                staging_columns=get_ad_set_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        updated_time as updated_at,\n        cast(id as {{ dbt_utils.type_bigint() }}) as ad_set_id,\n        name as ad_set_name,\n        cast(account_id as {{ dbt_utils.type_bigint() }}) as account_id,\n        cast(campaign_id as {{ dbt_utils.type_bigint() }}) as campaign_id,\n        start_time as start_at,\n        end_time as end_at,\n        bid_strategy,\n        daily_budget,\n        budget_remaining,\n        status,\n        row_number() over (partition by id order by updated_time desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_ad_set_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_bigint"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "stg_facebook_ads__ad_set_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__ad_set_history.sql", "original_file_path": "models/stg_facebook_ads__ad_set_history.sql", "name": "stg_facebook_ads__ad_set_history", "alias": "stg_facebook_ads__ad_set_history", "checksum": {"name": "sha256", "checksum": "c606fe93d3421bff81293cc88b681087dce54c2e09e7eeffda5e5b8104915fec"}, "tags": [], "refs": [["stg_facebook_ads__ad_set_history_tmp"], ["stg_facebook_ads__ad_set_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table reflects a Facebook ad set.", "columns": {"ad_set_id": {"name": "ad_set_id", "description": "The ID of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad set belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp of the last update of a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_at": {"name": "start_at", "description": "Timestamp of designated ad set start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_at": {"name": "end_at", "description": "Timestamp of designated ad set end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_strategy": {"name": "bid_strategy", "description": "Bid strategy values are - 'LOWEST_COST_WITHOUT_CAP', 'LOWEST_COST_WITH_BID_CAP', 'COST_CAP', 'LOWEST_COST_WITH_MIN_ROAS'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget": {"name": "daily_budget", "description": "Daily budget of ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_remaining": {"name": "budget_remaining", "description": "Remaining budget of ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status values are - 'ACTIVE', 'PAUSED', 'DELETED', 'ARCHIVED'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__ad_set_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "table", "enabled": true}, "created_at": 1660323535.97364, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_set_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    updated_time\n    \n , \n    cast(null as \n    int64\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    end_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_strategy\n    \n , \n    cast(null as \n    int64\n) as \n    \n    daily_budget\n    \n , \n    cast(null as \n    int64\n) as \n    \n    budget_remaining\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        updated_time as updated_at,\n        cast(id as \n    int64\n) as ad_set_id,\n        name as ad_set_name,\n        cast(account_id as \n    int64\n) as account_id,\n        cast(campaign_id as \n    int64\n) as campaign_id,\n        start_time as start_at,\n        end_time as end_at,\n        bid_strategy,\n        daily_budget,\n        budget_remaining,\n        status,\n        row_number() over (partition by id order by updated_time desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_set_history`"}, "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('ad_set_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__ad_set_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__ad_set_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__ad_set_history_tmp.sql", "name": "stg_facebook_ads__ad_set_history_tmp", "alias": "stg_facebook_ads__ad_set_history_tmp", "checksum": {"name": "sha256", "checksum": "dad1782db9e8232b2613b5b9959963ad0d0ff99b7462524fc223610cd3e14442"}, "tags": [], "refs": [["facebook_ads_ad_set_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__ad_set_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.988503, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_ad_set_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_set_history_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('basic_ad') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__basic_ad_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__basic_ad_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__basic_ad_tmp.sql", "name": "stg_facebook_ads__basic_ad_tmp", "alias": "stg_facebook_ads__basic_ad_tmp", "checksum": {"name": "sha256", "checksum": "46e4ec682f4ed2b33b3123c24ae2b20d9d9bce50ed7ef83b547dd83b57339f89"}, "tags": [], "refs": [["facebook_ads_basic_ad_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__basic_ad_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323532.996278, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_basic_ad_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('ad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_ad_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__ad_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__ad_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__ad_history_tmp.sql", "name": "stg_facebook_ads__ad_history_tmp", "alias": "stg_facebook_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "438f57c6bd1ce2a8c4a73600c1e12878efc0a091f42b3a43ed0334067779eace"}, "tags": [], "refs": [["facebook_ads_ad_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__ad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323533.002452, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_ad_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_history_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__campaign_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__campaign_history_tmp.sql", "name": "stg_facebook_ads__campaign_history_tmp", "alias": "stg_facebook_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "617b7e683421a5712cc129d02e07eeb0f5876b7fdeb680429b4d6069b4dcdfc1"}, "tags": [], "refs": [["facebook_ads_campaign_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323533.0087721, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__campaign_history_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('creative_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_creative_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__creative_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__creative_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__creative_history_tmp.sql", "name": "stg_facebook_ads__creative_history_tmp", "alias": "stg_facebook_ads__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "9cf5ffb0bc31c525388d169c90fb8b6150e5141777b14337c0fee0730faeecd9"}, "tags": [], "refs": [["facebook_ads_creative_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__creative_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323533.016417, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_creative_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__creative_history_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled', True)) }}\n\nselect * \nfrom {{ var('account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_facebook_ads_source", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__account_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__account_history_tmp.sql", "name": "stg_facebook_ads__account_history_tmp", "alias": "stg_facebook_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "caa1f4a119ca187458bff00bd8682eabffdba914962ff8ae7d4cfe55f25833ff"}, "tags": [], "refs": [["facebook_ads_account_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_source", "materialized": "view", "enabled": true}, "created_at": 1660323533.0222652, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`facebook_ads_account_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history_tmp`"}, "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat_ads__ad_squad_hourly_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat_ads__ad_squad_hourly_report_tmp')),\n                staging_columns=get_ad_squad_hourly_report_columns()\n            )\n        }}\n        \n        {% for metric in var('snapchat_ads__ad_squad_hourly_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_squad_id,\n        cast (date as {{ dbt_utils.type_timestamp() }}) as date_hour,\n        attachment_quartile_1,\n        attachment_quartile_2,\n        attachment_quartile_3,\n        (attachment_total_view_time_millis / 1000000.0) as attachment_total_view_time,\n        attachment_view_completion,\n        quartile_1,\n        quartile_2,\n        quartile_3,\n        saves,\n        shares,\n        (screen_time_millis / 1000000.0) as screen_time,\n        video_views,\n        view_completion,\n        (view_time_millis / 1000000.0) as view_time,\n        impressions,\n        (spend / 1000000.0) as spend,\n        swipes\n\n        {{ fivetran_utils.fill_pass_through_columns('snapchat_ads__ad_squad_hourly_passthrough_metrics') }}\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_ad_squad_hourly_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "stg_snapchat_ads__ad_squad_hourly_report"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat_ads__ad_squad_hourly_report.sql", "original_file_path": "models/stg_snapchat_ads__ad_squad_hourly_report.sql", "name": "stg_snapchat_ads__ad_squad_hourly_report", "alias": "stg_snapchat_ads__ad_squad_hourly_report", "checksum": {"name": "sha256", "checksum": "f606ccb985aff5291a38ea3acdcd423bb1f4613bd793596e38b445e4b0fe4f3f"}, "tags": [], "refs": [["stg_snapchat_ads__ad_squad_hourly_report_tmp"], ["stg_snapchat_ads__ad_squad_hourly_report_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a historic version of an ad in Snapchat.", "columns": {"ad_squad_id": {"name": "ad_squad_id", "description": "ID of the ad squad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_hour": {"name": "date_hour", "description": "The hour that the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_1": {"name": "attachment_quartile_1", "description": "Number of times your Long Form Video was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_2": {"name": "attachment_quartile_2", "description": "Number of times your Long Form Video was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_3": {"name": "attachment_quartile_3", "description": "Number of times your Long Form Video was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_total_view_time": {"name": "attachment_total_view_time", "description": "Total time Snapchatters spent on the attachment (HH:MM:SS)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_view_completion": {"name": "attachment_view_completion", "description": "The number of times your Long Form Video was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_1": {"name": "quartile_1", "description": "The number of times your video ad was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_2": {"name": "quartile_2", "description": "The number of times your video ad was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_3": {"name": "quartile_3", "description": "The number of times your video ad was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of times a lens/filter was saved to Memories", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "Number of times a lens/filter was shared in a Chat or Story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "screen_time": {"name": "screen_time", "description": "The number of milli seconds spent watching your ad across all paid impressions. Screen time starts recording as soon as the media is fully rendered on the device and the autoplay video starts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "The number of times your video was watched at least 2 seconds or swiped up, whichever comes first", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_completion": {"name": "view_completion", "description": "The number of times your video ad was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_time": {"name": "view_time", "description": "The number of milli seconds spent watching your ad across all users reached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes for an ad in the hour of the record. Swipes are when your ad was swiped up on or the CTA was tapped to view the attachment below.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat_ads__ad_squad_hourly_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "table"}, "created_at": 1660323536.23934, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_hourly_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    ad_squad_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    attachment_quartile_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    attachment_quartile_2\n    \n , \n    cast(null as \n    int64\n) as \n    \n    attachment_quartile_3\n    \n , \n    cast(null as \n    int64\n) as \n    \n    attachment_total_view_time_millis\n    \n , \n    cast(null as \n    int64\n) as \n    \n    attachment_view_completion\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    int64\n) as \n    \n    quartile_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    quartile_2\n    \n , \n    cast(null as \n    int64\n) as \n    \n    quartile_3\n    \n , \n    cast(null as \n    int64\n) as \n    \n    saves\n    \n , \n    cast(null as \n    int64\n) as \n    \n    screen_time_millis\n    \n , \n    cast(null as \n    int64\n) as \n    \n    shares\n    \n , \n    cast(null as \n    int64\n) as \n    \n    spend\n    \n , \n    cast(null as \n    int64\n) as \n    \n    swipes\n    \n , \n    cast(null as \n    int64\n) as \n    \n    video_views\n    \n , \n    cast(null as \n    int64\n) as \n    \n    view_completion\n    \n , \n    cast(null as \n    int64\n) as \n    \n    view_time_millis\n    \n \n\n\n        \n        \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_squad_id,\n        cast (date as \n    timestamp\n) as date_hour,\n        attachment_quartile_1,\n        attachment_quartile_2,\n        attachment_quartile_3,\n        (attachment_total_view_time_millis / 1000000.0) as attachment_total_view_time,\n        attachment_view_completion,\n        quartile_1,\n        quartile_2,\n        quartile_3,\n        saves,\n        shares,\n        (screen_time_millis / 1000000.0) as screen_time,\n        video_views,\n        view_completion,\n        (view_time_millis / 1000000.0) as view_time,\n        impressions,\n        (spend / 1000000.0) as spend,\n        swipes\n\n        \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_hourly_report`"}, "model.snapchat_ads_source.stg_snapchat_ads__ad_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat_ads__ad_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_id,\n        name as ad_name,\n        cast (created_at as {{ dbt_utils.type_timestamp() }}) as created_at,\n        ad_squad_id,\n        creative_id,\n        cast (_fivetran_synced as {{ dbt_utils.type_timestamp() }}) as _fivetran_synced,\n        cast (updated_at as {{ dbt_utils.type_timestamp() }}) as updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__ad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "stg_snapchat_ads__ad_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__ad_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat_ads__ad_history.sql", "original_file_path": "models/stg_snapchat_ads__ad_history.sql", "name": "stg_snapchat_ads__ad_history", "alias": "stg_snapchat_ads__ad_history", "checksum": {"name": "sha256", "checksum": "92c51b9f79ab9704000bd4d1176b1bd853a2af478951b520f0213357aab5699f"}, "tags": [], "refs": [["stg_snapchat_ads__ad_history_tmp"], ["stg_snapchat_ads__ad_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a historic version of an ad in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_id": {"name": "ad_squad_id", "description": "The ID of the related ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat_ads__ad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "table"}, "created_at": 1660323536.217602, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_squad_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    creative_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_id,\n        name as ad_name,\n        cast (created_at as \n    timestamp\n) as created_at,\n        ad_squad_id,\n        creative_id,\n        cast (_fivetran_synced as \n    timestamp\n) as _fivetran_synced,\n        cast (updated_at as \n    timestamp\n) as updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_history`"}, "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat_ads__ad_squad_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat_ads__ad_squad_history_tmp')),\n                staging_columns=get_ad_squad_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select \n        id as ad_squad_id,\n        name as ad_squad_name,\n        cast (created_at as {{ dbt_utils.type_timestamp() }}) as created_at,\n        campaign_id,\n        cast (_fivetran_synced as {{ dbt_utils.type_timestamp() }}) as _fivetran_synced,\n        cast (updated_at as {{ dbt_utils.type_timestamp() }}) as updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_squad_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_ad_squad_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "stg_snapchat_ads__ad_squad_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat_ads__ad_squad_history.sql", "original_file_path": "models/stg_snapchat_ads__ad_squad_history.sql", "name": "stg_snapchat_ads__ad_squad_history", "alias": "stg_snapchat_ads__ad_squad_history", "checksum": {"name": "sha256", "checksum": "5f244c6df37440eaa17cab71edcbed0bf268c636234e1047e44239836a28ad04"}, "tags": [], "refs": [["stg_snapchat_ads__ad_squad_history_tmp"], ["stg_snapchat_ads__ad_squad_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a historic version of an ad squad in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_id": {"name": "ad_squad_id", "description": "The ID of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_name": {"name": "ad_squad_name", "description": "The name of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat_ads__ad_squad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "table"}, "created_at": 1660323536.2307289, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n    from base\n),\n\nfinal as (\n\n    select \n        id as ad_squad_id,\n        name as ad_squad_name,\n        cast (created_at as \n    timestamp\n) as created_at,\n        campaign_id,\n        cast (_fivetran_synced as \n    timestamp\n) as _fivetran_synced,\n        cast (updated_at as \n    timestamp\n) as updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_squad_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_history`"}, "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat_ads__ad_hourly_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat_ads__ad_hourly_report_tmp')),\n                staging_columns=get_ad_hourly_report_columns()\n            )\n        }}\n        \n        {% for metric in var('snapchat_ads__ad_hourly_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        cast (date as {{ dbt_utils.type_timestamp() }}) as date_hour,\n        attachment_quartile_1,\n        attachment_quartile_2,\n        attachment_quartile_3,\n        (attachment_total_view_time_millis / 1000000.0) as attachment_total_view_time,\n        attachment_view_completion,\n        quartile_1,\n        quartile_2,\n        quartile_3,\n        saves,\n        shares,\n        (screen_time_millis / 1000000.0) as screen_time,\n        video_views,\n        view_completion,\n        (view_time_millis / 1000000.0) as view_time,\n        impressions,\n        (spend / 1000000.0) as spend,\n        swipes\n\n        {{ fivetran_utils.fill_pass_through_columns('snapchat_ads__ad_hourly_passthrough_metrics') }}\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_ad_hourly_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp", "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "stg_snapchat_ads__ad_hourly_report"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat_ads__ad_hourly_report.sql", "original_file_path": "models/stg_snapchat_ads__ad_hourly_report.sql", "name": "stg_snapchat_ads__ad_hourly_report", "alias": "stg_snapchat_ads__ad_hourly_report", "checksum": {"name": "sha256", "checksum": "2aa4dcfe4d3d51e8bf783b517abf27edf458c832963a08aac59e882c1d2c711d"}, "tags": [], "refs": [["stg_snapchat_ads__ad_hourly_report_tmp"], ["stg_snapchat_ads__ad_hourly_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents an hourly performance summary for an ad in Snapchat.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad that the report relates to in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_hour": {"name": "date_hour", "description": "The hour that the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_1": {"name": "attachment_quartile_1", "description": "Number of times your Long Form Video was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_2": {"name": "attachment_quartile_2", "description": "Number of times your Long Form Video was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_3": {"name": "attachment_quartile_3", "description": "Number of times your Long Form Video was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_total_view_time": {"name": "attachment_total_view_time", "description": "Total time Snapchatters spent on the attachment (HH:MM:SS)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_view_completion": {"name": "attachment_view_completion", "description": "The number of times your Long Form Video was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_1": {"name": "quartile_1", "description": "The number of times your video ad was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_2": {"name": "quartile_2", "description": "The number of times your video ad was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_3": {"name": "quartile_3", "description": "The number of times your video ad was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of times a lens/filter was saved to Memories", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "Number of times a lens/filter was shared in a Chat or Story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "screen_time": {"name": "screen_time", "description": "The number of milli seconds spent watching your ad across all paid impressions. Screen time starts recording as soon as the media is fully rendered on the device and the autoplay video starts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "The number of times your video was watched at least 2 seconds or swiped up, whichever comes first", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_completion": {"name": "view_completion", "description": "The number of times your video ad was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_time": {"name": "view_time", "description": "The number of milli seconds spent watching your ad across all users reached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend for an ad in the hour of the record converted from micros.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat_ads__ad_hourly_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "table"}, "created_at": 1660323536.226784, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_hourly_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    attachment_quartile_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    attachment_quartile_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    attachment_quartile_3\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    attachment_total_view_time_millis\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    attachment_view_completion\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    quartile_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    quartile_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    quartile_3\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    saves\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    screen_time_millis\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    shares\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    spend\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    swipes\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_views\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    view_completion\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    view_time_millis\n    \n \n\n\n        \n        \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        cast (date as \n    timestamp\n) as date_hour,\n        attachment_quartile_1,\n        attachment_quartile_2,\n        attachment_quartile_3,\n        (attachment_total_view_time_millis / 1000000.0) as attachment_total_view_time,\n        attachment_view_completion,\n        quartile_1,\n        quartile_2,\n        quartile_3,\n        saves,\n        shares,\n        (screen_time_millis / 1000000.0) as screen_time,\n        video_views,\n        view_completion,\n        (view_time_millis / 1000000.0) as view_time,\n        impressions,\n        (spend / 1000000.0) as spend,\n        swipes\n\n        \n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_hourly_report`"}, "model.snapchat_ads_source.stg_snapchat_ads__creative_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat_ads__creative_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat_ads__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as creative_id,\n        cast (created_at as {{ dbt_utils.type_timestamp() }}) as created_at,\n        ad_account_id,\n        name as creative_name,\n        web_view_url as url,\n        cast (_fivetran_synced as {{ dbt_utils.type_timestamp() }}) as _fivetran_synced,\n        cast (updated_at as {{ dbt_utils.type_timestamp() }}) as updated_at\n    from fields\n), \n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by creative_id order by _fivetran_synced desc) =1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__creative_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "stg_snapchat_ads__creative_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__creative_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat_ads__creative_history.sql", "original_file_path": "models/stg_snapchat_ads__creative_history.sql", "name": "stg_snapchat_ads__creative_history", "alias": "stg_snapchat_ads__creative_history", "checksum": {"name": "sha256", "checksum": "c0f3ea02525639447a267a7e18dd41b9609222ce1f3e07780b3a561352e98045"}, "tags": [], "refs": [["stg_snapchat_ads__creative_history_tmp"], ["stg_snapchat_ads__creative_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a historic version of a creative in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "The name of the creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the related ad account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the creative if the creative is of type 'web view'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat_ads__creative_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "table"}, "created_at": 1660323536.255079, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_account_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    web_view_url\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as creative_id,\n        cast (created_at as \n    timestamp\n) as created_at,\n        ad_account_id,\n        name as creative_name,\n        web_view_url as url,\n        cast (_fivetran_synced as \n    timestamp\n) as _fivetran_synced,\n        cast (updated_at as \n    timestamp\n) as updated_at\n    from fields\n), \n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by creative_id order by _fivetran_synced desc) =1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history`"}, "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat_ads__creative_url_tag_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat_ads__creative_url_tag_history_tmp')),\n                staging_columns=get_creative_url_tag_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select  \n        creative_id,\n        key as param_key,\n        value as param_value,\n        cast (updated_at as {{ dbt_utils.type_timestamp() }}) as updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by creative_id, param_key order by updated_at desc) =1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_creative_url_tag_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "stg_snapchat_ads__creative_url_tag_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat_ads__creative_url_tag_history.sql", "original_file_path": "models/stg_snapchat_ads__creative_url_tag_history.sql", "name": "stg_snapchat_ads__creative_url_tag_history", "alias": "stg_snapchat_ads__creative_url_tag_history", "checksum": {"name": "sha256", "checksum": "26277c1397622dc7779ddf82118298d7d5277d1ed6f3877e9fd1c1ff6d2d177c"}, "tags": [], "refs": [["stg_snapchat_ads__creative_url_tag_history_tmp"], ["stg_snapchat_ads__creative_url_tag_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a URL paramter key-value pair for a creative in Snapchat.", "columns": {"creative_id": {"name": "creative_id", "description": "The ID of the related creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "param_key": {"name": "param_key", "description": "The URL parameter key, i.e. UTM_SOURCE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "param_value": {"name": "param_value", "description": "The URL parameter value, i.e. Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat_ads__creative_url_tag_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "table"}, "created_at": 1660323536.2578208, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    string\n) as \n    \n    creative_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    key\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    value\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select  \n        creative_id,\n        key as param_key,\n        value as param_value,\n        cast (updated_at as \n    timestamp\n) as updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by creative_id, param_key order by updated_at desc) =1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history`"}, "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat_ads__ad_account_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat_ads__ad_account_history_tmp')),\n                staging_columns=get_ad_account_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_account_id,\n        name as ad_account_name,\n        cast (created_at as {{ dbt_utils.type_timestamp() }}) as created_at,\n        advertiser, \n        currency,\n        timezone,\n        cast (_fivetran_synced as {{ dbt_utils.type_timestamp() }}) as _fivetran_synced,\n        cast (updated_at as {{ dbt_utils.type_timestamp() }}) as updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_account_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_ad_account_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "stg_snapchat_ads__ad_account_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat_ads__ad_account_history.sql", "original_file_path": "models/stg_snapchat_ads__ad_account_history.sql", "name": "stg_snapchat_ads__ad_account_history", "alias": "stg_snapchat_ads__ad_account_history", "checksum": {"name": "sha256", "checksum": "5aa8392b13bd140fb8468b772c0686c41f4ec5c97f67358fb08bf1d161bdd693"}, "tags": [], "refs": [["stg_snapchat_ads__ad_account_history_tmp"], ["stg_snapchat_ads__ad_account_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a historic version of an ad account in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser": {"name": "advertiser", "description": "Name of advertiser", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency used by account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Account timezone", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat_ads__ad_account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "table"}, "created_at": 1660323536.213401, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertiser\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    timezone\n    \n , \n    cast(null as \n    string\n) as \n    \n    type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_account_id,\n        name as ad_account_name,\n        cast (created_at as \n    timestamp\n) as created_at,\n        advertiser, \n        currency,\n        timezone,\n        cast (_fivetran_synced as \n    timestamp\n) as _fivetran_synced,\n        cast (updated_at as \n    timestamp\n) as updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_account_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history`"}, "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat_ads__campaign_hourly_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat_ads__campaign_hourly_report_tmp')),\n                staging_columns=get_campaign_hourly_report_columns()\n            )\n        }}\n\n        {% for metric in var('snapchat_ads__campaign_hourly_report_passthrough_metrics', []) %}\n        , {{ metric }}\n        {% endfor %}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        campaign_id,\n        cast (date as {{ dbt_utils.type_timestamp() }}) as date_hour,\n        attachment_quartile_1,\n        attachment_quartile_2,\n        attachment_quartile_3,\n        (attachment_total_view_time_millis / 1000000.0) as attachment_total_view_time,\n        attachment_view_completion,\n        quartile_1,\n        quartile_2,\n        quartile_3,\n        saves,\n        shares,\n        (screen_time_millis / 1000000.0) as screen_time,\n        video_views,\n        view_completion,\n        (view_time_millis / 1000000.0) as view_time,\n        impressions,\n        (spend / 1000000.0) as spend,\n        swipes\n\n        {{ fivetran_utils.fill_pass_through_columns('snapchat_ads__campaign_hourly_report_passthrough_metrics') }}\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_campaign_hourly_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp", "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "stg_snapchat_ads__campaign_hourly_report"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat_ads__campaign_hourly_report.sql", "original_file_path": "models/stg_snapchat_ads__campaign_hourly_report.sql", "name": "stg_snapchat_ads__campaign_hourly_report", "alias": "stg_snapchat_ads__campaign_hourly_report", "checksum": {"name": "sha256", "checksum": "a2f548701ab1217a391d17bbb5a44a9a050c4e8488ded0db2dcaf0cc20b3254d"}, "tags": [], "refs": [["stg_snapchat_ads__campaign_hourly_report_tmp"], ["stg_snapchat_ads__campaign_hourly_report_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a historic version of an ad in Snapchat.", "columns": {"campaign_id": {"name": "campaign_id", "description": "ID of campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_hour": {"name": "date_hour", "description": "The hour that the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_1": {"name": "attachment_quartile_1", "description": "Number of times your Long Form Video was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_2": {"name": "attachment_quartile_2", "description": "Number of times your Long Form Video was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_3": {"name": "attachment_quartile_3", "description": "Number of times your Long Form Video was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_total_view_time": {"name": "attachment_total_view_time", "description": "Total time Snapchatters spent on the attachment (HH:MM:SS)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_view_completion": {"name": "attachment_view_completion", "description": "The number of times your Long Form Video was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_1": {"name": "quartile_1", "description": "The number of times your video ad was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_2": {"name": "quartile_2", "description": "The number of times your video ad was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_3": {"name": "quartile_3", "description": "The number of times your video ad was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of times a lens/filter was saved to Memories", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "Number of times a lens/filter was shared in a Chat or Story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "screen_time": {"name": "screen_time", "description": "The number of milli seconds spent watching your ad across all paid impressions. Screen time starts recording as soon as the media is fully rendered on the device and the autoplay video starts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "The number of times your video was watched at least 2 seconds or swiped up, whichever comes first", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_completion": {"name": "view_completion", "description": "The number of times your video ad was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_time": {"name": "view_time", "description": "The number of milli seconds spent watching your ad across all users reached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes for an ad in the hour of the record. Swipes are when your ad was swiped up on or the CTA was tapped to view the attachment below.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat_ads__campaign_hourly_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "table"}, "created_at": 1660323536.251151, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_hourly_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    int64\n) as \n    \n    attachment_quartile_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    attachment_quartile_2\n    \n , \n    cast(null as \n    int64\n) as \n    \n    attachment_quartile_3\n    \n , \n    cast(null as \n    int64\n) as \n    \n    attachment_total_view_time_millis\n    \n , \n    cast(null as \n    int64\n) as \n    \n    attachment_view_completion\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    int64\n) as \n    \n    quartile_1\n    \n , \n    cast(null as \n    int64\n) as \n    \n    quartile_2\n    \n , \n    cast(null as \n    int64\n) as \n    \n    quartile_3\n    \n , \n    cast(null as \n    int64\n) as \n    \n    saves\n    \n , \n    cast(null as \n    int64\n) as \n    \n    screen_time_millis\n    \n , \n    cast(null as \n    int64\n) as \n    \n    shares\n    \n , \n    cast(null as \n    int64\n) as \n    \n    spend\n    \n , \n    cast(null as \n    int64\n) as \n    \n    swipes\n    \n , \n    cast(null as \n    int64\n) as \n    \n    video_views\n    \n , \n    cast(null as \n    int64\n) as \n    \n    view_completion\n    \n , \n    cast(null as \n    int64\n) as \n    \n    view_time_millis\n    \n \n\n\n\n        \n\n    from base\n),\n\nfinal as (\n    \n    select \n        campaign_id,\n        cast (date as \n    timestamp\n) as date_hour,\n        attachment_quartile_1,\n        attachment_quartile_2,\n        attachment_quartile_3,\n        (attachment_total_view_time_millis / 1000000.0) as attachment_total_view_time,\n        attachment_view_completion,\n        quartile_1,\n        quartile_2,\n        quartile_3,\n        saves,\n        shares,\n        (screen_time_millis / 1000000.0) as screen_time,\n        video_views,\n        view_completion,\n        (view_time_millis / 1000000.0) as view_time,\n        impressions,\n        (spend / 1000000.0) as spend,\n        swipes\n\n        \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_hourly_report`"}, "model.snapchat_ads_source.stg_snapchat_ads__campaign_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat_ads__campaign_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id,\n        ad_account_id,\n        cast (created_at as {{ dbt_utils.type_timestamp() }}) as created_at,\n        name as campaign_name,\n        cast (_fivetran_synced as {{ dbt_utils.type_timestamp() }}) as _fivetran_synced,\n        cast (updated_at as {{ dbt_utils.type_timestamp() }}) as updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "stg_snapchat_ads__campaign_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__campaign_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat_ads__campaign_history.sql", "original_file_path": "models/stg_snapchat_ads__campaign_history.sql", "name": "stg_snapchat_ads__campaign_history", "alias": "stg_snapchat_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "dd7c6f829d317dfe8002c20b885c15b940a4cef7dbe452ceb8a7f384bdbed652"}, "tags": [], "refs": [["stg_snapchat_ads__campaign_history_tmp"], ["stg_snapchat_ads__campaign_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table represents a historic version of a campaign in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The id of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the related ad account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "table"}, "created_at": 1660323536.243077, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_account_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id,\n        ad_account_id,\n        cast (created_at as \n    timestamp\n) as created_at,\n        name as campaign_name,\n        cast (_fivetran_synced as \n    timestamp\n) as _fivetran_synced,\n        cast (updated_at as \n    timestamp\n) as updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n)\n\nselect * \nfrom most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_history`"}, "model.snapchat_ads_source.stg_snapchat_ads__creative_history_tmp": {"raw_sql": "select *\nfrom {{ var('creative_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_creative_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat_ads__creative_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__creative_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat_ads__creative_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat_ads__creative_history_tmp.sql", "name": "stg_snapchat_ads__creative_history_tmp", "alias": "stg_snapchat_ads__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "0a9c48b8a93c4db4b87927959573fea6c2cb654b2c30967379d4e3682479c3b8"}, "tags": [], "refs": [["snapchat_creative_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat_ads__creative_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "view"}, "created_at": 1660323533.263972, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_creative_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history_tmp`"}, "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp": {"raw_sql": "select *\nfrom {{ var('ad_account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_ad_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat_ads__ad_account_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat_ads__ad_account_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat_ads__ad_account_history_tmp.sql", "name": "stg_snapchat_ads__ad_account_history_tmp", "alias": "stg_snapchat_ads__ad_account_history_tmp", "checksum": {"name": "sha256", "checksum": "e6790c0147705b7159975c1c01d679fdfcd3c5de7ff4cd3431731ec8c3f90a21"}, "tags": [], "refs": [["snapchat_ad_account_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat_ads__ad_account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "view"}, "created_at": 1660323533.2697222, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_ad_account_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history_tmp`"}, "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp": {"raw_sql": "select *\nfrom {{ var('ad_hourly_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat_ads__ad_hourly_report_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat_ads__ad_hourly_report_tmp.sql", "original_file_path": "models/tmp/stg_snapchat_ads__ad_hourly_report_tmp.sql", "name": "stg_snapchat_ads__ad_hourly_report_tmp", "alias": "stg_snapchat_ads__ad_hourly_report_tmp", "checksum": {"name": "sha256", "checksum": "ada621879f8b09feb33cff097c91bf81fb685a93dd515233f000bdda327461a5"}, "tags": [], "refs": [["snapchat_ad_hourly_report_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat_ads__ad_hourly_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "view"}, "created_at": 1660323533.2757308, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_ad_hourly_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_hourly_report_tmp`"}, "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp": {"raw_sql": "select *\nfrom {{ var('creative_url_tag_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat_ads__creative_url_tag_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat_ads__creative_url_tag_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat_ads__creative_url_tag_history_tmp.sql", "name": "stg_snapchat_ads__creative_url_tag_history_tmp", "alias": "stg_snapchat_ads__creative_url_tag_history_tmp", "checksum": {"name": "sha256", "checksum": "87a61306ff168f5d5fd4705f46c446be039e1f76b09e35e31a74a819de4349cd"}, "tags": [], "refs": [["snapchat_creative_url_tag_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat_ads__creative_url_tag_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "view"}, "created_at": 1660323533.2815511, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_creative_url_tag_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history_tmp`"}, "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp": {"raw_sql": "select *\nfrom {{ var('ad_squad_hourly_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snapchat_ads_source.snapchat_ads.ad_squad_hourly_report"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat_ads__ad_squad_hourly_report_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat_ads__ad_squad_hourly_report_tmp.sql", "original_file_path": "models/tmp/stg_snapchat_ads__ad_squad_hourly_report_tmp.sql", "name": "stg_snapchat_ads__ad_squad_hourly_report_tmp", "alias": "stg_snapchat_ads__ad_squad_hourly_report_tmp", "checksum": {"name": "sha256", "checksum": "5b0cde765a7f531bbc6462df0159f2d973d2f61cf2a224d2dd9bea259f33a0a3"}, "tags": [], "refs": [], "sources": [["snapchat_ads", "ad_squad_hourly_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat_ads__ad_squad_hourly_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "view"}, "created_at": 1660323533.288105, "compiled_sql": "select *\nfrom `dbt-package-testing`.`snapchat_ads`.`ad_squad_hourly_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_hourly_report_tmp`"}, "model.snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat_ads__campaign_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat_ads__campaign_history_tmp.sql", "name": "stg_snapchat_ads__campaign_history_tmp", "alias": "stg_snapchat_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "ea41c8d4ba83ff540a5f38f481cbd17406e99954f8b9b7b086ac94203a8dd6bd"}, "tags": [], "refs": [["snapchat_campaign_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "view"}, "created_at": 1660323533.294147, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_history_tmp`"}, "model.snapchat_ads_source.stg_snapchat_ads__ad_history_tmp": {"raw_sql": "select *\nfrom {{ var('ad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_ad_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat_ads__ad_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__ad_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat_ads__ad_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat_ads__ad_history_tmp.sql", "name": "stg_snapchat_ads__ad_history_tmp", "alias": "stg_snapchat_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "aa3abdf62d50f7b667d8ef9d491c587eb679dd227f031976e2cc6afe5504af9c"}, "tags": [], "refs": [["snapchat_ad_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat_ads__ad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "view"}, "created_at": 1660323533.299587, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_ad_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_history_tmp`"}, "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp": {"raw_sql": "select *\nfrom {{ var('ad_squad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat_ads__ad_squad_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat_ads__ad_squad_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat_ads__ad_squad_history_tmp.sql", "name": "stg_snapchat_ads__ad_squad_history_tmp", "alias": "stg_snapchat_ads__ad_squad_history_tmp", "checksum": {"name": "sha256", "checksum": "366649f1aa2282829d692d685f3790362d5339fa0869b6708677a77aab8fb991"}, "tags": [], "refs": [["snapchat_ad_squad_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat_ads__ad_squad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "view"}, "created_at": 1660323533.3051038, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`snapchat_ad_squad_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_history_tmp`"}, "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_hourly_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snapchat_ads_source.snapchat_ads.campaign_hourly_report"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_snapchat_ads_source", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat_ads__campaign_hourly_report_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat_ads__campaign_hourly_report_tmp.sql", "original_file_path": "models/tmp/stg_snapchat_ads__campaign_hourly_report_tmp.sql", "name": "stg_snapchat_ads__campaign_hourly_report_tmp", "alias": "stg_snapchat_ads__campaign_hourly_report_tmp", "checksum": {"name": "sha256", "checksum": "e4690c4a968a7ae7f7cb9e48f2303fe5fde3f816f5633984b587cc4d8916c02d"}, "tags": [], "refs": [], "sources": [["snapchat_ads", "campaign_hourly_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat_ads__campaign_hourly_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads_source", "materialized": "view"}, "created_at": 1660323533.311928, "compiled_sql": "select *\nfrom `dbt-package-testing`.`snapchat_ads`.`campaign_hourly_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_hourly_report_tmp`"}, "model.microsoft_ads.microsoft_ads__ad_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('ad_performance_daily_report') }}\n\n), \n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = True\n\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n\n), \n\njoined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_name,\n        ads.ad_id,\n        ads.type as ad_type,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='microsoft_ads__ad_passthrough_metrics', transform = 'sum') }}\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    {{ dbt_utils.group_by(14) }}\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__ad_report"], "unique_id": "model.microsoft_ads.microsoft_ads__ad_report", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__ad_report.sql", "original_file_path": "models/microsoft_ads__ad_report.sql", "name": "microsoft_ads__ad_report", "alias": "microsoft_ads__ad_report", "checksum": {"name": "sha256", "checksum": "b1bf923338efa02f90efd60b96c91cbdbe12414237459994b2aefc5067484985"}, "tags": [], "refs": [["stg_microsoft_ads__ad_daily_report"], ["stg_microsoft_ads__ad_history"], ["stg_microsoft_ads__ad_group_history"], ["stg_microsoft_ads__campaign_history"], ["stg_microsoft_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily clicks, impressions, spend (and if applicable other passthrough metrics) of ads  by ad, ad group, campaign, account, ad type, device os, device type, network and currency code.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the corresponding ad; `title_part_1` is used as the ad name as a proxy as one is not provided by the data source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_type": {"name": "ad_type", "description": "The ad type associated with this record; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/adtype?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table", "enabled": true}, "created_at": 1660323536.3722172, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_daily_report`\n\n), \n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_history`\n    where is_most_recent_record = True\n\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_history`\n    where is_most_recent_record = True\n\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history`\n    where is_most_recent_record = True\n\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history`\n    where is_most_recent_record = True\n\n), \n\njoined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_name,\n        ads.ad_id,\n        ads.type as ad_type,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__ad_report`"}, "model.microsoft_ads.microsoft_ads__ad_group_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('ad_group_performance_daily_report') }}\n\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n),\n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n),\n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n),\n\njoined as (\n\n    select\n        date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='microsoft_ads__ad_group_passthrough_metrics', transform = 'sum') }}\n    from report\n    left join accounts\n        on report.account_id = accounts.account_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    {{ dbt_utils.group_by(11)}}\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__ad_group_report"], "unique_id": "model.microsoft_ads.microsoft_ads__ad_group_report", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__ad_group_report.sql", "original_file_path": "models/microsoft_ads__ad_group_report.sql", "name": "microsoft_ads__ad_group_report", "alias": "microsoft_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "85070dccbdefbc4f56fe9f7e941913c0b5981e774816bbe6dfebf17979e5e49b"}, "tags": [], "refs": [["stg_microsoft_ads__ad_group_daily_report"], ["stg_microsoft_ads__ad_group_history"], ["stg_microsoft_ads__campaign_history"], ["stg_microsoft_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily clicks, impressions, spend (and if applicable other passthrough metrics) of ads  by ad group, campaign, account, device os, device type, network and currency code.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__ad_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table", "enabled": true}, "created_at": 1660323536.366433, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_daily_report`\n\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_history`\n    where is_most_recent_record = True\n),\n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history`\n    where is_most_recent_record = True\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history`\n    where is_most_recent_record = True\n),\n\njoined as (\n\n    select\n        date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n\n        \n\n\n\n\n    from report\n    left join accounts\n        on report.account_id = accounts.account_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    group by 1,2,3,4,5,6,7,8,9,10,11\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__ad_group_report`"}, "model.microsoft_ads.microsoft_ads__keyword_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('keyword_performance_daily_report') }}\n\n), \n\nkeywords as (\n\n    select *\n    from {{ var('keyword_history') }}\n    where is_most_recent_record = True\n),\n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = True\n\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n\n), \n\njoined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_name,\n        ads.ad_id,\n        keywords.keyword_name,\n        keywords.keyword_id,\n        keywords.match_type,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='microsoft_ads__keyword_passthrough_metrics', transform = 'sum') }}\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    left join keywords\n        on report.keyword_id = keywords.keyword_id\n    {{ dbt_utils.group_by(16) }}\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__keyword_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__keyword_report"], "unique_id": "model.microsoft_ads.microsoft_ads__keyword_report", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__keyword_report.sql", "original_file_path": "models/microsoft_ads__keyword_report.sql", "name": "microsoft_ads__keyword_report", "alias": "microsoft_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "d4ef7c4365c804fe1f79aa5f5f161ef6d279e6913e8fbc01433a0fb128aefd74"}, "tags": [], "refs": [["stg_microsoft_ads__keyword_daily_report"], ["stg_microsoft_ads__keyword_history"], ["stg_microsoft_ads__ad_history"], ["stg_microsoft_ads__ad_group_history"], ["stg_microsoft_ads__campaign_history"], ["stg_microsoft_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily clicks, impressions, spend (and if applicable other passthrough metrics) of ads  by keyword, ad, ad group, campaign, account, device os, device type, network and currency code.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the corresponding ad; `title_part_1` is used as the ad name as a proxy as one is not provided by the data source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_name": {"name": "keyword_name", "description": "The keyword(s) associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "The ID of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "The match type associated with this record; values contain but may not be limited to 'Broad', 'Exact', 'Phrase'. Please refer to Microsoft Ad's [documentation](https://help.ads.microsoft.com/#apex/ads/en/50822/1).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__keyword_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table", "enabled": true}, "created_at": 1660323536.383928, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_daily_report`\n\n), \n\nkeywords as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_history`\n    where is_most_recent_record = True\n),\n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_history`\n    where is_most_recent_record = True\n\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_history`\n    where is_most_recent_record = True\n\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history`\n    where is_most_recent_record = True\n\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history`\n    where is_most_recent_record = True\n\n), \n\njoined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_name,\n        ads.ad_id,\n        keywords.keyword_name,\n        keywords.keyword_id,\n        keywords.match_type,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    left join keywords\n        on report.keyword_id = keywords.keyword_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__keyword_report`"}, "model.microsoft_ads.microsoft_ads__url_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('ad_performance_daily_report') }}\n\n), \n\nkeywords as (\n    \n    select * \n    from {{ var('keyword_performance_daily_report') }}\n),\n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = True\n\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n\n), \n\njoined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_name,\n        ads.ad_id,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        {{ dbt_utils.split_part('ads.final_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('ads.final_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('ads.final_url') }} as url_path,\n\n        {% if var('microsoft_ads_auto_tagging_enabled', false) %}\n\n        coalesce( {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_source') }} , 'Bing') as utm_source,\n        coalesce( {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_medium') }}, 'cpc') as utm_medium,\n        coalesce( {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_campaign') }}, campaigns.campaign_name) as utm_campaign,\n        coalesce( {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_content') }}, ad_groups.ad_group_name) as utm_content,\n        coalesce( {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_term') }}, keywords.keyword_name) as utm_term,\n\n        {% else %}\n\n       {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_source') }} as utm_source,\n       {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_medium') }} as utm_medium,\n       {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_campaign') }} as utm_campaign,\n       {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_content') }} as utm_content,\n       {{ dbt_utils.get_url_parameter('ads.final_url', 'utm_term') }} as utm_term,\n        {% endif %}\n\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='microsoft_ads__ad_passthrough_metrics', transform = 'sum') }}\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    left join keywords\n        on report.ad_id = keywords.ad_id\n    {{ dbt_utils.group_by(21) }}\n), \n\nfiltered as (\n\n    select * \n    from joined\n    where base_url IS NOT NULL\n)\n\nselect *\nfrom filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__url_report"], "unique_id": "model.microsoft_ads.microsoft_ads__url_report", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__url_report.sql", "original_file_path": "models/microsoft_ads__url_report.sql", "name": "microsoft_ads__url_report", "alias": "microsoft_ads__url_report", "checksum": {"name": "sha256", "checksum": "22586b565505f44bc68d6af6f9ce318cb48d6eba3634f924b55ddc58fed58467"}, "tags": [], "refs": [["stg_microsoft_ads__ad_daily_report"], ["stg_microsoft_ads__keyword_daily_report"], ["stg_microsoft_ads__ad_history"], ["stg_microsoft_ads__ad_group_history"], ["stg_microsoft_ads__campaign_history"], ["stg_microsoft_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily clicks, impressions, spend (and if applicable other passthrough metrics) of ads  by ad, ad group, campaign, account, ad type, device os, device type, network, currency code, url and utm parameters.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the corresponding ad; `title_part_1` is used as the ad name as a proxy as one is not provided by the data source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The site that sent traffic to your page. Microsoft Advertising sets this to Bing; extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "Which channel was used. Microsoft Advertising sets this to cp; extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "Which campaign the keyword came from; extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "Which ad group the keyword came from; extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "Which keyword brought people to your website; extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__url_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table", "enabled": true}, "created_at": 1660323536.399148, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_daily_report`\n\n), \n\nkeywords as (\n    \n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_daily_report`\n),\n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_history`\n    where is_most_recent_record = True\n\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_history`\n    where is_most_recent_record = True\n\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history`\n    where is_most_recent_record = True\n\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history`\n    where is_most_recent_record = True\n\n), \n\njoined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_name,\n        ads.ad_id,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        \n\n  \n    split(\n        ads.final_url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        ads.final_url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        ads.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        ads.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        ads.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        ads.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        ads.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        ads.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        ads.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n\n        \n\n       nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        ads.final_url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_source,\n       nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        ads.final_url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_medium,\n       nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        ads.final_url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_campaign,\n       nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        ads.final_url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_content,\n       nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        ads.final_url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_term,\n        \n\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    left join keywords\n        on report.ad_id = keywords.ad_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\n), \n\nfiltered as (\n\n    select * \n    from joined\n    where base_url IS NOT NULL\n)\n\nselect *\nfrom filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__url_report`"}, "model.microsoft_ads.microsoft_ads__account_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('account_performance_daily_report') }}\n\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n)\n\n, joined as (\n\n    select\n        date_day,\n        accounts.account_name,\n        accounts.account_id,\n        accounts.time_zone as account_timezone,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='microsoft_ads__account_passthrough_metrics', transform = 'sum') }}\n    from report\n    left join accounts\n        on report.account_id = accounts.account_id\n    {{ dbt_utils.group_by(8)}}\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__account_report"], "unique_id": "model.microsoft_ads.microsoft_ads__account_report", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__account_report.sql", "original_file_path": "models/microsoft_ads__account_report.sql", "name": "microsoft_ads__account_report", "alias": "microsoft_ads__account_report", "checksum": {"name": "sha256", "checksum": "f0ad02c3dcce9afcdc378fbdfb9b04befc8adf7dc71fbb9a622acc519f645c75"}, "tags": [], "refs": [["stg_microsoft_ads__account_daily_report"], ["stg_microsoft_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily clicks, impressions, spend (and if applicable other passthrough metrics) of ads  by account, account timezone, device os, device type, network and currency code.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_timezone": {"name": "account_timezone", "description": "The time zone associated with this account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table", "enabled": true}, "created_at": 1660323536.361397, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_daily_report`\n\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history`\n    where is_most_recent_record = True\n)\n\n, joined as (\n\n    select\n        date_day,\n        accounts.account_name,\n        accounts.account_id,\n        accounts.time_zone as account_timezone,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n\n        \n\n\n\n\n    from report\n    left join accounts\n        on report.account_id = accounts.account_id\n    group by 1,2,3,4,5,6,7,8\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__account_report`"}, "model.microsoft_ads.microsoft_ads__search_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('search_performance_daily_report') }}\n\n), \n\nkeywords as (\n\n    select *\n    from {{ var('keyword_history') }}\n    where is_most_recent_record = True\n),\n\nads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = True\n\n), \n\nad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n\n), \n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n\n), \n\njoined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_name,\n        ads.ad_id,\n        keywords.keyword_id,\n        keywords.keyword_name,\n        coalesce(report.delivered_match_type, report.bid_match_type) as match_type,\n        report.search_query,\n        report.device_os,\n        report.device_type,\n        report.network,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='microsoft_ads__search_passthrough_metrics', transform = 'sum') }}\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    left join keywords\n        on report.keyword_id = keywords.keyword_id\n    {{ dbt_utils.group_by(16) }}\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__search_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__keyword_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__search_report"], "unique_id": "model.microsoft_ads.microsoft_ads__search_report", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__search_report.sql", "original_file_path": "models/microsoft_ads__search_report.sql", "name": "microsoft_ads__search_report", "alias": "microsoft_ads__search_report", "checksum": {"name": "sha256", "checksum": "5a23d161c13bab101fc43751d28c21e7dc514b791f53513f5f391112db77c371"}, "tags": [], "refs": [["stg_microsoft_ads__search_daily_report"], ["stg_microsoft_ads__keyword_history"], ["stg_microsoft_ads__ad_history"], ["stg_microsoft_ads__ad_group_history"], ["stg_microsoft_ads__campaign_history"], ["stg_microsoft_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily clicks, impressions, spend (and if applicable other passthrough metrics) of ads  by search query, keyword, ad, ad group, campaign, account, device os, device type and network.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the corresponding ad; `title_part_1` is used as the ad name as a proxy as one is not provided by the data source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_name": {"name": "keyword_name", "description": "The keyword(s) associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "The ID of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "The match type associated with this record; values contain but may not be limited to 'Broad', 'Exact', 'Phrase'. Please refer to Microsoft Ad's [documentation](https://help.ads.microsoft.com/#apex/ads/en/50822/1).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_query": {"name": "search_query", "description": "The search query string associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__search_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table", "enabled": true}, "created_at": 1660323536.3904672, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__search_daily_report`\n\n), \n\nkeywords as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_history`\n    where is_most_recent_record = True\n),\n\nads as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_history`\n    where is_most_recent_record = True\n\n), \n\nad_groups as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_history`\n    where is_most_recent_record = True\n\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history`\n    where is_most_recent_record = True\n\n), \n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history`\n    where is_most_recent_record = True\n\n), \n\njoined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.ad_name,\n        ads.ad_id,\n        keywords.keyword_id,\n        keywords.keyword_name,\n        coalesce(report.delivered_match_type, report.bid_match_type) as match_type,\n        report.search_query,\n        report.device_os,\n        report.device_type,\n        report.network,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n\n        \n\n\n\n\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    left join keywords\n        on report.keyword_id = keywords.keyword_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__search_report`"}, "model.microsoft_ads.microsoft_ads__campaign_report": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled', True)) }}\n\nwith report as (\n\n    select *\n    from {{ var('campaign_performance_daily_report') }}\n\n), \n\ncampaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n),\n\naccounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = True\n),\n\njoined as (\n\n    select\n        date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaigns.type as campaign_type,\n        campaigns.time_zone as campaign_timezone,\n        campaigns.status as campaign_status,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n\n        {{ fivetran_utils.persist_pass_through_columns(pass_through_variable='microsoft_ads__campaign_passthrough_metrics', transform = 'sum') }}\n    from report\n    left join accounts\n        on report.account_id = accounts.account_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    {{ dbt_utils.group_by(12)}}\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__campaign_report"], "unique_id": "model.microsoft_ads.microsoft_ads__campaign_report", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__campaign_report.sql", "original_file_path": "models/microsoft_ads__campaign_report.sql", "name": "microsoft_ads__campaign_report", "alias": "microsoft_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "d6e2fffaf6595a140dd62c1c3adfc13a12dc71c81d23293cbdc7a942069a0252"}, "tags": [], "refs": [["stg_microsoft_ads__campaign_daily_report"], ["stg_microsoft_ads__campaign_history"], ["stg_microsoft_ads__account_history"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily clicks, impressions, spend (and if applicable other passthrough metrics) of ads  by campaign, account, campaign type, campaign timezone, campaign status, device os, device type, network and currency code.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "The campaign type associated with this record; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/campaigntype?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_timezone": {"name": "campaign_timezone", "description": "The time zone associated with this campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "The status of this campaign; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/campaignstatus?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table", "enabled": true}, "created_at": 1660323536.377766, "compiled_sql": "\n\nwith report as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_daily_report`\n\n), \n\ncampaigns as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history`\n    where is_most_recent_record = True\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history`\n    where is_most_recent_record = True\n),\n\njoined as (\n\n    select\n        date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaigns.type as campaign_type,\n        campaigns.time_zone as campaign_timezone,\n        campaigns.status as campaign_status,\n        report.device_os,\n        report.device_type,\n        report.network,\n        report.currency_code,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n\n        \n\n\n\n\n    from report\n    left join accounts\n        on report.account_id = accounts.account_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__campaign_report`"}, "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report": {"raw_sql": "{{ config(enabled=var('twitter_ads__using_keywords', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_twitter_ads__line_item_keywords_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__line_item_keywords_report_tmp')),\n                staging_columns=get_line_item_keywords_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        {{ dbt_utils.date_trunc('day', 'date') }} as date_day,\n        account_id,\n        line_item_id,\n        segment as keyword,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        {{ fivetran_utils.fill_pass_through_columns('twitter_ads__line_item_keywords_report_passthrough_metrics') }}\n\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_line_item_keywords_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.date_trunc", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "stg_twitter_ads__line_item_keywords_report"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__line_item_keywords_report.sql", "original_file_path": "models/stg_twitter_ads__line_item_keywords_report.sql", "name": "stg_twitter_ads__line_item_keywords_report", "alias": "stg_twitter_ads__line_item_keywords_report", "checksum": {"name": "sha256", "checksum": "506192ef776b456eb86aaed914d054cad2162fae6d9f2def1957764ce2e35151"}, "tags": [], "refs": [["stg_twitter_ads__line_item_keywords_report_tmp"], ["stg_twitter_ads__line_item_keywords_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the performance of a line item (ad group) and keyword combination on a given day, for its placement in Twitter.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The spend for the line item + keyword on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the line item + keyword on that day in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the line item + keyword on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the line item + keyword on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the line item + keyword on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword": {"name": "keyword", "description": "The keyword whose performance is being tracked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__line_item_keywords_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "twitter_ads_source", "enabled": true}, "created_at": 1660323536.611671, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_keywords_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    billed_charge_local_micro\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    string\n) as \n    \n    line_item_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    placement\n    \n , \n    cast(null as \n    string\n) as \n    \n    segment\n    \n , \n    cast(null as \n    int64\n) as \n    \n    url_clicks\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as date_day,\n        account_id,\n        line_item_id,\n        segment as keyword,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_keywords_report`"}, "model.twitter_ads_source.stg_twitter_ads__campaign_report": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_twitter_ads__campaign_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__campaign_report_tmp')),\n                staging_columns=get_campaign_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        {{ dbt_utils.date_trunc('day', 'date') }} as date_day,\n        account_id,\n        campaign_id,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        {{ fivetran_utils.fill_pass_through_columns('twitter_ads__campaign_report_passthrough_metrics') }}\n    \n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_campaign_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.date_trunc", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_report_tmp", "model.twitter_ads_source.stg_twitter_ads__campaign_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "stg_twitter_ads__campaign_report"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__campaign_report", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__campaign_report.sql", "original_file_path": "models/stg_twitter_ads__campaign_report.sql", "name": "stg_twitter_ads__campaign_report", "alias": "stg_twitter_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "446465d172c24c2b9a1a96639b707b5becaea98135824d965f371e21c33f7e6b"}, "tags": [], "refs": [["stg_twitter_ads__campaign_report_tmp"], ["stg_twitter_ads__campaign_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the performance of an ad campaign on a given day, for its placement in Twitter.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The spend for the campaign on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the campaign on that day in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the campaign on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the campaign on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the campaign on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "twitter_ads_source"}, "created_at": 1660323536.6031702, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    billed_charge_local_micro\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    string\n) as \n    \n    placement\n    \n , \n    cast(null as \n    int64\n) as \n    \n    url_clicks\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as date_day,\n        account_id,\n        campaign_id,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        \n\n\n\n\n    \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_report`"}, "model.twitter_ads_source.stg_twitter_ads__line_item_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__line_item_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__line_item_history_tmp')),\n                staging_columns=get_line_item_history_columns()\n            )\n        }}\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        _fivetran_synced,\n        advertiser_domain,\n        advertiser_user_id,\n        automatically_select_bid,\n        bid_amount_local_micro,\n        bid_type,\n        bid_unit,\n        campaign_id,\n        charge_by,\n        created_at as created_timestamp,\n        creative_source,\n        currency,\n        deleted as is_deleted,\n        end_time as end_timestamp,\n        entity_status,\n        id as line_item_id,\n        name,\n        objective,\n        optimization,\n        primary_web_event_tag,\n        product_type,\n        start_time as start_timestamp,\n        target_cpa_local_micro,\n        total_budget_amount_local_micro,\n        updated_at as updated_timestamp,\n        round(bid_amount_local_micro / 1000000.0,2) as bid_amount,\n        round(total_budget_amount_local_micro / 1000000.0,2) as total_budget_amount,\n        round(target_cpa_local_micro / 1000000.0,2) as target_cpa,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_latest_version\n    from fields \n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_line_item_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "stg_twitter_ads__line_item_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_history", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__line_item_history.sql", "original_file_path": "models/stg_twitter_ads__line_item_history.sql", "name": "stg_twitter_ads__line_item_history", "alias": "stg_twitter_ads__line_item_history", "checksum": {"name": "sha256", "checksum": "a61851f50989d4e966f7ceffa1420c28a06b888c87e3ba244496978251ef4aa4"}, "tags": [], "refs": [["stg_twitter_ads__line_item_history_tmp"], ["stg_twitter_ads__line_item_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of each line item. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automatically_select_bid": {"name": "automatically_select_bid", "description": "Whether automatically optimize bidding is enabled based on daily budget and campaign flight dates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount_local_micro": {"name": "bid_amount_local_micro", "description": "The bid amount to be associated with this line item, in micros.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_cpa_local_micro": {"name": "target_cpa_local_micro", "description": "The target cost per acquisition for the line item, in micros.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the line item, in micros.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount": {"name": "bid_amount", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount": {"name": "total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_cpa": {"name": "target_cpa", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__line_item_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "twitter_ads_source"}, "created_at": 1660323536.587114, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_history_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertiser_domain\n    \n , \n    cast(null as \n    int64\n) as \n    \n    advertiser_user_id\n    \n , \n    cast(null as boolean) as \n    \n    automatically_select_bid\n    \n , \n    cast(null as \n    int64\n) as \n    \n    bid_amount_local_micro\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    bid_unit\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    charge_by\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    creative_source\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency\n    \n , \n    cast(null as boolean) as \n    \n    deleted\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    end_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    entity_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    objective\n    \n , \n    cast(null as \n    string\n) as \n    \n    optimization\n    \n , \n    cast(null as \n    string\n) as \n    \n    primary_web_event_tag\n    \n , \n    cast(null as \n    string\n) as \n    \n    product_type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    int64\n) as \n    \n    target_cpa_local_micro\n    \n , \n    cast(null as \n    int64\n) as \n    \n    total_budget_amount_local_micro\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        _fivetran_synced,\n        advertiser_domain,\n        advertiser_user_id,\n        automatically_select_bid,\n        bid_amount_local_micro,\n        bid_type,\n        bid_unit,\n        campaign_id,\n        charge_by,\n        created_at as created_timestamp,\n        creative_source,\n        currency,\n        deleted as is_deleted,\n        end_time as end_timestamp,\n        entity_status,\n        id as line_item_id,\n        name,\n        objective,\n        optimization,\n        primary_web_event_tag,\n        product_type,\n        start_time as start_timestamp,\n        target_cpa_local_micro,\n        total_budget_amount_local_micro,\n        updated_at as updated_timestamp,\n        round(bid_amount_local_micro / 1000000.0,2) as bid_amount,\n        round(total_budget_amount_local_micro / 1000000.0,2) as total_budget_amount,\n        round(target_cpa_local_micro / 1000000.0,2) as target_cpa,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_latest_version\n    from fields \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_history`"}, "model.twitter_ads_source.stg_twitter_ads__line_item_report": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_twitter_ads__line_item_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__line_item_report_tmp')),\n                staging_columns=get_line_item_report_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        {{ dbt_utils.date_trunc('day', 'date') }} as date_day,\n        account_id,\n        line_item_id,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        {{ fivetran_utils.fill_pass_through_columns('twitter_ads__line_item_report_passthrough_metrics') }}\n\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_line_item_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.date_trunc", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_report_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "stg_twitter_ads__line_item_report"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_report", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__line_item_report.sql", "original_file_path": "models/stg_twitter_ads__line_item_report.sql", "name": "stg_twitter_ads__line_item_report", "alias": "stg_twitter_ads__line_item_report", "checksum": {"name": "sha256", "checksum": "e324a31a15e4d5278460e867ed4e15afd9a3c1e28b403acfaa8d41748bb47f9b"}, "tags": [], "refs": [["stg_twitter_ads__line_item_report_tmp"], ["stg_twitter_ads__line_item_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the performance of a line item (ad group) on a given day, for its placement in Twitter.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The spend for the line item on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the line item on that day in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the line item on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the line item on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the line item on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__line_item_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "twitter_ads_source"}, "created_at": 1660323536.607268, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    billed_charge_local_micro\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    string\n) as \n    \n    line_item_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    placement\n    \n , \n    cast(null as \n    int64\n) as \n    \n    url_clicks\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as date_day,\n        account_id,\n        line_item_id,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_report`"}, "model.twitter_ads_source.stg_twitter_ads__campaign_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        _fivetran_synced,\n        account_id,\n        created_at as created_timestamp,\n        currency,\n        daily_budget_amount_local_micro,\n        deleted as is_deleted,\n        duration_in_days,\n        end_time as end_timestamp,\n        entity_status,\n        frequency_cap,\n        funding_instrument_id,\n        id as campaign_id,\n        name as campaign_name,\n        servable as is_servable,\n        standard_delivery as is_standard_delivery,\n        start_time as start_timestamp,\n        total_budget_amount_local_micro,\n        updated_at as updated_timestamp,\n        round(daily_budget_amount_local_micro / 1000000.0,2) as daily_budget_amount,\n        round(total_budget_amount_local_micro / 1000000.0,2) as total_budget_amount,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_latest_version\n    from fields \n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "stg_twitter_ads__campaign_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__campaign_history", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__campaign_history.sql", "original_file_path": "models/stg_twitter_ads__campaign_history.sql", "name": "stg_twitter_ads__campaign_history", "alias": "stg_twitter_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "c1bf909d25a959028e860b410f04009cf560ce83b8024bea4606a40be0d7299a"}, "tags": [], "refs": [["stg_twitter_ads__campaign_history_tmp"], ["stg_twitter_ads__campaign_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of each campaign. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount_local_micro": {"name": "daily_budget_amount_local_micro", "description": "The daily budget amount to be allocated to the campaign, in micros. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_in_days": {"name": "duration_in_days", "description": "The time period within which the frequency_cap is achieved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_servable": {"name": "is_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_standard_delivery": {"name": "is_standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the campaign, in micros.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding_instrument_id": {"name": "funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount": {"name": "daily_budget_amount", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount": {"name": "total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "twitter_ads_source"}, "created_at": 1660323536.577506, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_history_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    string\n) as \n    \n    currency\n    \n , \n    cast(null as \n    int64\n) as \n    \n    daily_budget_amount_local_micro\n    \n , \n    cast(null as boolean) as \n    \n    deleted\n    \n , \n    cast(null as \n    int64\n) as \n    \n    duration_in_days\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    end_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    entity_status\n    \n , \n    cast(null as \n    int64\n) as \n    \n    frequency_cap\n    \n , \n    cast(null as \n    string\n) as \n    \n    funding_instrument_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as boolean) as \n    \n    servable\n    \n , \n    cast(null as boolean) as \n    \n    standard_delivery\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    int64\n) as \n    \n    total_budget_amount_local_micro\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        _fivetran_synced,\n        account_id,\n        created_at as created_timestamp,\n        currency,\n        daily_budget_amount_local_micro,\n        deleted as is_deleted,\n        duration_in_days,\n        end_time as end_timestamp,\n        entity_status,\n        frequency_cap,\n        funding_instrument_id,\n        id as campaign_id,\n        name as campaign_name,\n        servable as is_servable,\n        standard_delivery as is_standard_delivery,\n        start_time as start_timestamp,\n        total_budget_amount_local_micro,\n        updated_at as updated_timestamp,\n        round(daily_budget_amount_local_micro / 1000000.0,2) as daily_budget_amount,\n        round(total_budget_amount_local_micro / 1000000.0,2) as total_budget_amount,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_latest_version\n    from fields \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_history`"}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_report_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__promoted_tweet_report_tmp')),\n                staging_columns=get_promoted_tweet_report_columns()\n            )\n        }}\n\n    from source\n\n), spend_calc as (\n\n    select\n        {{ dbt_utils.date_trunc('day', 'date') }} as date_day,\n        account_id,\n        promoted_tweet_id,\n        placement,\n        clicks as clicks,\n        impressions as impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks as url_clicks\n\n        {{ fivetran_utils.fill_pass_through_columns('twitter_ads__promoted_tweet_report_passthrough_metrics') }}\n    \n    from renamed\n\n)\n\nselect * from spend_calc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_promoted_tweet_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.date_trunc", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "stg_twitter_ads__promoted_tweet_report"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__promoted_tweet_report.sql", "original_file_path": "models/stg_twitter_ads__promoted_tweet_report.sql", "name": "stg_twitter_ads__promoted_tweet_report", "alias": "stg_twitter_ads__promoted_tweet_report", "checksum": {"name": "sha256", "checksum": "cd284967fc192df1a9b6549c57d0b902dc721d5fa7f20ec84e7549e6a9e618da"}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_report_tmp"], ["stg_twitter_ads__promoted_tweet_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the performance of a promoted tweet on a given day, in the tweet's defined placement.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The spend (in micros) for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the related promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__promoted_tweet_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "twitter_ads_source"}, "created_at": 1660323536.594348, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_report_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    billed_charge_local_micro\n    \n , \n    cast(null as \n    int64\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    int64\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    string\n) as \n    \n    placement\n    \n , \n    cast(null as \n    string\n) as \n    \n    promoted_tweet_id\n    \n , \n    cast(null as \n    int64\n) as \n    \n    url_clicks\n    \n \n\n\n\n    from source\n\n), spend_calc as (\n\n    select\n        timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as date_day,\n        account_id,\n        promoted_tweet_id,\n        placement,\n        clicks as clicks,\n        impressions as impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks as url_clicks\n\n        \n\n\n\n\n    \n    from renamed\n\n)\n\nselect * from spend_calc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_report`"}, "model.twitter_ads_source.stg_twitter_ads__tweet": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_twitter_ads__tweet_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__tweet_tmp')),\n                staging_columns=get_tweet_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        account_id,\n        id as tweet_id,\n        name,\n        full_text,\n        lang as language\n\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_tweet_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__tweet_tmp", "model.twitter_ads_source.stg_twitter_ads__tweet_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "stg_twitter_ads__tweet"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__tweet", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__tweet.sql", "original_file_path": "models/stg_twitter_ads__tweet.sql", "name": "stg_twitter_ads__tweet", "alias": "stg_twitter_ads__tweet", "checksum": {"name": "sha256", "checksum": "b38d90cd3318333763eba8d99137106f3a2d8ce0ea8a7759e9e1ff5decca2920"}, "tags": [], "refs": [["stg_twitter_ads__tweet_tmp"], ["stg_twitter_ads__tweet_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a tweet, promoted or not.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "Unique identifier of the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "If provided, the non-public title of the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_text": {"name": "full_text", "description": "Full text of the tweet's content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "Two-letter language code of the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__tweet.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "twitter_ads_source"}, "created_at": 1660323536.6137002, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    card_uri\n    \n , \n    cast(null as \n    string\n) as \n    \n    coordinates_coordinates\n    \n , \n    cast(null as \n    string\n) as \n    \n    coordinates_type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    int64\n) as \n    \n    favorite_count\n    \n , \n    cast(null as boolean) as \n    \n    favorited\n    \n , \n    cast(null as boolean) as \n    \n    followers\n    \n , \n    cast(null as \n    string\n) as \n    \n    full_text\n    \n , \n    cast(null as \n    string\n) as \n    \n    geo_coordinates\n    \n , \n    cast(null as \n    string\n) as \n    \n    geo_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    in_reply_to_screen_name\n    \n , \n    cast(null as \n    string\n) as \n    \n    in_reply_to_status_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    in_reply_to_user_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    lang\n    \n , \n    cast(null as \n    string\n) as \n    \n    media_key\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    int64\n) as \n    \n    retweet_count\n    \n , \n    cast(null as boolean) as \n    \n    retweeted\n    \n , \n    cast(null as \n    string\n) as \n    \n    source\n    \n , \n    cast(null as boolean) as \n    \n    truncated\n    \n , \n    cast(null as \n    string\n) as \n    \n    tweet_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    user_id\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        account_id,\n        id as tweet_id,\n        name,\n        full_text,\n        lang as language\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet`"}, "model.twitter_ads_source.stg_twitter_ads__account_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        _fivetran_synced,\n        approval_status,\n        business_id,\n        business_name,\n        created_at as created_timestamp,\n        deleted as is_deleted,\n        id as account_id,\n        industry_type,\n        name,\n        salt,\n        timezone,\n        timezone_switch_at as timezone_switched_timestamp,\n        updated_at as updated_timestamp,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_latest_version\n    from fields \n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "model.twitter_ads_source.stg_twitter_ads__account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "stg_twitter_ads__account_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__account_history", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__account_history.sql", "original_file_path": "models/stg_twitter_ads__account_history.sql", "name": "stg_twitter_ads__account_history", "alias": "stg_twitter_ads__account_history", "checksum": {"name": "sha256", "checksum": "3b811a7b76d9173d6b303591fcedfe33ef100ed692de9155dd33ec429e70b1e8"}, "tags": [], "refs": [["stg_twitter_ads__account_history_tmp"], ["stg_twitter_ads__account_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of each account. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone_switched_timestamp": {"name": "timezone_switched_timestamp", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salt": {"name": "salt", "description": "The random encryption key used to hash data.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "twitter_ads_source"}, "created_at": 1660323536.570177, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    approval_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    business_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    business_name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as boolean) as \n    \n    deleted\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    industry_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    salt\n    \n , \n    cast(null as \n    string\n) as \n    \n    timezone\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    timezone_switch_at\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        _fivetran_synced,\n        approval_status,\n        business_id,\n        business_name,\n        created_at as created_timestamp,\n        deleted as is_deleted,\n        id as account_id,\n        industry_type,\n        name,\n        salt,\n        timezone,\n        timezone_switch_at as timezone_switched_timestamp,\n        updated_at as updated_timestamp,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_latest_version\n    from fields \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history`"}, "model.twitter_ads_source.stg_twitter_ads__tweet_url": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__tweet_url_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__tweet_url_tmp')),\n                staging_columns=get_tweet_url_columns()\n            )\n        }}\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        _fivetran_synced,\n        display_url,\n        expanded_url,\n        index,\n        indices,\n        tweet_id,\n        url,\n        {{ dbt_utils.split_part('expanded_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('expanded_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('expanded_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_term') }} as utm_term\n    \n    from fields\n\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_tweet_url_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "stg_twitter_ads__tweet_url"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__tweet_url", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__tweet_url.sql", "original_file_path": "models/stg_twitter_ads__tweet_url.sql", "name": "stg_twitter_ads__tweet_url", "alias": "stg_twitter_ads__tweet_url", "checksum": {"name": "sha256", "checksum": "5d7ab3ed708aa4938385948acceed59cd4c9342f626482c32809567d0e52988c"}, "tags": [], "refs": [["stg_twitter_ads__tweet_url_tmp"], ["stg_twitter_ads__tweet_url_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a URL used in a tweet.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the URL within the tweet (ie if there are multiple URLs)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "indices": {"name": "indices", "description": "The start and end point of where the URL is placed in the tweet text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The 't.co' shortened URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__tweet_url.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "twitter_ads_source"}, "created_at": 1660323536.599568, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet_url_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    display_url\n    \n , \n    cast(null as \n    string\n) as \n    \n    expanded_url\n    \n , \n    cast(null as \n    int64\n) as \n    \n    index\n    \n , \n    cast(null as \n    string\n) as \n    \n    indices\n    \n , \n    cast(null as \n    string\n) as \n    \n    tweet_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    url\n    \n \n\n\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        _fivetran_synced,\n        display_url,\n        expanded_url,\n        index,\n        indices,\n        tweet_id,\n        url,\n        \n\n  \n    split(\n        expanded_url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        \n    safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n  \n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as \n    string\n)\n as url_path,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        expanded_url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_source,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        expanded_url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_medium,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        expanded_url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_campaign,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        expanded_url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_content,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        expanded_url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_term\n    \n    from fields\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet_url`"}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__promoted_tweet_history_tmp')),\n                staging_columns=get_promoted_tweet_history_columns()\n            )\n        }}\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        _fivetran_synced,\n        approval_status,\n        created_at as created_timestamp,\n        deleted as is_deleted,\n        entity_status,\n        id as promoted_tweet_id,\n        line_item_id,\n        tweet_id,\n        updated_at as updated_timestamp,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_latest_version\n    from fields \n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_promoted_tweet_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "stg_twitter_ads__promoted_tweet_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__promoted_tweet_history.sql", "original_file_path": "models/stg_twitter_ads__promoted_tweet_history.sql", "name": "stg_twitter_ads__promoted_tweet_history", "alias": "stg_twitter_ads__promoted_tweet_history", "checksum": {"name": "sha256", "checksum": "cee24bf1d90dd73c7b3e1a3e4f5c3b2b9063d6543f845829038d0caefbd5ad89"}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_history_tmp"], ["stg_twitter_ads__promoted_tweet_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of each promoted tweet. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__promoted_tweet_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "twitter_ads_source"}, "created_at": 1660323536.5907662, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_history_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    approval_status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as boolean) as \n    \n    deleted\n    \n , \n    cast(null as \n    string\n) as \n    \n    entity_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    line_item_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    tweet_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        _fivetran_synced,\n        approval_status,\n        created_at as created_timestamp,\n        deleted as is_deleted,\n        entity_status,\n        id as promoted_tweet_id,\n        line_item_id,\n        tweet_id,\n        updated_at as updated_timestamp,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_latest_version\n    from fields \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_history`"}, "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp": {"raw_sql": "select *\nfrom {{ var('tweet_url') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_tweet_url_data"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__tweet_url_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__tweet_url_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__tweet_url_tmp.sql", "name": "stg_twitter_ads__tweet_url_tmp", "alias": "stg_twitter_ads__tweet_url_tmp", "checksum": {"name": "sha256", "checksum": "a3a5504a33848aa67f78a84a61c25b21c0afd6de09849963d1031c8f003b3e2d"}, "tags": [], "refs": [["twitter_tweet_url_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__tweet_url_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "twitter_ads_source"}, "created_at": 1660323533.64957, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_tweet_url_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet_url_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__tweet_tmp": {"raw_sql": "select * \nfrom {{ var('tweet') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.twitter_ads_source.twitter_ads.tweet"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__tweet_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__tweet_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__tweet_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__tweet_tmp.sql", "name": "stg_twitter_ads__tweet_tmp", "alias": "stg_twitter_ads__tweet_tmp", "checksum": {"name": "sha256", "checksum": "d1f3ef9a25263ff9f0039accbed3d51cd8a219d072c540f0994e493219edc28a"}, "tags": [], "refs": [], "sources": [["twitter_ads", "tweet"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__tweet_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "twitter_ads_source"}, "created_at": 1660323533.655804, "compiled_sql": "select * \nfrom `dbt-package-testing`.`twitter_ads`.`tweet`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp": {"raw_sql": "select *\nfrom {{ var('promoted_tweet_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__promoted_tweet_report_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "name": "stg_twitter_ads__promoted_tweet_report_tmp", "alias": "stg_twitter_ads__promoted_tweet_report_tmp", "checksum": {"name": "sha256", "checksum": "bee4be3006388dac42d90797172a8b1060fd93c4afacff61aa61c0f48881d922"}, "tags": [], "refs": [["twitter_promoted_tweet_report_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "twitter_ads_source"}, "created_at": 1660323533.662034, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_promoted_tweet_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_report_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp": {"raw_sql": "select *\nfrom {{ var('line_item_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_line_item_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__line_item_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__line_item_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__line_item_history_tmp.sql", "name": "stg_twitter_ads__line_item_history_tmp", "alias": "stg_twitter_ads__line_item_history_tmp", "checksum": {"name": "sha256", "checksum": "50568a1b16de7a4a21448a595d2dac8a5ef6cc53134150ba5ccca4a9ce8ac3f7"}, "tags": [], "refs": [["twitter_line_item_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__line_item_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "twitter_ads_source"}, "created_at": 1660323533.66809, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_line_item_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_history_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__campaign_report_tmp": {"raw_sql": "select * \nfrom {{ var('campaign_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.twitter_ads_source.twitter_ads.campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__campaign_report_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__campaign_report_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__campaign_report_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__campaign_report_tmp.sql", "name": "stg_twitter_ads__campaign_report_tmp", "alias": "stg_twitter_ads__campaign_report_tmp", "checksum": {"name": "sha256", "checksum": "5f611ed15f119a95ac9ba29f2463d1924782790c0678cfca4fd0f25aab4d4296"}, "tags": [], "refs": [], "sources": [["twitter_ads", "campaign_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__campaign_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "twitter_ads_source"}, "created_at": 1660323533.67352, "compiled_sql": "select * \nfrom `dbt-package-testing`.`twitter_ads`.`campaign_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_report_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__campaign_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__campaign_history_tmp.sql", "name": "stg_twitter_ads__campaign_history_tmp", "alias": "stg_twitter_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "d695c134485444137d663f41732085a5cfa81de49f3ec2676e9f8e58f1c62c02"}, "tags": [], "refs": [["twitter_campaign_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "twitter_ads_source"}, "created_at": 1660323533.680607, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_history_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp": {"raw_sql": "{{ config(enabled=var('twitter_ads__using_keywords', true)) }}\n\nselect * \nfrom {{ var('line_item_keywords_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.twitter_ads_source.twitter_ads.line_item_keywords_report"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__line_item_keywords_report_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__line_item_keywords_report_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__line_item_keywords_report_tmp.sql", "name": "stg_twitter_ads__line_item_keywords_report_tmp", "alias": "stg_twitter_ads__line_item_keywords_report_tmp", "checksum": {"name": "sha256", "checksum": "81a55417a9c634507934432d8d8ef0f133c01e5855f935223350d17712077b66"}, "tags": [], "refs": [], "sources": [["twitter_ads", "line_item_keywords_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__line_item_keywords_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "twitter_ads_source", "enabled": true}, "created_at": 1660323533.685888, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`twitter_ads`.`line_item_keywords_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_keywords_report_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__line_item_report_tmp": {"raw_sql": "select * \nfrom {{ var('line_item_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.twitter_ads_source.twitter_ads.line_item_report"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__line_item_report_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_report_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__line_item_report_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__line_item_report_tmp.sql", "name": "stg_twitter_ads__line_item_report_tmp", "alias": "stg_twitter_ads__line_item_report_tmp", "checksum": {"name": "sha256", "checksum": "27c1c23f10a0cb83837693357ef8d2db899bd191a3488207344a2e0ff6b6884b"}, "tags": [], "refs": [], "sources": [["twitter_ads", "line_item_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__line_item_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "twitter_ads_source"}, "created_at": 1660323533.692356, "compiled_sql": "select * \nfrom `dbt-package-testing`.`twitter_ads`.`line_item_report`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_report_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__account_history_tmp": {"raw_sql": "select *\nfrom {{ var('account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__account_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__account_history_tmp.sql", "name": "stg_twitter_ads__account_history_tmp", "alias": "stg_twitter_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "6151f500892f8291a211d3042fa8a914d37cc5bd4934ec2821bf61b6391f9b3a"}, "tags": [], "refs": [["twitter_account_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "twitter_ads_source"}, "created_at": 1660323533.698247, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_account_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp": {"raw_sql": "select *\nfrom {{ var('promoted_tweet_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_twitter_ads_source", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__promoted_tweet_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "name": "stg_twitter_ads__promoted_tweet_history_tmp", "alias": "stg_twitter_ads__promoted_tweet_history_tmp", "checksum": {"name": "sha256", "checksum": "318c404eef398ff876b5c1aeed0868355f7adc9f8a87e8e253a21d9a111d67e9"}, "tags": [], "refs": [["twitter_promoted_tweet_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "twitter_ads_source"}, "created_at": 1660323533.704588, "compiled_sql": "select *\nfrom `dbt-package-testing`.`ad_reporting_integration_tests`.`twitter_promoted_tweet_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_history_tmp`"}, "model.linkedin.linkedin_ads__campaign_group_report": {"raw_sql": "with campaign_group as (\n\n    select *\n    from {{ var('campaign_group_history') }}\n    where is_latest_version\n),\n\ncampaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_latest_version\n),\n\naccount as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\nreport as (\n\n    select *\n    from {{ var('ad_analytics_by_campaign') }}\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        campaign_group.campaign_group_id,\n        campaign_group.campaign_group_name,\n        account.account_id,\n        account.account_name,\n        campaign_group.status,\n        account.currency,\n        campaign_group.is_backfilled,\n        campaign_group.run_schedule_start_at,\n        campaign_group.run_schedule_end_at,\n        campaign_group.last_modified_at,\n        campaign_group.created_at,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.cost) as cost\n\n        {{ fivetran_utils.persist_pass_through_columns('linkedin_ads__campaign_passthrough_metrics', transform='sum') }}\n    \n    from report \n    left join campaign \n        on report.campaign_id = campaign.campaign_id\n    left join campaign_group\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\n    left join account \n        on campaign.account_id = account.account_id\n\n    {{ dbt_utils.group_by(n=12) }}\n\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history", "model.linkedin_source.stg_linkedin_ads__campaign_history", "model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads", "fqn": ["linkedin", "linkedin_ads__campaign_group_report"], "unique_id": "model.linkedin.linkedin_ads__campaign_group_report", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "linkedin_ads__campaign_group_report.sql", "original_file_path": "models/linkedin_ads__campaign_group_report.sql", "name": "linkedin_ads__campaign_group_report", "alias": "linkedin_ads__campaign_group_report", "checksum": {"name": "sha256", "checksum": "ac9564c66cb98f948d793532b4d18fa3ba66bf3da23beabcd69987474511aca3"}, "tags": [], "refs": [["stg_linkedin_ads__campaign_group_history"], ["stg_linkedin_ads__campaign_history"], ["stg_linkedin_ads__account_history"], ["stg_linkedin_ads__ad_analytics_by_campaign"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the campaign group level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the campaign group was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_backfilled": {"name": "is_backfilled", "description": "Flag that denotes whether the campaign group was created organically or to backfill existing campaigns. This is a read-only field set by the system. Default = false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_start_at": {"name": "run_schedule_start_at", "description": "Represents the inclusive (greater than or equal to) date when to start running the associated campaigns under this campaign group. This field is required.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_end_at": {"name": "run_schedule_end_at", "description": "Represents the exclusive (strictly less than) date when to stop running the associated campaigns under this campaign group. If this field is unset, it indicates an open range with no end date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of campaign group. Possible values are: ACTIVE - Denotes that the campaign group is capable of serving ads, subject to run date and budget limitations (as well as any other limitations at the account or campaign level). ARCHIVED - Denotes that the campaign group is presently inactive, and should mostly be hidden in the UI until un-archived. CANCELLED - Denotes that the campaign group has been permanently canceled and cannot be reactivated. Not a settable status. DRAFT - Denotes that the campaign group is in a preliminary state and should temporarily not be served. PAUSED - Denotes that the campaign group meets all requirements to be served, but temporarily should not be. PENDING_DELETION - Denotes that the campaign group has been requested to be deleted that is currently pending. REMOVED - Denoted that the campaign group was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar (default).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin://models/linkedin.yml", "compiled_path": "target/compiled/linkedin/models/linkedin_ads__campaign_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "linkedin_ads"}, "created_at": 1660323536.786905, "compiled_sql": "with campaign_group as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_group_history`\n    where is_latest_version\n),\n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history`\n    where is_latest_version\n),\n\naccount as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history`\n    where is_latest_version\n),\n\nreport as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_campaign`\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        campaign_group.campaign_group_id,\n        campaign_group.campaign_group_name,\n        account.account_id,\n        account.account_name,\n        campaign_group.status,\n        account.currency,\n        campaign_group.is_backfilled,\n        campaign_group.run_schedule_start_at,\n        campaign_group.run_schedule_end_at,\n        campaign_group.last_modified_at,\n        campaign_group.created_at,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.cost) as cost\n\n        \n\n\n\n\n    \n    from report \n    left join campaign \n        on report.campaign_id = campaign.campaign_id\n    left join campaign_group\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\n    left join account \n        on campaign.account_id = account.account_id\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__campaign_group_report`"}, "model.linkedin.linkedin_ads__creative_report": {"raw_sql": "with creative as (\n\n    select *\n    from {{ var('creative_history') }}\n    where is_latest_version\n),\n\ncampaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_latest_version\n),\n\ncampaign_group as (\n\n    select *\n    from {{ var('campaign_group_history') }}\n    where is_latest_version\n),\n\naccount as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\nreport as (\n\n    select *\n    from {{ var('ad_analytics_by_creative') }}\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        creative.creative_id,\n        creative.version_tag,\n        campaign.campaign_id,\n        campaign.campaign_name,\n        campaign_group.campaign_group_id,\n        campaign_group.campaign_group_name,\n        account.account_id,\n        account.account_name,\n        creative.type,\n        creative.click_uri,\n        creative.status as creative_status,\n        campaign.status as campaign_status,\n        campaign_group.status as campaign_group_status,\n        creative.call_to_action_label_type,\n        account.currency,\n        creative.last_modified_at,\n        creative.created_at,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.cost) as cost\n\n        {{ fivetran_utils.persist_pass_through_columns('linkedin_ads__creative_passthrough_metrics', transform='sum') }}\n    \n    from report \n    left join creative \n        on report.creative_id = creative.creative_id\n    left join campaign \n        on creative.campaign_id = campaign.campaign_id\n    left join campaign_group\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\n    left join account \n        on campaign.account_id = account.account_id\n\n    {{ dbt_utils.group_by(n=18) }}\n\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.linkedin_source.stg_linkedin_ads__creative_history", "model.linkedin_source.stg_linkedin_ads__campaign_history", "model.linkedin_source.stg_linkedin_ads__campaign_group_history", "model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads", "fqn": ["linkedin", "linkedin_ads__creative_report"], "unique_id": "model.linkedin.linkedin_ads__creative_report", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "linkedin_ads__creative_report.sql", "original_file_path": "models/linkedin_ads__creative_report.sql", "name": "linkedin_ads__creative_report", "alias": "linkedin_ads__creative_report", "checksum": {"name": "sha256", "checksum": "05b08651785b55693c5660421ee63709fd05b5662587bf8d771e8c0b82326113"}, "tags": [], "refs": [["stg_linkedin_ads__creative_history"], ["stg_linkedin_ads__campaign_history"], ["stg_linkedin_ads__campaign_group_history"], ["stg_linkedin_ads__account_history"], ["stg_linkedin_ads__ad_analytics_by_creative"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the creative level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the creative's campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the creative's campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "Unique internal ID representing the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the creative was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "TEXT_AD - Text with Sponsored Link to landing page on your site.\nSPONSORED_STATUS_UPDATE - Sponsored status update from a profile page.\nSPONSORED_INMAILS - Single message ad delivered to the member's inbox\nSPONSORED_MESSAGE - Conversation ad containing a tree of pre-determined messages delivered to the member's inbox\nSPONSORED_VIDEO - Sponsored videos.\nSPONSORED_UPDATE_CAROUSEL - Sponsored Carousels\nFOLLOW_COMPANY_V2 - Dynamic Follow Ad\nSPOTLIGHT_V2 - Dynamic Spotlight Ad\nJOBS_V2 - Dynamic Job Ad\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_status": {"name": "creative_status", "description": "ACTIVE - Creative creation is complete and creative is available for review and serve.\nPAUSED - Creative creation is complete and creative is current, but should temporarily not be served. This status is not valid upon creation.\nDRAFT - Creative creation is incomplete and may still be edited.\nARCHIVED - Creative creation is complete, but creative should not be served and should be separated from non-archived creatives in any UI.\nCANCELED - Creative is permanently canceled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_uri": {"name": "click_uri", "description": "Required when creative type is TEXT_AD. Maximum character limit of 500 after URL encoding all special characters. \nLimit does not include the \"https://\" prefix.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_to_action_label_type": {"name": "call_to_action_label_type", "description": "The labeled call-to-action on this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_status": {"name": "campaign_group_status", "description": "Status of campaign's campaign group. Possible values are: ACTIVE - Denotes that the campaign group is capable of serving ads, subject to run date and budget limitations (as well as any other limitations at the account or campaign level). ARCHIVED - Denotes that the campaign group is presently inactive, and should mostly be hidden in the UI until un-archived. CANCELLED - Denotes that the campaign group has been permanently canceled and cannot be reactivated. Not a settable status. DRAFT - Denotes that the campaign group is in a preliminary state and should temporarily not be served. PAUSED - Denotes that the campaign group meets all requirements to be served, but temporarily should not be. PENDING_DELETION - Denotes that the campaign group has been requested to be deleted that is currently pending. REMOVED - Denoted that the campaign group was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "ACTIVE - Denotes that the campaign is fully servable.\nPAUSED - Denotes that the campaign meets all requirements to be served, but temporarily should not be.\nARCHIVED - Denotes that the campaign is presently inactive, and should mostly be hidden in the UI until un-archived.\nCOMPLETED - Denotes that the campaign has reached a specified budgetary or chronological limit.\nCANCELED - Denotes that the campaign has been permanently canceled, such as when an advertising account is permanently closed.\nDRAFT - Denotes that the campaign is still being edited and not eligible for serving. Some validation will be postponed until the campaign is activated.\nPENDING_DELETION - Denotes that the campaign has been requested to be deleted that is currently pending.\nREMOVED - Denotes that the campaign was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar (default).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin://models/linkedin.yml", "compiled_path": "target/compiled/linkedin/models/linkedin_ads__creative_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "linkedin_ads"}, "created_at": 1660323536.796268, "compiled_sql": "with creative as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__creative_history`\n    where is_latest_version\n),\n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history`\n    where is_latest_version\n),\n\ncampaign_group as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_group_history`\n    where is_latest_version\n),\n\naccount as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history`\n    where is_latest_version\n),\n\nreport as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_creative`\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        creative.creative_id,\n        creative.version_tag,\n        campaign.campaign_id,\n        campaign.campaign_name,\n        campaign_group.campaign_group_id,\n        campaign_group.campaign_group_name,\n        account.account_id,\n        account.account_name,\n        creative.type,\n        creative.click_uri,\n        creative.status as creative_status,\n        campaign.status as campaign_status,\n        campaign_group.status as campaign_group_status,\n        creative.call_to_action_label_type,\n        account.currency,\n        creative.last_modified_at,\n        creative.created_at,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.cost) as cost\n\n        \n\n\n\n\n    \n    from report \n    left join creative \n        on report.creative_id = creative.creative_id\n    left join campaign \n        on creative.campaign_id = campaign.campaign_id\n    left join campaign_group\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\n    left join account \n        on campaign.account_id = account.account_id\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__creative_report`"}, "model.linkedin.linkedin_ads__campaign_report": {"raw_sql": "with campaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_latest_version\n),\n\ncampaign_group as (\n\n    select *\n    from {{ var('campaign_group_history') }}\n    where is_latest_version\n),\n\naccount as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\nreport as (\n\n    select *\n    from {{ var('ad_analytics_by_campaign') }}\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        campaign.campaign_id,\n        campaign.campaign_name,\n        campaign.version_tag,\n        campaign_group.campaign_group_id,\n        campaign_group.campaign_group_name,\n        account.account_id,\n        account.account_name,\n        campaign.status as campaign_status,\n        campaign_group.status as campaign_group_status,\n        campaign.type,\n        campaign.cost_type,\n        campaign.creative_selection,\n        campaign.daily_budget_amount,\n        campaign.daily_budget_currency_code,\n        campaign.unit_cost_amount,\n        campaign.unit_cost_currency_code,\n        account.currency,\n        campaign.format,\n        campaign.locale_country,\n        campaign.locale_language,\n        campaign.objective_type,\n        campaign.optimization_target_type,\n        campaign.is_audience_expansion_enabled,\n        campaign.is_offsite_delivery_enabled,\n        campaign.run_schedule_start_at,\n        campaign.run_schedule_end_at,\n        campaign.last_modified_at,\n        campaign.created_at,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.cost) as cost\n\n        {{ fivetran_utils.persist_pass_through_columns('linkedin_ads__campaign_passthrough_metrics', transform='sum') }}\n    \n    from report \n    left join campaign \n        on report.campaign_id = campaign.campaign_id\n    left join campaign_group\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\n    left join account \n        on campaign.account_id = account.account_id\n\n    {{ dbt_utils.group_by(n=29) }}\n\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.linkedin_source.stg_linkedin_ads__campaign_history", "model.linkedin_source.stg_linkedin_ads__campaign_group_history", "model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads", "fqn": ["linkedin", "linkedin_ads__campaign_report"], "unique_id": "model.linkedin.linkedin_ads__campaign_report", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "linkedin_ads__campaign_report.sql", "original_file_path": "models/linkedin_ads__campaign_report.sql", "name": "linkedin_ads__campaign_report", "alias": "linkedin_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "05630994554fdf120db9c5af74e7b1bb87e445ed0791ebd247310003f1a7c315"}, "tags": [], "refs": [["stg_linkedin_ads__campaign_history"], ["stg_linkedin_ads__campaign_group_history"], ["stg_linkedin_ads__account_history"], ["stg_linkedin_ads__ad_analytics_by_campaign"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_status": {"name": "campaign_group_status", "description": "Status of campaign's campaign group. Possible values are: ACTIVE - Denotes that the campaign group is capable of serving ads, subject to run date and budget limitations (as well as any other limitations at the account or campaign level). ARCHIVED - Denotes that the campaign group is presently inactive, and should mostly be hidden in the UI until un-archived. CANCELLED - Denotes that the campaign group has been permanently canceled and cannot be reactivated. Not a settable status. DRAFT - Denotes that the campaign group is in a preliminary state and should temporarily not be served. PAUSED - Denotes that the campaign group meets all requirements to be served, but temporarily should not be. PENDING_DELETION - Denotes that the campaign group has been requested to be deleted that is currently pending. REMOVED - Denoted that the campaign group was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_audience_expansion_enabled": {"name": "is_audience_expansion_enabled", "description": "Boolean (default=false) representing whether Audience Expansion is enabled for the campaign provides query expansion for certain targeting criteria.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_type": {"name": "cost_type", "description": "CPM - Cost per thousand advertising impressions. If type=SPONSORED_INMAILS; cost per send(CPS) is measured as CPM x 1000.\nCPC- Cost per individual click on the associated link.\nCPV- Cost per view for video ads.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_selection": {"name": "creative_selection", "description": "ROUND_ROBIN - Rotate through available creatives to serve them as evenly as possible.\nOPTIMIZED (default) - Bias selection taking into account such as expected performance. Not available for Message and Conversation Ads (type=SPONSORED_INMAILS).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount": {"name": "daily_budget_amount", "description": "Maximum amount to spend per day UTC. The amount of money as a real number string.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_currency_code": {"name": "daily_budget_currency_code", "description": "ISO currency code. The currency must match that of the parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "format": {"name": "format", "description": "The ad format on the campaign level. See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads/campaign-formats?view=li-lms-2022-07", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale_country": {"name": "locale_country", "description": "Locale of the campaign. An uppercase two-letter country code as defined by ISO-3166.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale_language": {"name": "locale_language", "description": "Locale of the campaign. A lowercase two-letter language code as defined by ISO-639.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective_type": {"name": "objective_type", "description": "Campaign Objective type values. Click [here](https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads-reporting/ad-budget-pricing-type-combinations?view=li-lms-2022-07) for Campaign Objective descriptions. One of: - BRAND_AWARENESS - ENGAGEMENT - JOB_APPLICANTS - LEAD_GENERATION - WEBSITE_CONVERSIONS - WEBSITE_VISITS - VIDEO_VIEWS\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_offsite_delivery_enabled": {"name": "is_offsite_delivery_enabled", "description": "Boolean indicating if this campaign to allowed to be served on the LinkedIn Audience Network to extend the reach of your campaign by delivering ads beyond the  LinkedIn feed to members on third-party apps and sites.\t(default will be \"True\" from June 30, 2022)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization_target_type": {"name": "optimization_target_type", "description": "Determines how this campaign is optimized for spending. If this is not set, there is no optimization. Refer to the documentation here. Default = 'NONE'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_start_at": {"name": "run_schedule_start_at", "description": "Scheduled date range to run associated creatives. The start date must be non-null. Represents the inclusive (greater than or equal to) value in which to start the range.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_end_at": {"name": "run_schedule_end_at", "description": "Scheduled date range to run associated creatives. The start date must be non-null. Represents the exclusive (strictly less than) value in which to end the range, if provided.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "ACTIVE - Denotes that the campaign is fully servable.\nPAUSED - Denotes that the campaign meets all requirements to be served, but temporarily should not be.\nARCHIVED - Denotes that the campaign is presently inactive, and should mostly be hidden in the UI until un-archived.\nCOMPLETED - Denotes that the campaign has reached a specified budgetary or chronological limit.\nCANCELED - Denotes that the campaign has been permanently canceled, such as when an advertising account is permanently closed.\nDRAFT - Denotes that the campaign is still being edited and not eligible for serving. Some validation will be postponed until the campaign is activated.\nPENDING_DELETION - Denotes that the campaign has been requested to be deleted that is currently pending.\nREMOVED - Denotes that the campaign was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "TEXT_AD - Text-based ads that show up in the right column or top of the page on LinkedIn.\nSPONSORED_UPDATES - Native ads that promote a company's content updates in the LinkedIn feed.\nSPONSORED_INMAILS - Personalized messages with a call-to-action button delivered to a LinkedIn's member inbox.\nDYNAMIC - Ads that are dynamically personalized.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_cost_amount": {"name": "unit_cost_amount", "description": "This value is used as one of the following: amount to bid (for manual bidding), amount which is the target cost (for target cost bidding) per click,  impression, or other event depending on the pricing model, or cost cap (for cost cap bidding). The amount of money as a real number string.  The amount should be non-negative if the bidding strategy is manual, target cost, or cost cap bidding. The default is 0 with the currency code set to match that of the associated account.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_cost_currency_code": {"name": "unit_cost_currency_code", "description": "Amount to bid per click, impression, or other event depending on the pricing model. The default is 0 with the currency code set to match that of the associated account.  ISO currency code.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar (default).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin://models/linkedin.yml", "compiled_path": "target/compiled/linkedin/models/linkedin_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "linkedin_ads"}, "created_at": 1660323536.7802722, "compiled_sql": "with campaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history`\n    where is_latest_version\n),\n\ncampaign_group as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_group_history`\n    where is_latest_version\n),\n\naccount as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history`\n    where is_latest_version\n),\n\nreport as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_campaign`\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        campaign.campaign_id,\n        campaign.campaign_name,\n        campaign.version_tag,\n        campaign_group.campaign_group_id,\n        campaign_group.campaign_group_name,\n        account.account_id,\n        account.account_name,\n        campaign.status as campaign_status,\n        campaign_group.status as campaign_group_status,\n        campaign.type,\n        campaign.cost_type,\n        campaign.creative_selection,\n        campaign.daily_budget_amount,\n        campaign.daily_budget_currency_code,\n        campaign.unit_cost_amount,\n        campaign.unit_cost_currency_code,\n        account.currency,\n        campaign.format,\n        campaign.locale_country,\n        campaign.locale_language,\n        campaign.objective_type,\n        campaign.optimization_target_type,\n        campaign.is_audience_expansion_enabled,\n        campaign.is_offsite_delivery_enabled,\n        campaign.run_schedule_start_at,\n        campaign.run_schedule_end_at,\n        campaign.last_modified_at,\n        campaign.created_at,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.cost) as cost\n\n        \n\n\n\n\n    \n    from report \n    left join campaign \n        on report.campaign_id = campaign.campaign_id\n    left join campaign_group\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\n    left join account \n        on campaign.account_id = account.account_id\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__campaign_report`"}, "model.linkedin.linkedin_ads__account_report": {"raw_sql": "with account as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\ncampaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_latest_version\n),\n\nreport as (\n\n    select *\n    from {{ var('ad_analytics_by_campaign') }}\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        account.account_id,\n        account.account_name,\n        account.version_tag,\n        account.currency,\n        account.status,\n        account.type,\n        account.last_modified_at,\n        account.created_at,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.cost) as cost\n\n        {{ fivetran_utils.persist_pass_through_columns('linkedin_ads__campaign_passthrough_metrics', transform='sum') }}\n    \n    from report \n    left join campaign \n        on report.campaign_id = campaign.campaign_id\n    left join account \n        on campaign.account_id = account.account_id\n\n    {{ dbt_utils.group_by(n=9) }}\n\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__campaign_history", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads", "fqn": ["linkedin", "linkedin_ads__account_report"], "unique_id": "model.linkedin.linkedin_ads__account_report", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "linkedin_ads__account_report.sql", "original_file_path": "models/linkedin_ads__account_report.sql", "name": "linkedin_ads__account_report", "alias": "linkedin_ads__account_report", "checksum": {"name": "sha256", "checksum": "f79bc27e12902785f5a8997074841392e8051e7030a8321e4bc27edbef0b0f8b"}, "tags": [], "refs": [["stg_linkedin_ads__account_history"], ["stg_linkedin_ads__campaign_history"], ["stg_linkedin_ads__ad_analytics_by_campaign"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the account level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar (default).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "ACTIVE - Account is active; this is the default state\nCANCELLED - Account has been permanently cancelled\nDRAFT - Account is in draft status, meaning it's not yet fully set up and it is not serving\nPENDING_DELETION - Denotes that the account has been requested to be deleted that is currently pending\nREMOVED - Denotes that the account was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "BUSINESS - This is the only value allowed when creating accounts through the API.\nENTERPRISE - This value cannot be used to create accounts through the API and is reserved for accounts created by LinkedIn's internal ad operations systems.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin://models/linkedin.yml", "compiled_path": "target/compiled/linkedin/models/linkedin_ads__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "linkedin_ads"}, "created_at": 1660323536.766468, "compiled_sql": "with account as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history`\n    where is_latest_version\n),\n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history`\n    where is_latest_version\n),\n\nreport as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_campaign`\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        account.account_id,\n        account.account_name,\n        account.version_tag,\n        account.currency,\n        account.status,\n        account.type,\n        account.last_modified_at,\n        account.created_at,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.cost) as cost\n\n        \n\n\n\n\n    \n    from report \n    left join campaign \n        on report.campaign_id = campaign.campaign_id\n    left join account \n        on campaign.account_id = account.account_id\n\n    group by 1,2,3,4,5,6,7,8,9\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__account_report`"}, "model.linkedin.linkedin_ads__url_report": {"raw_sql": "with creative as (\n\n    select *\n    from {{ var('creative_history') }}\n),\n\ncampaign as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_latest_version\n),\n\ncampaign_group as (\n\n    select *\n    from {{ var('campaign_group_history') }}\n    where is_latest_version\n),\n\naccount as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_latest_version\n),\n\nreport as (\n\n    select *\n    from {{ var('ad_analytics_by_creative') }}\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        creative.click_uri,\n        creative.base_url,\n        creative.url_host,\n        creative.url_path,\n        creative.utm_source,\n        creative.utm_medium,\n        creative.utm_campaign,\n        creative.utm_content,\n        creative.utm_term,\n        creative.creative_id,\n        creative.version_tag,\n        campaign.campaign_id,\n        campaign.campaign_name,\n        campaign_group.campaign_group_id,\n        campaign_group.campaign_group_name,\n        account.account_id,\n        account.account_name,\n        account.currency,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.cost) as cost\n\n        {{ fivetran_utils.persist_pass_through_columns('linkedin_ads__creative_passthrough_metrics', transform='sum') }}\n    \n    from report \n    left join creative \n        on report.creative_id = creative.creative_id\n    left join campaign \n        on creative.campaign_id = campaign.campaign_id\n    left join campaign_group\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\n    left join account \n        on campaign.account_id = account.account_id\n\n    where creative.click_uri is not null\n\n    {{ dbt_utils.group_by(n=19) }}\n\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.linkedin_source.stg_linkedin_ads__creative_history", "model.linkedin_source.stg_linkedin_ads__campaign_history", "model.linkedin_source.stg_linkedin_ads__campaign_group_history", "model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_linkedin_ads", "fqn": ["linkedin", "linkedin_ads__url_report"], "unique_id": "model.linkedin.linkedin_ads__url_report", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "linkedin_ads__url_report.sql", "original_file_path": "models/linkedin_ads__url_report.sql", "name": "linkedin_ads__url_report", "alias": "linkedin_ads__url_report", "checksum": {"name": "sha256", "checksum": "68604ce090aa3e4236304cc44caba791d40d483cfb1cb89785374dd40b74e151"}, "tags": [], "refs": [["stg_linkedin_ads__creative_history"], ["stg_linkedin_ads__campaign_history"], ["stg_linkedin_ads__campaign_group_history"], ["stg_linkedin_ads__account_history"], ["stg_linkedin_ads__ad_analytics_by_creative"]], "sources": [], "metrics": [], "description": "Each record in this table represents the daily performance of ads at the url level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "Unique internal ID representing the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_uri": {"name": "click_uri", "description": "Required when creative type is TEXT_AD. Maximum character limit of 500 after URL encoding all special characters. \nLimit does not include the \"https://\" prefix.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar (default).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the creative's campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the creative's campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin://models/linkedin.yml", "compiled_path": "target/compiled/linkedin/models/linkedin_ads__url_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "linkedin_ads"}, "created_at": 1660323536.8048298, "compiled_sql": "with creative as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__creative_history`\n),\n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history`\n    where is_latest_version\n),\n\ncampaign_group as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_group_history`\n    where is_latest_version\n),\n\naccount as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history`\n    where is_latest_version\n),\n\nreport as (\n\n    select *\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_creative`\n),\n\nfinal as (\n\n    select \n        report.date_day,\n        creative.click_uri,\n        creative.base_url,\n        creative.url_host,\n        creative.url_path,\n        creative.utm_source,\n        creative.utm_medium,\n        creative.utm_campaign,\n        creative.utm_content,\n        creative.utm_term,\n        creative.creative_id,\n        creative.version_tag,\n        campaign.campaign_id,\n        campaign.campaign_name,\n        campaign_group.campaign_group_id,\n        campaign_group.campaign_group_name,\n        account.account_id,\n        account.account_name,\n        account.currency,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.cost) as cost\n\n        \n\n\n\n\n    \n    from report \n    left join creative \n        on report.creative_id = creative.creative_id\n    left join campaign \n        on creative.campaign_id = campaign.campaign_id\n    left join campaign_group\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\n    left join account \n        on campaign.account_id = account.account_id\n\n    where creative.click_uri is not null\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__url_report`"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_id.cc273ee54e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__account_history_account_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_id.cc273ee54e", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__account_history_account_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__account_history_account_id", "alias": "not_null_stg_microsoft_ads__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__account_history_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323533.9744508, "compiled_sql": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_microsoft_ads__account_history"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_history_account_id__modified_at.5975327479": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_11cb28b23f58e7c1362184b4fa6c2fe7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "modified_at"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__account_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_11cb28b23f58e7c1362184b4fa6c2fe7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_history_account_id__modified_at"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_history_account_id__modified_at.5975327479", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_11cb28b23f58e7c1362184b4fa6c2fe7.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_history_account_id__modified_at", "alias": "dbt_utils_unique_combination_o_11cb28b23f58e7c1362184b4fa6c2fe7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_11cb28b23f58e7c1362184b4fa6c2fe7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_11cb28b23f58e7c1362184b4fa6c2fe7"}, "created_at": 1660323533.97722, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, modified_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_history`\n    group by account_id, modified_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__account_history"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_daily_report_account_id.b17f45fe79": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__account_daily_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__account_daily_report_account_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_daily_report_account_id.b17f45fe79", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__account_daily_report_account_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__account_daily_report_account_id", "alias": "not_null_stg_microsoft_ads__account_daily_report_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__account_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__account_daily_report_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323533.9898582, "compiled_sql": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_daily_report`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_microsoft_ads__account_daily_report"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_daily_report_date_day__account_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.85ae65d69a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cc3a3d15707b6220c07fd845626d47d3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "device_os", "device_type", "network", "currency_code", "ad_distribution", "bid_match_type", "delivered_match_type", "top_vs_other"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__account_daily_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_daily_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cc3a3d15707b6220c07fd845626d47d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_daily_report_date_day__account_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_daily_report_date_day__account_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.85ae65d69a", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_cc3a3d15707b6220c07fd845626d47d3.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_daily_report_date_day__account_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other", "alias": "dbt_utils_unique_combination_o_cc3a3d15707b6220c07fd845626d47d3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__account_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_cc3a3d15707b6220c07fd845626d47d3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cc3a3d15707b6220c07fd845626d47d3"}, "created_at": 1660323533.9922, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, device_os, device_type, network, currency_code, ad_distribution, bid_match_type, delivered_match_type, top_vs_other\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__account_daily_report`\n    group by date_day, account_id, device_os, device_type, network, currency_code, ad_distribution, bid_match_type, delivered_match_type, top_vs_other\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__account_daily_report"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_id.c8353342b7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__ad_group_history_ad_group_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_id.c8353342b7", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__ad_group_history_ad_group_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__ad_group_history_ad_group_id", "alias": "not_null_stg_microsoft_ads__ad_group_history_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__ad_group_history_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323533.999485, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_history`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.stg_microsoft_ads__ad_group_history"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_history_ad_group_id__modified_at.12004c9de0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_29c954196a0dc02a0d6371d1a73027bb\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "modified_at"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_group_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_29c954196a0dc02a0d6371d1a73027bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_history_ad_group_id__modified_at"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_history_ad_group_id__modified_at.12004c9de0", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_29c954196a0dc02a0d6371d1a73027bb.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_history_ad_group_id__modified_at", "alias": "dbt_utils_unique_combination_o_29c954196a0dc02a0d6371d1a73027bb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_29c954196a0dc02a0d6371d1a73027bb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_29c954196a0dc02a0d6371d1a73027bb"}, "created_at": 1660323534.0016692, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, modified_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_history`\n    group by ad_group_id, modified_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__ad_group_history"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_daily_report_ad_group_id.3e03e6eff7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_group_daily_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__ad_group_daily_report_ad_group_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_daily_report_ad_group_id.3e03e6eff7", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__ad_group_daily_report_ad_group_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__ad_group_daily_report_ad_group_id", "alias": "not_null_stg_microsoft_ads__ad_group_daily_report_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_group_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__ad_group_daily_report_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.006363, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_daily_report`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.stg_microsoft_ads__ad_group_daily_report"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_daily_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.8792b4adf4": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3da4052d148940c4b772fa07b9cd0016\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_group_id", "device_os", "device_type", "network", "language", "currency_code", "ad_distribution", "bid_match_type", "delivered_match_type", "top_vs_other"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_group_daily_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3da4052d148940c4b772fa07b9cd0016", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_daily_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_daily_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.8792b4adf4", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_3da4052d148940c4b772fa07b9cd0016.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_daily_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other", "alias": "dbt_utils_unique_combination_o_3da4052d148940c4b772fa07b9cd0016", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_group_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_3da4052d148940c4b772fa07b9cd0016.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3da4052d148940c4b772fa07b9cd0016"}, "created_at": 1660323534.008436, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_group_id, device_os, device_type, network, language, currency_code, ad_distribution, bid_match_type, delivered_match_type, top_vs_other\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_group_daily_report`\n    group by date_day, account_id, campaign_id, ad_group_id, device_os, device_type, network, language, currency_code, ad_distribution, bid_match_type, delivered_match_type, top_vs_other\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__ad_group_daily_report"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_id.6d02c26574": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__ad_history_ad_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_id.6d02c26574", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__ad_history_ad_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__ad_history_ad_id", "alias": "not_null_stg_microsoft_ads__ad_history_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__ad_history_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.017278, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_history`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_microsoft_ads__ad_history"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_history_ad_id__modified_at.1f05b4ee6f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_dccf83ffe0fa59cf437b9dc8e3b754cb\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "modified_at"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_dccf83ffe0fa59cf437b9dc8e3b754cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_history_ad_id__modified_at"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_history_ad_id__modified_at.1f05b4ee6f", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_dccf83ffe0fa59cf437b9dc8e3b754cb.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_history_ad_id__modified_at", "alias": "dbt_utils_unique_combination_o_dccf83ffe0fa59cf437b9dc8e3b754cb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_dccf83ffe0fa59cf437b9dc8e3b754cb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_dccf83ffe0fa59cf437b9dc8e3b754cb"}, "created_at": 1660323534.019219, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, modified_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_history`\n    group by ad_id, modified_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__ad_history"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_daily_report_ad_id.1ed6689aa8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_daily_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__ad_daily_report_ad_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_daily_report_ad_id.1ed6689aa8", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__ad_daily_report_ad_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__ad_daily_report_ad_id", "alias": "not_null_stg_microsoft_ads__ad_daily_report_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__ad_daily_report_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.0243359, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_daily_report`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_microsoft_ads__ad_daily_report"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.80e8146841": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_29e31bfeb4535a5db2d2c94e28201269\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_group_id", "ad_id", "device_os", "device_type", "network", "language", "currency_code", "ad_distribution", "bid_match_type", "delivered_match_type", "top_vs_other"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_daily_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_29e31bfeb4535a5db2d2c94e28201269", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.80e8146841", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_29e31bfeb4535a5db2d2c94e28201269.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other", "alias": "dbt_utils_unique_combination_o_29e31bfeb4535a5db2d2c94e28201269", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_29e31bfeb4535a5db2d2c94e28201269.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_29e31bfeb4535a5db2d2c94e28201269"}, "created_at": 1660323534.026449, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_group_id, ad_id, device_os, device_type, network, language, currency_code, ad_distribution, bid_match_type, delivered_match_type, top_vs_other\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__ad_daily_report`\n    group by date_day, account_id, campaign_id, ad_group_id, ad_id, device_os, device_type, network, language, currency_code, ad_distribution, bid_match_type, delivered_match_type, top_vs_other\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__ad_daily_report"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_id.ee080a2122": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__campaign_history_campaign_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_id.ee080a2122", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__campaign_history_campaign_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__campaign_history_campaign_id", "alias": "not_null_stg_microsoft_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.0347772, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_microsoft_ads__campaign_history"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_history_campaign_id__modified_at.d2a9279427": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9884c7b093c29b10bef342a8424fc7e0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "modified_at"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__campaign_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9884c7b093c29b10bef342a8424fc7e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_history_campaign_id__modified_at"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_history_campaign_id__modified_at.d2a9279427", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_9884c7b093c29b10bef342a8424fc7e0.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_history_campaign_id__modified_at", "alias": "dbt_utils_unique_combination_o_9884c7b093c29b10bef342a8424fc7e0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_9884c7b093c29b10bef342a8424fc7e0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9884c7b093c29b10bef342a8424fc7e0"}, "created_at": 1660323534.036976, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, modified_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_history`\n    group by campaign_id, modified_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__campaign_history"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_daily_report_campaign_id.8ac0418e84": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__campaign_daily_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__campaign_daily_report_campaign_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_daily_report_campaign_id.8ac0418e84", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__campaign_daily_report_campaign_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__campaign_daily_report_campaign_id", "alias": "not_null_stg_microsoft_ads__campaign_daily_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__campaign_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__campaign_daily_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.042005, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_daily_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_microsoft_ads__campaign_daily_report"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_daily_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.f6a43acb95": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0a679e9606c18c2d49406108e30d9e3d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "device_os", "device_type", "network", "currency_code", "ad_distribution", "bid_match_type", "delivered_match_type", "top_vs_other"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__campaign_daily_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0a679e9606c18c2d49406108e30d9e3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_daily_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_daily_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.f6a43acb95", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_0a679e9606c18c2d49406108e30d9e3d.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_daily_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other", "alias": "dbt_utils_unique_combination_o_0a679e9606c18c2d49406108e30d9e3d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__campaign_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_0a679e9606c18c2d49406108e30d9e3d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0a679e9606c18c2d49406108e30d9e3d"}, "created_at": 1660323534.04419, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, device_os, device_type, network, currency_code, ad_distribution, bid_match_type, delivered_match_type, top_vs_other\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__campaign_daily_report`\n    group by date_day, account_id, campaign_id, device_os, device_type, network, currency_code, ad_distribution, bid_match_type, delivered_match_type, top_vs_other\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__campaign_daily_report"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__keyword_history_keyword_id.19164a6209": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__keyword_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__keyword_history_keyword_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__keyword_history_keyword_id.19164a6209", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__keyword_history_keyword_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__keyword_history_keyword_id", "alias": "not_null_stg_microsoft_ads__keyword_history_keyword_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__keyword_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__keyword_history_keyword_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.05223, "compiled_sql": "\n    \n    \n\n\n\nselect keyword_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_history`\nwhere keyword_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword_id", "file_key_name": "models.stg_microsoft_ads__keyword_history"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_history_keyword_id__modified_at.e1c525286c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_92d3a0a582798627a8df5ec246b5ec67\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["keyword_id", "modified_at"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__keyword_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_92d3a0a582798627a8df5ec246b5ec67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_history_keyword_id__modified_at"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_history_keyword_id__modified_at.e1c525286c", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_92d3a0a582798627a8df5ec246b5ec67.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_history_keyword_id__modified_at", "alias": "dbt_utils_unique_combination_o_92d3a0a582798627a8df5ec246b5ec67", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__keyword_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_92d3a0a582798627a8df5ec246b5ec67.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_92d3a0a582798627a8df5ec246b5ec67"}, "created_at": 1660323534.054156, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        keyword_id, modified_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_history`\n    group by keyword_id, modified_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__keyword_history"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__keyword_daily_report_keyword_id.e16b8c5047": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__keyword_daily_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__keyword_daily_report_keyword_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__keyword_daily_report_keyword_id.e16b8c5047", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__keyword_daily_report_keyword_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__keyword_daily_report_keyword_id", "alias": "not_null_stg_microsoft_ads__keyword_daily_report_keyword_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__keyword_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__keyword_daily_report_keyword_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.059315, "compiled_sql": "\n    \n    \n\n\n\nselect keyword_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_daily_report`\nwhere keyword_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword_id", "file_key_name": "models.stg_microsoft_ads__keyword_daily_report"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.c6f46d202a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9a7282cfedb49cdf2e4d14422bce0ed7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_group_id", "ad_id", "keyword_id", "device_os", "device_type", "network", "language", "currency_code", "ad_distribution", "bid_match_type", "delivered_match_type", "top_vs_other"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__keyword_daily_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9a7282cfedb49cdf2e4d14422bce0ed7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.c6f46d202a", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_9a7282cfedb49cdf2e4d14422bce0ed7.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other", "alias": "dbt_utils_unique_combination_o_9a7282cfedb49cdf2e4d14422bce0ed7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__keyword_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_9a7282cfedb49cdf2e4d14422bce0ed7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9a7282cfedb49cdf2e4d14422bce0ed7"}, "created_at": 1660323534.061367, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_group_id, ad_id, keyword_id, device_os, device_type, network, language, currency_code, ad_distribution, bid_match_type, delivered_match_type, top_vs_other\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__keyword_daily_report`\n    group by date_day, account_id, campaign_id, ad_group_id, ad_id, keyword_id, device_os, device_type, network, language, currency_code, ad_distribution, bid_match_type, delivered_match_type, top_vs_other\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__keyword_daily_report"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__search_daily_report_search_query.57f687adcc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "search_query", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__search_daily_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__search_daily_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__search_daily_report_search_query"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__search_daily_report_search_query.57f687adcc", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__search_daily_report_search_query.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__search_daily_report_search_query", "alias": "not_null_stg_microsoft_ads__search_daily_report_search_query", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__search_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__search_daily_report_search_query.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.070237, "compiled_sql": "\n    \n    \n\n\n\nselect search_query\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__search_daily_report`\nwhere search_query is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "search_query", "file_key_name": "models.stg_microsoft_ads__search_daily_report"}, "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__search_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network__language__bid_match_type__delivered_match_type__top_vs_other.03cf031d0c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b05df3e2693998bbea08961dfab31379\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_group_id", "ad_id", "keyword_id", "search_query", "device_os", "device_type", "network", "language", "bid_match_type", "delivered_match_type", "top_vs_other"], "model": "{{ get_where_subquery(ref('stg_microsoft_ads__search_daily_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__search_daily_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b05df3e2693998bbea08961dfab31379", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__search_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network__language__bid_match_type__delivered_match_type__top_vs_other"], "unique_id": "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__search_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network__language__bid_match_type__delivered_match_type__top_vs_other.03cf031d0c", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "dbt_utils_unique_combination_o_b05df3e2693998bbea08961dfab31379.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_microsoft_ads__search_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network__language__bid_match_type__delivered_match_type__top_vs_other", "alias": "dbt_utils_unique_combination_o_b05df3e2693998bbea08961dfab31379", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__search_daily_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/dbt_utils_unique_combination_o_b05df3e2693998bbea08961dfab31379.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b05df3e2693998bbea08961dfab31379"}, "created_at": 1660323534.072205, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_group_id, ad_id, keyword_id, search_query, device_os, device_type, network, language, bid_match_type, delivered_match_type, top_vs_other\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads_source`.`stg_microsoft_ads__search_daily_report`\n    group by date_day, account_id, campaign_id, ad_group_id, ad_id, keyword_id, search_query, device_os, device_type, network, language, bid_match_type, delivered_match_type, top_vs_other\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_microsoft_ads__search_daily_report"}, "test.tiktok_ads.not_null_tiktok_ads__advertiser_report_date_day.1276998c99": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('tiktok_ads__advertiser_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__advertiser_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "not_null_tiktok_ads__advertiser_report_date_day"], "unique_id": "test.tiktok_ads.not_null_tiktok_ads__advertiser_report_date_day.1276998c99", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "not_null_tiktok_ads__advertiser_report_date_day.sql", "original_file_path": "models/tiktok_ads.yml", "name": "not_null_tiktok_ads__advertiser_report_date_day", "alias": "not_null_tiktok_ads__advertiser_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__advertiser_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/not_null_tiktok_ads__advertiser_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.14077, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__advertiser_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.tiktok_ads__advertiser_report"}, "test.tiktok_ads.not_null_tiktok_ads__advertiser_report_advertiser_id.f956c568ce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "advertiser_id", "model": "{{ get_where_subquery(ref('tiktok_ads__advertiser_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__advertiser_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "not_null_tiktok_ads__advertiser_report_advertiser_id"], "unique_id": "test.tiktok_ads.not_null_tiktok_ads__advertiser_report_advertiser_id.f956c568ce", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "not_null_tiktok_ads__advertiser_report_advertiser_id.sql", "original_file_path": "models/tiktok_ads.yml", "name": "not_null_tiktok_ads__advertiser_report_advertiser_id", "alias": "not_null_tiktok_ads__advertiser_report_advertiser_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__advertiser_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/not_null_tiktok_ads__advertiser_report_advertiser_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.1429062, "compiled_sql": "\n    \n    \n\n\n\nselect advertiser_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__advertiser_report`\nwhere advertiser_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "advertiser_id", "file_key_name": "models.tiktok_ads__advertiser_report"}, "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__advertiser_report_advertiser_id__date_day.d298bb3cf9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_64e56e18897a7d7395bde426b0634f89\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["advertiser_id", "date_day"], "model": "{{ get_where_subquery(ref('tiktok_ads__advertiser_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__advertiser_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_64e56e18897a7d7395bde426b0634f89", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "dbt_utils_unique_combination_of_columns_tiktok_ads__advertiser_report_advertiser_id__date_day"], "unique_id": "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__advertiser_report_advertiser_id__date_day.d298bb3cf9", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "dbt_utils_unique_combination_o_64e56e18897a7d7395bde426b0634f89.sql", "original_file_path": "models/tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_tiktok_ads__advertiser_report_advertiser_id__date_day", "alias": "dbt_utils_unique_combination_o_64e56e18897a7d7395bde426b0634f89", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__advertiser_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/dbt_utils_unique_combination_o_64e56e18897a7d7395bde426b0634f89.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_64e56e18897a7d7395bde426b0634f89"}, "created_at": 1660323534.144993, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        advertiser_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__advertiser_report`\n    group by advertiser_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.tiktok_ads__advertiser_report"}, "test.tiktok_ads.not_null_tiktok_ads__ad_report_date_day.d61ee4a5ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('tiktok_ads__ad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "not_null_tiktok_ads__ad_report_date_day"], "unique_id": "test.tiktok_ads.not_null_tiktok_ads__ad_report_date_day.d61ee4a5ed", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "not_null_tiktok_ads__ad_report_date_day.sql", "original_file_path": "models/tiktok_ads.yml", "name": "not_null_tiktok_ads__ad_report_date_day", "alias": "not_null_tiktok_ads__ad_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/not_null_tiktok_ads__ad_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.150285, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__ad_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.tiktok_ads__ad_report"}, "test.tiktok_ads.not_null_tiktok_ads__ad_report_ad_id.2d8166e707": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('tiktok_ads__ad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "not_null_tiktok_ads__ad_report_ad_id"], "unique_id": "test.tiktok_ads.not_null_tiktok_ads__ad_report_ad_id.2d8166e707", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "not_null_tiktok_ads__ad_report_ad_id.sql", "original_file_path": "models/tiktok_ads.yml", "name": "not_null_tiktok_ads__ad_report_ad_id", "alias": "not_null_tiktok_ads__ad_report_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/not_null_tiktok_ads__ad_report_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.15221, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__ad_report`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.tiktok_ads__ad_report"}, "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__ad_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day.3a887710fb": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ef4585527dd6080f5f2e4d7aa8408c85\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "ad_group_id", "campaign_id", "advertiser_id", "date_day"], "model": "{{ get_where_subquery(ref('tiktok_ads__ad_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__ad_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ef4585527dd6080f5f2e4d7aa8408c85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "dbt_utils_unique_combination_of_columns_tiktok_ads__ad_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day"], "unique_id": "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__ad_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day.3a887710fb", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "dbt_utils_unique_combination_o_ef4585527dd6080f5f2e4d7aa8408c85.sql", "original_file_path": "models/tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_tiktok_ads__ad_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day", "alias": "dbt_utils_unique_combination_o_ef4585527dd6080f5f2e4d7aa8408c85", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/dbt_utils_unique_combination_o_ef4585527dd6080f5f2e4d7aa8408c85.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ef4585527dd6080f5f2e4d7aa8408c85"}, "created_at": 1660323534.1544151, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, ad_group_id, campaign_id, advertiser_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__ad_report`\n    group by ad_id, ad_group_id, campaign_id, advertiser_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.tiktok_ads__ad_report"}, "test.tiktok_ads.not_null_tiktok_ads__ad_group_report_date_day.e39164964e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('tiktok_ads__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "not_null_tiktok_ads__ad_group_report_date_day"], "unique_id": "test.tiktok_ads.not_null_tiktok_ads__ad_group_report_date_day.e39164964e", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "not_null_tiktok_ads__ad_group_report_date_day.sql", "original_file_path": "models/tiktok_ads.yml", "name": "not_null_tiktok_ads__ad_group_report_date_day", "alias": "not_null_tiktok_ads__ad_group_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/not_null_tiktok_ads__ad_group_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.161962, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__ad_group_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.tiktok_ads__ad_group_report"}, "test.tiktok_ads.not_null_tiktok_ads__ad_group_report_ad_group_id.17fb8710f4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('tiktok_ads__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "not_null_tiktok_ads__ad_group_report_ad_group_id"], "unique_id": "test.tiktok_ads.not_null_tiktok_ads__ad_group_report_ad_group_id.17fb8710f4", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "not_null_tiktok_ads__ad_group_report_ad_group_id.sql", "original_file_path": "models/tiktok_ads.yml", "name": "not_null_tiktok_ads__ad_group_report_ad_group_id", "alias": "not_null_tiktok_ads__ad_group_report_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/not_null_tiktok_ads__ad_group_report_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.163934, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__ad_group_report`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.tiktok_ads__ad_group_report"}, "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__ad_group_report_ad_group_id__campaign_id__advertiser_id__date_day.ecd611f27e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_61fb67766378fce3f732a5c7a2a8cec0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "campaign_id", "advertiser_id", "date_day"], "model": "{{ get_where_subquery(ref('tiktok_ads__ad_group_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__ad_group_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_61fb67766378fce3f732a5c7a2a8cec0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "dbt_utils_unique_combination_of_columns_tiktok_ads__ad_group_report_ad_group_id__campaign_id__advertiser_id__date_day"], "unique_id": "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__ad_group_report_ad_group_id__campaign_id__advertiser_id__date_day.ecd611f27e", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "dbt_utils_unique_combination_o_61fb67766378fce3f732a5c7a2a8cec0.sql", "original_file_path": "models/tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_tiktok_ads__ad_group_report_ad_group_id__campaign_id__advertiser_id__date_day", "alias": "dbt_utils_unique_combination_o_61fb67766378fce3f732a5c7a2a8cec0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/dbt_utils_unique_combination_o_61fb67766378fce3f732a5c7a2a8cec0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_61fb67766378fce3f732a5c7a2a8cec0"}, "created_at": 1660323534.166168, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, campaign_id, advertiser_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__ad_group_report`\n    group by ad_group_id, campaign_id, advertiser_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.tiktok_ads__ad_group_report"}, "test.tiktok_ads.not_null_tiktok_ads__campaign_report_date_day.3807b0e836": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('tiktok_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "not_null_tiktok_ads__campaign_report_date_day"], "unique_id": "test.tiktok_ads.not_null_tiktok_ads__campaign_report_date_day.3807b0e836", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "not_null_tiktok_ads__campaign_report_date_day.sql", "original_file_path": "models/tiktok_ads.yml", "name": "not_null_tiktok_ads__campaign_report_date_day", "alias": "not_null_tiktok_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/not_null_tiktok_ads__campaign_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.1717691, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.tiktok_ads__campaign_report"}, "test.tiktok_ads.not_null_tiktok_ads__campaign_report_campaign_id.8a2b0c8ef8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('tiktok_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "not_null_tiktok_ads__campaign_report_campaign_id"], "unique_id": "test.tiktok_ads.not_null_tiktok_ads__campaign_report_campaign_id.8a2b0c8ef8", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "not_null_tiktok_ads__campaign_report_campaign_id.sql", "original_file_path": "models/tiktok_ads.yml", "name": "not_null_tiktok_ads__campaign_report_campaign_id", "alias": "not_null_tiktok_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/not_null_tiktok_ads__campaign_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.173831, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.tiktok_ads__campaign_report"}, "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__campaign_report_campaign_id__advertiser_id__date_day.03c4f86b19": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_65ff4fe3d3440b03aa9c35fc3e4bc645\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "advertiser_id", "date_day"], "model": "{{ get_where_subquery(ref('tiktok_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_65ff4fe3d3440b03aa9c35fc3e4bc645", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "dbt_utils_unique_combination_of_columns_tiktok_ads__campaign_report_campaign_id__advertiser_id__date_day"], "unique_id": "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__campaign_report_campaign_id__advertiser_id__date_day.03c4f86b19", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "dbt_utils_unique_combination_o_65ff4fe3d3440b03aa9c35fc3e4bc645.sql", "original_file_path": "models/tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_tiktok_ads__campaign_report_campaign_id__advertiser_id__date_day", "alias": "dbt_utils_unique_combination_o_65ff4fe3d3440b03aa9c35fc3e4bc645", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/dbt_utils_unique_combination_o_65ff4fe3d3440b03aa9c35fc3e4bc645.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_65ff4fe3d3440b03aa9c35fc3e4bc645"}, "created_at": 1660323534.1759648, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, advertiser_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__campaign_report`\n    group by campaign_id, advertiser_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.tiktok_ads__campaign_report"}, "test.tiktok_ads.not_null_tiktok_ads__url_report_date_day.d593573eff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('tiktok_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "not_null_tiktok_ads__url_report_date_day"], "unique_id": "test.tiktok_ads.not_null_tiktok_ads__url_report_date_day.d593573eff", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "not_null_tiktok_ads__url_report_date_day.sql", "original_file_path": "models/tiktok_ads.yml", "name": "not_null_tiktok_ads__url_report_date_day", "alias": "not_null_tiktok_ads__url_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/not_null_tiktok_ads__url_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.181314, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__url_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.tiktok_ads__url_report"}, "test.tiktok_ads.not_null_tiktok_ads__url_report_ad_id.6c41067bd0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('tiktok_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "not_null_tiktok_ads__url_report_ad_id"], "unique_id": "test.tiktok_ads.not_null_tiktok_ads__url_report_ad_id.6c41067bd0", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "not_null_tiktok_ads__url_report_ad_id.sql", "original_file_path": "models/tiktok_ads.yml", "name": "not_null_tiktok_ads__url_report_ad_id", "alias": "not_null_tiktok_ads__url_report_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/not_null_tiktok_ads__url_report_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.18352, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__url_report`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.tiktok_ads__url_report"}, "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__url_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day.cf95489e47": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1cddc99c1bc045b4142e991924c5fa50\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "ad_group_id", "campaign_id", "advertiser_id", "date_day"], "model": "{{ get_where_subquery(ref('tiktok_ads__url_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads.tiktok_ads__url_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1cddc99c1bc045b4142e991924c5fa50", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads", "dbt_utils_unique_combination_of_columns_tiktok_ads__url_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day"], "unique_id": "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__url_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day.cf95489e47", "package_name": "tiktok_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads", "path": "dbt_utils_unique_combination_o_1cddc99c1bc045b4142e991924c5fa50.sql", "original_file_path": "models/tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_tiktok_ads__url_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day", "alias": "dbt_utils_unique_combination_o_1cddc99c1bc045b4142e991924c5fa50", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tiktok_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads/models/tiktok_ads.yml/dbt_utils_unique_combination_o_1cddc99c1bc045b4142e991924c5fa50.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1cddc99c1bc045b4142e991924c5fa50"}, "created_at": 1660323534.1856918, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, ad_group_id, campaign_id, advertiser_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_tiktok_ads`.`tiktok_ads__url_report`\n    group by ad_id, ad_group_id, campaign_id, advertiser_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.tiktok_ads__url_report"}, "test.twitter_ads.not_null_twitter_ads__campaign_report_campaign_id.03b1c451b8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_report_campaign_id"], "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_report_campaign_id.03b1c451b8", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__campaign_report_campaign_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__campaign_report_campaign_id", "alias": "not_null_twitter_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__campaign_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.247112, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.twitter_ads__campaign_report"}, "test.twitter_ads.not_null_twitter_ads__campaign_report_date_day.2b30b279b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_report_date_day"], "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_report_date_day.2b30b279b0", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__campaign_report_date_day.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__campaign_report_date_day", "alias": "not_null_twitter_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__campaign_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.249356, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.twitter_ads__campaign_report"}, "test.twitter_ads.not_null_twitter_ads__campaign_report_placement.c66d252e82": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_report_placement"], "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_report_placement.c66d252e82", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__campaign_report_placement.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__campaign_report_placement", "alias": "not_null_twitter_ads__campaign_report_placement", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__campaign_report_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.251433, "compiled_sql": "\n    \n    \n\n\n\nselect placement\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__campaign_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placement", "file_key_name": "models.twitter_ads__campaign_report"}, "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__campaign_report_date_day__campaign_id__placement__account_id.2b09fa5421": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f0c2d7aacdea4290554fab175e962a63\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "campaign_id", "placement", "account_id"], "model": "{{ get_where_subquery(ref('twitter_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f0c2d7aacdea4290554fab175e962a63", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "dbt_utils_unique_combination_of_columns_twitter_ads__campaign_report_date_day__campaign_id__placement__account_id"], "unique_id": "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__campaign_report_date_day__campaign_id__placement__account_id.2b09fa5421", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "dbt_utils_unique_combination_o_f0c2d7aacdea4290554fab175e962a63.sql", "original_file_path": "models/twitter.yml", "name": "dbt_utils_unique_combination_of_columns_twitter_ads__campaign_report_date_day__campaign_id__placement__account_id", "alias": "dbt_utils_unique_combination_o_f0c2d7aacdea4290554fab175e962a63", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/dbt_utils_unique_combination_o_f0c2d7aacdea4290554fab175e962a63.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f0c2d7aacdea4290554fab175e962a63"}, "created_at": 1660323534.253377, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, campaign_id, placement, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__campaign_report`\n    group by date_day, campaign_id, placement, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.twitter_ads__campaign_report"}, "test.twitter_ads.not_null_twitter_ads__line_item_report_date_day.86c934e8ce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__line_item_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__line_item_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__line_item_report_date_day"], "unique_id": "test.twitter_ads.not_null_twitter_ads__line_item_report_date_day.86c934e8ce", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__line_item_report_date_day.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__line_item_report_date_day", "alias": "not_null_twitter_ads__line_item_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__line_item_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__line_item_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.2589629, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__line_item_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.twitter_ads__line_item_report"}, "test.twitter_ads.not_null_twitter_ads__line_item_report_line_item_id.0462d58211": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_item_id", "model": "{{ get_where_subquery(ref('twitter_ads__line_item_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__line_item_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__line_item_report_line_item_id"], "unique_id": "test.twitter_ads.not_null_twitter_ads__line_item_report_line_item_id.0462d58211", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__line_item_report_line_item_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__line_item_report_line_item_id", "alias": "not_null_twitter_ads__line_item_report_line_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__line_item_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__line_item_report_line_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.2613251, "compiled_sql": "\n    \n    \n\n\n\nselect line_item_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__line_item_report`\nwhere line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "line_item_id", "file_key_name": "models.twitter_ads__line_item_report"}, "test.twitter_ads.not_null_twitter_ads__line_item_report_placement.f103369312": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__line_item_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__line_item_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__line_item_report_placement"], "unique_id": "test.twitter_ads.not_null_twitter_ads__line_item_report_placement.f103369312", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__line_item_report_placement.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__line_item_report_placement", "alias": "not_null_twitter_ads__line_item_report_placement", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__line_item_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__line_item_report_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.263472, "compiled_sql": "\n    \n    \n\n\n\nselect placement\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__line_item_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placement", "file_key_name": "models.twitter_ads__line_item_report"}, "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__line_item_report_date_day__line_item_id__placement__campaign_id__account_id.0e972e010a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fe15946b61e393e614a50ba3e361c168\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "line_item_id", "placement", "campaign_id", "account_id"], "model": "{{ get_where_subquery(ref('twitter_ads__line_item_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__line_item_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fe15946b61e393e614a50ba3e361c168", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "dbt_utils_unique_combination_of_columns_twitter_ads__line_item_report_date_day__line_item_id__placement__campaign_id__account_id"], "unique_id": "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__line_item_report_date_day__line_item_id__placement__campaign_id__account_id.0e972e010a", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "dbt_utils_unique_combination_o_fe15946b61e393e614a50ba3e361c168.sql", "original_file_path": "models/twitter.yml", "name": "dbt_utils_unique_combination_of_columns_twitter_ads__line_item_report_date_day__line_item_id__placement__campaign_id__account_id", "alias": "dbt_utils_unique_combination_o_fe15946b61e393e614a50ba3e361c168", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__line_item_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/dbt_utils_unique_combination_o_fe15946b61e393e614a50ba3e361c168.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fe15946b61e393e614a50ba3e361c168"}, "created_at": 1660323534.2654238, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, line_item_id, placement, campaign_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__line_item_report`\n    group by date_day, line_item_id, placement, campaign_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.twitter_ads__line_item_report"}, "test.twitter_ads.not_null_twitter_ads__account_report_date_day.84896c5846": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__account_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__account_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__account_report_date_day"], "unique_id": "test.twitter_ads.not_null_twitter_ads__account_report_date_day.84896c5846", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__account_report_date_day.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__account_report_date_day", "alias": "not_null_twitter_ads__account_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__account_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.271135, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__account_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.twitter_ads__account_report"}, "test.twitter_ads.not_null_twitter_ads__account_report_placement.157dcb6194": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__account_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__account_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__account_report_placement"], "unique_id": "test.twitter_ads.not_null_twitter_ads__account_report_placement.157dcb6194", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__account_report_placement.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__account_report_placement", "alias": "not_null_twitter_ads__account_report_placement", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__account_report_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.2731898, "compiled_sql": "\n    \n    \n\n\n\nselect placement\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__account_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placement", "file_key_name": "models.twitter_ads__account_report"}, "test.twitter_ads.not_null_twitter_ads__account_report_account_id.90d5808908": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('twitter_ads__account_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__account_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__account_report_account_id"], "unique_id": "test.twitter_ads.not_null_twitter_ads__account_report_account_id.90d5808908", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__account_report_account_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__account_report_account_id", "alias": "not_null_twitter_ads__account_report_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__account_report_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.275522, "compiled_sql": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__account_report`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.twitter_ads__account_report"}, "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__account_report_date_day__account_id__placement.a29cf85a4f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_75283810b353bfd3176c68c506c1da2f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "placement"], "model": "{{ get_where_subquery(ref('twitter_ads__account_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__account_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_75283810b353bfd3176c68c506c1da2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "dbt_utils_unique_combination_of_columns_twitter_ads__account_report_date_day__account_id__placement"], "unique_id": "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__account_report_date_day__account_id__placement.a29cf85a4f", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "dbt_utils_unique_combination_o_75283810b353bfd3176c68c506c1da2f.sql", "original_file_path": "models/twitter.yml", "name": "dbt_utils_unique_combination_of_columns_twitter_ads__account_report_date_day__account_id__placement", "alias": "dbt_utils_unique_combination_o_75283810b353bfd3176c68c506c1da2f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/dbt_utils_unique_combination_o_75283810b353bfd3176c68c506c1da2f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_75283810b353bfd3176c68c506c1da2f"}, "created_at": 1660323534.277507, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, placement\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__account_report`\n    group by date_day, account_id, placement\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.twitter_ads__account_report"}, "test.twitter_ads.not_null_twitter_ads__keyword_report_date_day.e0ce90c1ec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__keyword_report_date_day"], "unique_id": "test.twitter_ads.not_null_twitter_ads__keyword_report_date_day.e0ce90c1ec", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__keyword_report_date_day.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__keyword_report_date_day", "alias": "not_null_twitter_ads__keyword_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__keyword_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.282636, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__keyword_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.twitter_ads__keyword_report"}, "test.twitter_ads.not_null_twitter_ads__keyword_report_line_item_id.4982336b04": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_item_id", "model": "{{ get_where_subquery(ref('twitter_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__keyword_report_line_item_id"], "unique_id": "test.twitter_ads.not_null_twitter_ads__keyword_report_line_item_id.4982336b04", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__keyword_report_line_item_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__keyword_report_line_item_id", "alias": "not_null_twitter_ads__keyword_report_line_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__keyword_report_line_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.284668, "compiled_sql": "\n    \n    \n\n\n\nselect line_item_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__keyword_report`\nwhere line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "line_item_id", "file_key_name": "models.twitter_ads__keyword_report"}, "test.twitter_ads.not_null_twitter_ads__keyword_report_keyword.7f254683d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword", "model": "{{ get_where_subquery(ref('twitter_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__keyword_report_keyword"], "unique_id": "test.twitter_ads.not_null_twitter_ads__keyword_report_keyword.7f254683d7", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__keyword_report_keyword.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__keyword_report_keyword", "alias": "not_null_twitter_ads__keyword_report_keyword", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__keyword_report_keyword.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.2865689, "compiled_sql": "\n    \n    \n\n\n\nselect keyword\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__keyword_report`\nwhere keyword is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword", "file_key_name": "models.twitter_ads__keyword_report"}, "test.twitter_ads.not_null_twitter_ads__keyword_report_placement.1cf3231796": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__keyword_report_placement"], "unique_id": "test.twitter_ads.not_null_twitter_ads__keyword_report_placement.1cf3231796", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__keyword_report_placement.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__keyword_report_placement", "alias": "not_null_twitter_ads__keyword_report_placement", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__keyword_report_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.288928, "compiled_sql": "\n    \n    \n\n\n\nselect placement\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__keyword_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placement", "file_key_name": "models.twitter_ads__keyword_report"}, "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__keyword_report_date_day__line_item_id__keyword__placement__account_id__campaign_id.66e2c0d578": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1e65a2a357adb48dc61266acb21420c8\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "line_item_id", "keyword", "placement", "account_id", "campaign_id"], "model": "{{ get_where_subquery(ref('twitter_ads__keyword_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__keyword_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1e65a2a357adb48dc61266acb21420c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "dbt_utils_unique_combination_of_columns_twitter_ads__keyword_report_date_day__line_item_id__keyword__placement__account_id__campaign_id"], "unique_id": "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__keyword_report_date_day__line_item_id__keyword__placement__account_id__campaign_id.66e2c0d578", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "dbt_utils_unique_combination_o_1e65a2a357adb48dc61266acb21420c8.sql", "original_file_path": "models/twitter.yml", "name": "dbt_utils_unique_combination_of_columns_twitter_ads__keyword_report_date_day__line_item_id__keyword__placement__account_id__campaign_id", "alias": "dbt_utils_unique_combination_o_1e65a2a357adb48dc61266acb21420c8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/dbt_utils_unique_combination_o_1e65a2a357adb48dc61266acb21420c8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1e65a2a357adb48dc61266acb21420c8"}, "created_at": 1660323534.291063, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, line_item_id, keyword, placement, account_id, campaign_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__keyword_report`\n    group by date_day, line_item_id, keyword, placement, account_id, campaign_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.twitter_ads__keyword_report"}, "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_placement.d89c9b27e5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__promoted_tweet_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__promoted_tweet_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__promoted_tweet_report_placement"], "unique_id": "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_placement.d89c9b27e5", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__promoted_tweet_report_placement.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__promoted_tweet_report_placement", "alias": "not_null_twitter_ads__promoted_tweet_report_placement", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__promoted_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__promoted_tweet_report_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.2973928, "compiled_sql": "\n    \n    \n\n\n\nselect placement\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__promoted_tweet_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placement", "file_key_name": "models.twitter_ads__promoted_tweet_report"}, "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.5df08e154e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promoted_tweet_id", "model": "{{ get_where_subquery(ref('twitter_ads__promoted_tweet_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__promoted_tweet_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id"], "unique_id": "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.5df08e154e", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id", "alias": "not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__promoted_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.299351, "compiled_sql": "\n    \n    \n\n\n\nselect promoted_tweet_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__promoted_tweet_report`\nwhere promoted_tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "promoted_tweet_id", "file_key_name": "models.twitter_ads__promoted_tweet_report"}, "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id.a46b1b4082": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b6b8c6a3d568e7fb95f74b1851950fe1\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "promoted_tweet_id", "placement", "line_item_id", "campaign_id", "account_id"], "model": "{{ get_where_subquery(ref('twitter_ads__promoted_tweet_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__promoted_tweet_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b6b8c6a3d568e7fb95f74b1851950fe1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "dbt_utils_unique_combination_of_columns_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id"], "unique_id": "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id.a46b1b4082", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "dbt_utils_unique_combination_o_b6b8c6a3d568e7fb95f74b1851950fe1.sql", "original_file_path": "models/twitter.yml", "name": "dbt_utils_unique_combination_of_columns_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id", "alias": "dbt_utils_unique_combination_o_b6b8c6a3d568e7fb95f74b1851950fe1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__promoted_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/dbt_utils_unique_combination_o_b6b8c6a3d568e7fb95f74b1851950fe1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b6b8c6a3d568e7fb95f74b1851950fe1"}, "created_at": 1660323534.3016372, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, promoted_tweet_id, placement, line_item_id, campaign_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__promoted_tweet_report`\n    group by date_day, promoted_tweet_id, placement, line_item_id, campaign_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.twitter_ads__promoted_tweet_report"}, "test.twitter_ads.not_null_twitter_ads__url_report_date_day.33fcb7e04b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__url_report_date_day"], "unique_id": "test.twitter_ads.not_null_twitter_ads__url_report_date_day.33fcb7e04b", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__url_report_date_day.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__url_report_date_day", "alias": "not_null_twitter_ads__url_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__url_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.307765, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__url_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.twitter_ads__url_report"}, "test.twitter_ads.not_null_twitter_ads__url_report_placement.92ca3b192e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__url_report_placement"], "unique_id": "test.twitter_ads.not_null_twitter_ads__url_report_placement.92ca3b192e", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__url_report_placement.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__url_report_placement", "alias": "not_null_twitter_ads__url_report_placement", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__url_report_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.309762, "compiled_sql": "\n    \n    \n\n\n\nselect placement\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__url_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placement", "file_key_name": "models.twitter_ads__url_report"}, "test.twitter_ads.not_null_twitter_ads__url_report_promoted_tweet_id.d690f99143": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promoted_tweet_id", "model": "{{ get_where_subquery(ref('twitter_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter_ads__url_report_promoted_tweet_id"], "unique_id": "test.twitter_ads.not_null_twitter_ads__url_report_promoted_tweet_id.d690f99143", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter_ads__url_report_promoted_tweet_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter_ads__url_report_promoted_tweet_id", "alias": "not_null_twitter_ads__url_report_promoted_tweet_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__url_report_promoted_tweet_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.311759, "compiled_sql": "\n    \n    \n\n\n\nselect promoted_tweet_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__url_report`\nwhere promoted_tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "promoted_tweet_id", "file_key_name": "models.twitter_ads__url_report"}, "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__url_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id.30b826d8ff": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1e39c518397cb3ec9468966307298ff7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "promoted_tweet_id", "placement", "line_item_id", "campaign_id", "account_id"], "model": "{{ get_where_subquery(ref('twitter_ads__url_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__url_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1e39c518397cb3ec9468966307298ff7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "dbt_utils_unique_combination_of_columns_twitter_ads__url_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id"], "unique_id": "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__url_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id.30b826d8ff", "package_name": "twitter_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "dbt_utils_unique_combination_o_1e39c518397cb3ec9468966307298ff7.sql", "original_file_path": "models/twitter.yml", "name": "dbt_utils_unique_combination_of_columns_twitter_ads__url_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id", "alias": "dbt_utils_unique_combination_o_1e39c518397cb3ec9468966307298ff7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/dbt_utils_unique_combination_o_1e39c518397cb3ec9468966307298ff7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1e39c518397cb3ec9468966307298ff7"}, "created_at": 1660323534.313919, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, promoted_tweet_id, placement, line_item_id, campaign_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads`.`twitter_ads__url_report`\n    group by date_day, promoted_tweet_id, placement, line_item_id, campaign_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.twitter_ads__url_report"}, "test.pinterest.not_null_pinterest_ads__url_report_date_day.b09048037e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('pinterest_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__url_report_date_day"], "unique_id": "test.pinterest.not_null_pinterest_ads__url_report_date_day.b09048037e", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__url_report_date_day.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__url_report_date_day", "alias": "not_null_pinterest_ads__url_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__url_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.369327, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__url_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.pinterest_ads__url_report"}, "test.pinterest.not_null_pinterest_ads__url_report_pin_promotion_id.0da711ad6a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pin_promotion_id", "model": "{{ get_where_subquery(ref('pinterest_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__url_report_pin_promotion_id"], "unique_id": "test.pinterest.not_null_pinterest_ads__url_report_pin_promotion_id.0da711ad6a", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__url_report_pin_promotion_id.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__url_report_pin_promotion_id", "alias": "not_null_pinterest_ads__url_report_pin_promotion_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__url_report_pin_promotion_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.372603, "compiled_sql": "\n    \n    \n\n\n\nselect pin_promotion_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__url_report`\nwhere pin_promotion_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pin_promotion_id", "file_key_name": "models.pinterest_ads__url_report"}, "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__url_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day.bd87b032c8": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_21473120856be0adc6b82e83f018c3a4\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["pin_promotion_id", "ad_group_id", "campaign_id", "advertiser_id", "date_day"], "model": "{{ get_where_subquery(ref('pinterest_ads__url_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__url_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_21473120856be0adc6b82e83f018c3a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "dbt_utils_unique_combination_of_columns_pinterest_ads__url_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day"], "unique_id": "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__url_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day.bd87b032c8", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "dbt_utils_unique_combination_o_21473120856be0adc6b82e83f018c3a4.sql", "original_file_path": "models/pinterest.yml", "name": "dbt_utils_unique_combination_of_columns_pinterest_ads__url_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day", "alias": "dbt_utils_unique_combination_o_21473120856be0adc6b82e83f018c3a4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/dbt_utils_unique_combination_o_21473120856be0adc6b82e83f018c3a4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_21473120856be0adc6b82e83f018c3a4"}, "created_at": 1660323534.376271, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        pin_promotion_id, ad_group_id, campaign_id, advertiser_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__url_report`\n    group by pin_promotion_id, ad_group_id, campaign_id, advertiser_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.pinterest_ads__url_report"}, "test.pinterest.not_null_pinterest_ads__ad_group_report_date_day.ed7c27b8a7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('pinterest_ads__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__ad_group_report_date_day"], "unique_id": "test.pinterest.not_null_pinterest_ads__ad_group_report_date_day.ed7c27b8a7", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__ad_group_report_date_day.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__ad_group_report_date_day", "alias": "not_null_pinterest_ads__ad_group_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__ad_group_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.384054, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__ad_group_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.pinterest_ads__ad_group_report"}, "test.pinterest.not_null_pinterest_ads__ad_group_report_ad_group_id.134f9ac6c2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('pinterest_ads__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__ad_group_report_ad_group_id"], "unique_id": "test.pinterest.not_null_pinterest_ads__ad_group_report_ad_group_id.134f9ac6c2", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__ad_group_report_ad_group_id.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__ad_group_report_ad_group_id", "alias": "not_null_pinterest_ads__ad_group_report_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__ad_group_report_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.386553, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__ad_group_report`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.pinterest_ads__ad_group_report"}, "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__ad_group_report_ad_group_id__advertiser_id__campaign_id__date_day.d207b7d69d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_54d3e3ee8528adecb1b6bc6aef476506\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "advertiser_id", "campaign_id", "date_day"], "model": "{{ get_where_subquery(ref('pinterest_ads__ad_group_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__ad_group_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_54d3e3ee8528adecb1b6bc6aef476506", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "dbt_utils_unique_combination_of_columns_pinterest_ads__ad_group_report_ad_group_id__advertiser_id__campaign_id__date_day"], "unique_id": "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__ad_group_report_ad_group_id__advertiser_id__campaign_id__date_day.d207b7d69d", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "dbt_utils_unique_combination_o_54d3e3ee8528adecb1b6bc6aef476506.sql", "original_file_path": "models/pinterest.yml", "name": "dbt_utils_unique_combination_of_columns_pinterest_ads__ad_group_report_ad_group_id__advertiser_id__campaign_id__date_day", "alias": "dbt_utils_unique_combination_o_54d3e3ee8528adecb1b6bc6aef476506", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/dbt_utils_unique_combination_o_54d3e3ee8528adecb1b6bc6aef476506.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_54d3e3ee8528adecb1b6bc6aef476506"}, "created_at": 1660323534.389117, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, advertiser_id, campaign_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__ad_group_report`\n    group by ad_group_id, advertiser_id, campaign_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.pinterest_ads__ad_group_report"}, "test.pinterest.not_null_pinterest_ads__campaign_report_date_day.10ac8272bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('pinterest_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__campaign_report_date_day"], "unique_id": "test.pinterest.not_null_pinterest_ads__campaign_report_date_day.10ac8272bf", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__campaign_report_date_day.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__campaign_report_date_day", "alias": "not_null_pinterest_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__campaign_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.3965461, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.pinterest_ads__campaign_report"}, "test.pinterest.not_null_pinterest_ads__campaign_report_campaign_id.8001ea60f2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('pinterest_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__campaign_report_campaign_id"], "unique_id": "test.pinterest.not_null_pinterest_ads__campaign_report_campaign_id.8001ea60f2", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__campaign_report_campaign_id.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__campaign_report_campaign_id", "alias": "not_null_pinterest_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__campaign_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.399081, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.pinterest_ads__campaign_report"}, "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__campaign_report_campaign_id__advertiser_id__date_day.b5752d5279": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_87addc13a4108165c61e6604961b7334\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "advertiser_id", "date_day"], "model": "{{ get_where_subquery(ref('pinterest_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_87addc13a4108165c61e6604961b7334", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "dbt_utils_unique_combination_of_columns_pinterest_ads__campaign_report_campaign_id__advertiser_id__date_day"], "unique_id": "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__campaign_report_campaign_id__advertiser_id__date_day.b5752d5279", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "dbt_utils_unique_combination_o_87addc13a4108165c61e6604961b7334.sql", "original_file_path": "models/pinterest.yml", "name": "dbt_utils_unique_combination_of_columns_pinterest_ads__campaign_report_campaign_id__advertiser_id__date_day", "alias": "dbt_utils_unique_combination_o_87addc13a4108165c61e6604961b7334", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/dbt_utils_unique_combination_o_87addc13a4108165c61e6604961b7334.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_87addc13a4108165c61e6604961b7334"}, "created_at": 1660323534.4019358, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, advertiser_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__campaign_report`\n    group by campaign_id, advertiser_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.pinterest_ads__campaign_report"}, "test.pinterest.not_null_pinterest_ads__advertiser_report_date_day.aedeceeeca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('pinterest_ads__advertiser_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__advertiser_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__advertiser_report_date_day"], "unique_id": "test.pinterest.not_null_pinterest_ads__advertiser_report_date_day.aedeceeeca", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__advertiser_report_date_day.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__advertiser_report_date_day", "alias": "not_null_pinterest_ads__advertiser_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__advertiser_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__advertiser_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.408618, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__advertiser_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.pinterest_ads__advertiser_report"}, "test.pinterest.not_null_pinterest_ads__advertiser_report_advertiser_id.13380f0672": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "advertiser_id", "model": "{{ get_where_subquery(ref('pinterest_ads__advertiser_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__advertiser_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__advertiser_report_advertiser_id"], "unique_id": "test.pinterest.not_null_pinterest_ads__advertiser_report_advertiser_id.13380f0672", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__advertiser_report_advertiser_id.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__advertiser_report_advertiser_id", "alias": "not_null_pinterest_ads__advertiser_report_advertiser_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__advertiser_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__advertiser_report_advertiser_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.411443, "compiled_sql": "\n    \n    \n\n\n\nselect advertiser_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__advertiser_report`\nwhere advertiser_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "advertiser_id", "file_key_name": "models.pinterest_ads__advertiser_report"}, "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__advertiser_report_advertiser_id__date_day.990badbc11": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_262423074d5ab98a7cfbb922eecfa81f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["advertiser_id", "date_day"], "model": "{{ get_where_subquery(ref('pinterest_ads__advertiser_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__advertiser_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_262423074d5ab98a7cfbb922eecfa81f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "dbt_utils_unique_combination_of_columns_pinterest_ads__advertiser_report_advertiser_id__date_day"], "unique_id": "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__advertiser_report_advertiser_id__date_day.990badbc11", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "dbt_utils_unique_combination_o_262423074d5ab98a7cfbb922eecfa81f.sql", "original_file_path": "models/pinterest.yml", "name": "dbt_utils_unique_combination_of_columns_pinterest_ads__advertiser_report_advertiser_id__date_day", "alias": "dbt_utils_unique_combination_o_262423074d5ab98a7cfbb922eecfa81f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__advertiser_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/dbt_utils_unique_combination_o_262423074d5ab98a7cfbb922eecfa81f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_262423074d5ab98a7cfbb922eecfa81f"}, "created_at": 1660323534.4141939, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        advertiser_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__advertiser_report`\n    group by advertiser_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.pinterest_ads__advertiser_report"}, "test.pinterest.not_null_pinterest_ads__keyword_report_date_day.23130e9fba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('pinterest_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__keyword_report_date_day"], "unique_id": "test.pinterest.not_null_pinterest_ads__keyword_report_date_day.23130e9fba", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__keyword_report_date_day.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__keyword_report_date_day", "alias": "not_null_pinterest_ads__keyword_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__keyword_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.420792, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__keyword_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.pinterest_ads__keyword_report"}, "test.pinterest.not_null_pinterest_ads__keyword_report_keyword_id.0d73460198": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_id", "model": "{{ get_where_subquery(ref('pinterest_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__keyword_report_keyword_id"], "unique_id": "test.pinterest.not_null_pinterest_ads__keyword_report_keyword_id.0d73460198", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__keyword_report_keyword_id.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__keyword_report_keyword_id", "alias": "not_null_pinterest_ads__keyword_report_keyword_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__keyword_report_keyword_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.423436, "compiled_sql": "\n    \n    \n\n\n\nselect keyword_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__keyword_report`\nwhere keyword_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword_id", "file_key_name": "models.pinterest_ads__keyword_report"}, "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__keyword_report_keyword_id__ad_group_id__campaign_id__advertiser_id__date_day.b7517b039d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5ffb6b9c10d3e5615e425ea53e66643f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["keyword_id", "ad_group_id", "campaign_id", "advertiser_id", "date_day"], "model": "{{ get_where_subquery(ref('pinterest_ads__keyword_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__keyword_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5ffb6b9c10d3e5615e425ea53e66643f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "dbt_utils_unique_combination_of_columns_pinterest_ads__keyword_report_keyword_id__ad_group_id__campaign_id__advertiser_id__date_day"], "unique_id": "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__keyword_report_keyword_id__ad_group_id__campaign_id__advertiser_id__date_day.b7517b039d", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "dbt_utils_unique_combination_o_5ffb6b9c10d3e5615e425ea53e66643f.sql", "original_file_path": "models/pinterest.yml", "name": "dbt_utils_unique_combination_of_columns_pinterest_ads__keyword_report_keyword_id__ad_group_id__campaign_id__advertiser_id__date_day", "alias": "dbt_utils_unique_combination_o_5ffb6b9c10d3e5615e425ea53e66643f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/dbt_utils_unique_combination_o_5ffb6b9c10d3e5615e425ea53e66643f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5ffb6b9c10d3e5615e425ea53e66643f"}, "created_at": 1660323534.426531, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        keyword_id, ad_group_id, campaign_id, advertiser_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__keyword_report`\n    group by keyword_id, ad_group_id, campaign_id, advertiser_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.pinterest_ads__keyword_report"}, "test.pinterest.not_null_pinterest_ads__pin_promotion_report_date_day.3128d28cfd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('pinterest_ads__pin_promotion_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__pin_promotion_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__pin_promotion_report_date_day"], "unique_id": "test.pinterest.not_null_pinterest_ads__pin_promotion_report_date_day.3128d28cfd", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__pin_promotion_report_date_day.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__pin_promotion_report_date_day", "alias": "not_null_pinterest_ads__pin_promotion_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__pin_promotion_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__pin_promotion_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.434719, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__pin_promotion_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.pinterest_ads__pin_promotion_report"}, "test.pinterest.not_null_pinterest_ads__pin_promotion_report_pin_promotion_id.2540e0a561": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pin_promotion_id", "model": "{{ get_where_subquery(ref('pinterest_ads__pin_promotion_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__pin_promotion_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__pin_promotion_report_pin_promotion_id"], "unique_id": "test.pinterest.not_null_pinterest_ads__pin_promotion_report_pin_promotion_id.2540e0a561", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__pin_promotion_report_pin_promotion_id.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__pin_promotion_report_pin_promotion_id", "alias": "not_null_pinterest_ads__pin_promotion_report_pin_promotion_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__pin_promotion_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__pin_promotion_report_pin_promotion_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.437352, "compiled_sql": "\n    \n    \n\n\n\nselect pin_promotion_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__pin_promotion_report`\nwhere pin_promotion_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pin_promotion_id", "file_key_name": "models.pinterest_ads__pin_promotion_report"}, "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__pin_promotion_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day.1db3ffb1b3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2f4efa18af7508110970522dca80a52c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["pin_promotion_id", "ad_group_id", "campaign_id", "advertiser_id", "date_day"], "model": "{{ get_where_subquery(ref('pinterest_ads__pin_promotion_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__pin_promotion_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2f4efa18af7508110970522dca80a52c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "dbt_utils_unique_combination_of_columns_pinterest_ads__pin_promotion_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day"], "unique_id": "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__pin_promotion_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day.1db3ffb1b3", "package_name": "pinterest", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "dbt_utils_unique_combination_o_2f4efa18af7508110970522dca80a52c.sql", "original_file_path": "models/pinterest.yml", "name": "dbt_utils_unique_combination_of_columns_pinterest_ads__pin_promotion_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day", "alias": "dbt_utils_unique_combination_o_2f4efa18af7508110970522dca80a52c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__pin_promotion_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/dbt_utils_unique_combination_o_2f4efa18af7508110970522dca80a52c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2f4efa18af7508110970522dca80a52c"}, "created_at": 1660323534.439818, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        pin_promotion_id, ad_group_id, campaign_id, advertiser_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest`.`pinterest_ads__pin_promotion_report`\n    group by pin_promotion_id, ad_group_id, campaign_id, advertiser_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.pinterest_ads__pin_promotion_report"}, "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__url_report_ad_id__ad_group_id__date_day.a59b8e007f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bea7bc66213b1115e2bf15aef06eda4b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "ad_group_id", "date_day"], "model": "{{ get_where_subquery(ref('google_ads__url_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads.google_ads__url_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bea7bc66213b1115e2bf15aef06eda4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads", "dbt_utils_unique_combination_of_columns_google_ads__url_report_ad_id__ad_group_id__date_day"], "unique_id": "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__url_report_ad_id__ad_group_id__date_day.a59b8e007f", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "dbt_utils_unique_combination_o_bea7bc66213b1115e2bf15aef06eda4b.sql", "original_file_path": "models/google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_google_ads__url_report_ad_id__ad_group_id__date_day", "alias": "dbt_utils_unique_combination_o_bea7bc66213b1115e2bf15aef06eda4b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads/models/google_ads.yml/dbt_utils_unique_combination_o_bea7bc66213b1115e2bf15aef06eda4b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bea7bc66213b1115e2bf15aef06eda4b"}, "created_at": 1660323534.489543, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, ad_group_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__url_report`\n    group by ad_id, ad_group_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.google_ads__url_report"}, "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__account_report_account_id__date_day.c52089771e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b50e4c9123068ddc911854925927d1f9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "date_day"], "model": "{{ get_where_subquery(ref('google_ads__account_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads.google_ads__account_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b50e4c9123068ddc911854925927d1f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads", "dbt_utils_unique_combination_of_columns_google_ads__account_report_account_id__date_day"], "unique_id": "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__account_report_account_id__date_day.c52089771e", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "dbt_utils_unique_combination_o_b50e4c9123068ddc911854925927d1f9.sql", "original_file_path": "models/google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_google_ads__account_report_account_id__date_day", "alias": "dbt_utils_unique_combination_o_b50e4c9123068ddc911854925927d1f9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads/models/google_ads.yml/dbt_utils_unique_combination_o_b50e4c9123068ddc911854925927d1f9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b50e4c9123068ddc911854925927d1f9"}, "created_at": 1660323534.5468822, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__account_report`\n    group by account_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.google_ads__account_report"}, "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__ad_group_report_ad_group_id__date_day.7c8e1c1a2f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3b4d505407b6ec52ee5fac7c553b0e4f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "date_day"], "model": "{{ get_where_subquery(ref('google_ads__ad_group_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads.google_ads__ad_group_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3b4d505407b6ec52ee5fac7c553b0e4f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads", "dbt_utils_unique_combination_of_columns_google_ads__ad_group_report_ad_group_id__date_day"], "unique_id": "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__ad_group_report_ad_group_id__date_day.7c8e1c1a2f", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "dbt_utils_unique_combination_o_3b4d505407b6ec52ee5fac7c553b0e4f.sql", "original_file_path": "models/google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_google_ads__ad_group_report_ad_group_id__date_day", "alias": "dbt_utils_unique_combination_o_3b4d505407b6ec52ee5fac7c553b0e4f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads/models/google_ads.yml/dbt_utils_unique_combination_o_3b4d505407b6ec52ee5fac7c553b0e4f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3b4d505407b6ec52ee5fac7c553b0e4f"}, "created_at": 1660323534.5549839, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__ad_group_report`\n    group by ad_group_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.google_ads__ad_group_report"}, "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__ad_report_ad_id__ad_group_id__date_day.fe37ea1a7b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0e386e471201820d82331746820c6c2a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "ad_group_id", "date_day"], "model": "{{ get_where_subquery(ref('google_ads__ad_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads.google_ads__ad_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0e386e471201820d82331746820c6c2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads", "dbt_utils_unique_combination_of_columns_google_ads__ad_report_ad_id__ad_group_id__date_day"], "unique_id": "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__ad_report_ad_id__ad_group_id__date_day.fe37ea1a7b", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "dbt_utils_unique_combination_o_0e386e471201820d82331746820c6c2a.sql", "original_file_path": "models/google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_google_ads__ad_report_ad_id__ad_group_id__date_day", "alias": "dbt_utils_unique_combination_o_0e386e471201820d82331746820c6c2a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads/models/google_ads.yml/dbt_utils_unique_combination_o_0e386e471201820d82331746820c6c2a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0e386e471201820d82331746820c6c2a"}, "created_at": 1660323534.562838, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, ad_group_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__ad_report`\n    group by ad_id, ad_group_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.google_ads__ad_report"}, "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__campaign_report_campaign_id__advertising_channel_type__advertising_channel_subtype__date_day.f735cda469": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ec8528411c073564947c460da491432a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "advertising_channel_type", "advertising_channel_subtype", "date_day"], "model": "{{ get_where_subquery(ref('google_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads.google_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ec8528411c073564947c460da491432a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads", "dbt_utils_unique_combination_of_columns_google_ads__campaign_report_campaign_id__advertising_channel_type__advertising_channel_subtype__date_day"], "unique_id": "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__campaign_report_campaign_id__advertising_channel_type__advertising_channel_subtype__date_day.f735cda469", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "dbt_utils_unique_combination_o_ec8528411c073564947c460da491432a.sql", "original_file_path": "models/google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_google_ads__campaign_report_campaign_id__advertising_channel_type__advertising_channel_subtype__date_day", "alias": "dbt_utils_unique_combination_o_ec8528411c073564947c460da491432a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads/models/google_ads.yml/dbt_utils_unique_combination_o_ec8528411c073564947c460da491432a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ec8528411c073564947c460da491432a"}, "created_at": 1660323534.570739, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, advertising_channel_type, advertising_channel_subtype, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__campaign_report`\n    group by campaign_id, advertising_channel_type, advertising_channel_subtype, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.google_ads__campaign_report"}, "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__keyword_report_ad_group_id__criterion_id__date_day.214ff3497d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5f4b67cbf07cd9f52dc9ddc8771a9f97\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "criterion_id", "date_day"], "model": "{{ get_where_subquery(ref('google_ads__keyword_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads.google_ads__keyword_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5f4b67cbf07cd9f52dc9ddc8771a9f97", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads", "dbt_utils_unique_combination_of_columns_google_ads__keyword_report_ad_group_id__criterion_id__date_day"], "unique_id": "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__keyword_report_ad_group_id__criterion_id__date_day.214ff3497d", "package_name": "google_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "dbt_utils_unique_combination_o_5f4b67cbf07cd9f52dc9ddc8771a9f97.sql", "original_file_path": "models/google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_google_ads__keyword_report_ad_group_id__criterion_id__date_day", "alias": "dbt_utils_unique_combination_o_5f4b67cbf07cd9f52dc9ddc8771a9f97", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["google_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads/models/google_ads.yml/dbt_utils_unique_combination_o_5f4b67cbf07cd9f52dc9ddc8771a9f97.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5f4b67cbf07cd9f52dc9ddc8771a9f97"}, "created_at": 1660323534.5802639, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, criterion_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads`.`google_ads__keyword_report`\n    group by ad_group_id, criterion_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.google_ads__keyword_report"}, "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_creative_creative_id.062abfe14b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__ad_analytics_by_creative')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__ad_analytics_by_creative_creative_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_creative_creative_id.062abfe14b", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__ad_analytics_by_creative_creative_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__ad_analytics_by_creative_creative_id", "alias": "not_null_stg_linkedin_ads__ad_analytics_by_creative_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__ad_analytics_by_creative"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__ad_analytics_by_creative_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.639135, "compiled_sql": "\n    \n    \n\n\n\nselect creative_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_creative`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.stg_linkedin_ads__ad_analytics_by_creative"}, "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_creative_date_day.cb81bc4766": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__ad_analytics_by_creative')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__ad_analytics_by_creative_date_day"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_creative_date_day.cb81bc4766", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__ad_analytics_by_creative_date_day.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__ad_analytics_by_creative_date_day", "alias": "not_null_stg_linkedin_ads__ad_analytics_by_creative_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__ad_analytics_by_creative"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__ad_analytics_by_creative_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.642198, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_creative`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_linkedin_ads__ad_analytics_by_creative"}, "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_creative_date_day__creative_id.973a01e410": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_aafc2af91b093fc4d5ae0ca1f56acbf9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "creative_id"], "model": "{{ get_where_subquery(ref('stg_linkedin_ads__ad_analytics_by_creative')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_aafc2af91b093fc4d5ae0ca1f56acbf9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_creative_date_day__creative_id"], "unique_id": "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_creative_date_day__creative_id.973a01e410", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "dbt_utils_unique_combination_o_aafc2af91b093fc4d5ae0ca1f56acbf9.sql", "original_file_path": "models/stg_linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_creative_date_day__creative_id", "alias": "dbt_utils_unique_combination_o_aafc2af91b093fc4d5ae0ca1f56acbf9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__ad_analytics_by_creative"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/dbt_utils_unique_combination_o_aafc2af91b093fc4d5ae0ca1f56acbf9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_aafc2af91b093fc4d5ae0ca1f56acbf9"}, "created_at": 1660323534.645101, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, creative_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_creative`\n    group by date_day, creative_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_ads__ad_analytics_by_creative"}, "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_campaign_campaign_id.d6ae242f1a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__ad_analytics_by_campaign')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__ad_analytics_by_campaign_campaign_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_campaign_campaign_id.d6ae242f1a", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__ad_analytics_by_campaign_campaign_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__ad_analytics_by_campaign_campaign_id", "alias": "not_null_stg_linkedin_ads__ad_analytics_by_campaign_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__ad_analytics_by_campaign"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__ad_analytics_by_campaign_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.6517901, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_campaign`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_linkedin_ads__ad_analytics_by_campaign"}, "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_campaign_date_day.ef97bed766": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__ad_analytics_by_campaign')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__ad_analytics_by_campaign_date_day"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_campaign_date_day.ef97bed766", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__ad_analytics_by_campaign_date_day.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__ad_analytics_by_campaign_date_day", "alias": "not_null_stg_linkedin_ads__ad_analytics_by_campaign_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__ad_analytics_by_campaign"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__ad_analytics_by_campaign_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.6546261, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_campaign`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_linkedin_ads__ad_analytics_by_campaign"}, "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_campaign_date_day__campaign_id.b03f3dc81d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8315cf2be67da0ba2aede716f1af891c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "campaign_id"], "model": "{{ get_where_subquery(ref('stg_linkedin_ads__ad_analytics_by_campaign')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8315cf2be67da0ba2aede716f1af891c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_campaign_date_day__campaign_id"], "unique_id": "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_campaign_date_day__campaign_id.b03f3dc81d", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "dbt_utils_unique_combination_o_8315cf2be67da0ba2aede716f1af891c.sql", "original_file_path": "models/stg_linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_campaign_date_day__campaign_id", "alias": "dbt_utils_unique_combination_o_8315cf2be67da0ba2aede716f1af891c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__ad_analytics_by_campaign"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/dbt_utils_unique_combination_o_8315cf2be67da0ba2aede716f1af891c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8315cf2be67da0ba2aede716f1af891c"}, "created_at": 1660323534.6574888, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, campaign_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__ad_analytics_by_campaign`\n    group by date_day, campaign_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_ads__ad_analytics_by_campaign"}, "test.linkedin_source.not_null_stg_linkedin_ads__creative_history_creative_id.4d51d55474": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__creative_history_creative_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__creative_history_creative_id.4d51d55474", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__creative_history_creative_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__creative_history_creative_id", "alias": "not_null_stg_linkedin_ads__creative_history_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__creative_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__creative_history_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.664139, "compiled_sql": "\n    \n    \n\n\n\nselect creative_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__creative_history`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.stg_linkedin_ads__creative_history"}, "test.linkedin_source.not_null_stg_linkedin_ads__creative_history_version_tag.d3f8e73227": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "version_tag", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__creative_history_version_tag"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__creative_history_version_tag.d3f8e73227", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__creative_history_version_tag.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__creative_history_version_tag", "alias": "not_null_stg_linkedin_ads__creative_history_version_tag", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__creative_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__creative_history_version_tag.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.666636, "compiled_sql": "\n    \n    \n\n\n\nselect version_tag\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__creative_history`\nwhere version_tag is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_tag", "file_key_name": "models.stg_linkedin_ads__creative_history"}, "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__creative_history_version_tag__creative_id.cc02e6aa66": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_18d13dd053dd23e38fcb9beaa3ca81bc\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["version_tag", "creative_id"], "model": "{{ get_where_subquery(ref('stg_linkedin_ads__creative_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__creative_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_18d13dd053dd23e38fcb9beaa3ca81bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__creative_history_version_tag__creative_id"], "unique_id": "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__creative_history_version_tag__creative_id.cc02e6aa66", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "dbt_utils_unique_combination_o_18d13dd053dd23e38fcb9beaa3ca81bc.sql", "original_file_path": "models/stg_linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__creative_history_version_tag__creative_id", "alias": "dbt_utils_unique_combination_o_18d13dd053dd23e38fcb9beaa3ca81bc", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__creative_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/dbt_utils_unique_combination_o_18d13dd053dd23e38fcb9beaa3ca81bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_18d13dd053dd23e38fcb9beaa3ca81bc"}, "created_at": 1660323534.6691258, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        version_tag, creative_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__creative_history`\n    group by version_tag, creative_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_ads__creative_history"}, "test.linkedin_source.not_null_stg_linkedin_ads__campaign_history_campaign_id.b026971ca2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__campaign_history_campaign_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__campaign_history_campaign_id.b026971ca2", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__campaign_history_campaign_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__campaign_history_campaign_id", "alias": "not_null_stg_linkedin_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.6755352, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_linkedin_ads__campaign_history"}, "test.linkedin_source.not_null_stg_linkedin_ads__campaign_history_version_tag.64954cc469": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "version_tag", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__campaign_history_version_tag"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__campaign_history_version_tag.64954cc469", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__campaign_history_version_tag.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__campaign_history_version_tag", "alias": "not_null_stg_linkedin_ads__campaign_history_version_tag", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__campaign_history_version_tag.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.6784031, "compiled_sql": "\n    \n    \n\n\n\nselect version_tag\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history`\nwhere version_tag is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_tag", "file_key_name": "models.stg_linkedin_ads__campaign_history"}, "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_history_version_tag__campaign_id.2d20780793": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_04241a97ca756b5a2103a7a728e18361\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["version_tag", "campaign_id"], "model": "{{ get_where_subquery(ref('stg_linkedin_ads__campaign_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__campaign_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_04241a97ca756b5a2103a7a728e18361", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_history_version_tag__campaign_id"], "unique_id": "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_history_version_tag__campaign_id.2d20780793", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "dbt_utils_unique_combination_o_04241a97ca756b5a2103a7a728e18361.sql", "original_file_path": "models/stg_linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_history_version_tag__campaign_id", "alias": "dbt_utils_unique_combination_o_04241a97ca756b5a2103a7a728e18361", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/dbt_utils_unique_combination_o_04241a97ca756b5a2103a7a728e18361.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_04241a97ca756b5a2103a7a728e18361"}, "created_at": 1660323534.680823, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        version_tag, campaign_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_history`\n    group by version_tag, campaign_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_ads__campaign_history"}, "test.linkedin_source.not_null_stg_linkedin_ads__campaign_group_history_campaign_group_id.3888f3777d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_linkedin_ads__cam_ff659fc451955e2142e65b7eefd44f9a\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_group_id", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__campaign_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history"]}, "config": {"enabled": true, "alias": "not_null_stg_linkedin_ads__cam_ff659fc451955e2142e65b7eefd44f9a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__campaign_group_history_campaign_group_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__campaign_group_history_campaign_group_id.3888f3777d", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__cam_ff659fc451955e2142e65b7eefd44f9a.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__campaign_group_history_campaign_group_id", "alias": "not_null_stg_linkedin_ads__cam_ff659fc451955e2142e65b7eefd44f9a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__campaign_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__cam_ff659fc451955e2142e65b7eefd44f9a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_linkedin_ads__cam_ff659fc451955e2142e65b7eefd44f9a"}, "created_at": 1660323534.6871822, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_group_history`\nwhere campaign_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_group_id", "file_key_name": "models.stg_linkedin_ads__campaign_group_history"}, "test.linkedin_source.not_null_stg_linkedin_ads__campaign_group_history_last_modified_at.a716e2a7ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_linkedin_ads__cam_2e7858c2b570943ef2af34e42f5302bd\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_modified_at", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__campaign_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history"]}, "config": {"enabled": true, "alias": "not_null_stg_linkedin_ads__cam_2e7858c2b570943ef2af34e42f5302bd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__campaign_group_history_last_modified_at"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__campaign_group_history_last_modified_at.a716e2a7ea", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__cam_2e7858c2b570943ef2af34e42f5302bd.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__campaign_group_history_last_modified_at", "alias": "not_null_stg_linkedin_ads__cam_2e7858c2b570943ef2af34e42f5302bd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__campaign_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__cam_2e7858c2b570943ef2af34e42f5302bd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_linkedin_ads__cam_2e7858c2b570943ef2af34e42f5302bd"}, "created_at": 1660323534.689708, "compiled_sql": "\n    \n    \n\n\n\nselect last_modified_at\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_group_history`\nwhere last_modified_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "last_modified_at", "file_key_name": "models.stg_linkedin_ads__campaign_group_history"}, "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_group_history_last_modified_at__campaign_group_id.e761ddb4da": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_03fa025e903c1ddc393db8f138302b14\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["last_modified_at", "campaign_group_id"], "model": "{{ get_where_subquery(ref('stg_linkedin_ads__campaign_group_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_03fa025e903c1ddc393db8f138302b14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_group_history_last_modified_at__campaign_group_id"], "unique_id": "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_group_history_last_modified_at__campaign_group_id.e761ddb4da", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "dbt_utils_unique_combination_o_03fa025e903c1ddc393db8f138302b14.sql", "original_file_path": "models/stg_linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_group_history_last_modified_at__campaign_group_id", "alias": "dbt_utils_unique_combination_o_03fa025e903c1ddc393db8f138302b14", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__campaign_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/dbt_utils_unique_combination_o_03fa025e903c1ddc393db8f138302b14.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_03fa025e903c1ddc393db8f138302b14"}, "created_at": 1660323534.692731, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        last_modified_at, campaign_group_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__campaign_group_history`\n    group by last_modified_at, campaign_group_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_ads__campaign_group_history"}, "test.linkedin_source.not_null_stg_linkedin_ads__account_history_account_id.a9fa7f93c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__account_history_account_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__account_history_account_id.a9fa7f93c0", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__account_history_account_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__account_history_account_id", "alias": "not_null_stg_linkedin_ads__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__account_history_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.698734, "compiled_sql": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_linkedin_ads__account_history"}, "test.linkedin_source.not_null_stg_linkedin_ads__account_history_version_tag.58c46c5d81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "version_tag", "model": "{{ get_where_subquery(ref('stg_linkedin_ads__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin_ads__account_history_version_tag"], "unique_id": "test.linkedin_source.not_null_stg_linkedin_ads__account_history_version_tag.58c46c5d81", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin_ads__account_history_version_tag.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin_ads__account_history_version_tag", "alias": "not_null_stg_linkedin_ads__account_history_version_tag", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin_ads__account_history_version_tag.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.701382, "compiled_sql": "\n    \n    \n\n\n\nselect version_tag\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history`\nwhere version_tag is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_tag", "file_key_name": "models.stg_linkedin_ads__account_history"}, "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__account_history_account_id__version_tag.9a655993ce": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e080bf5d4722552a352202d7efd9af55\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "version_tag"], "model": "{{ get_where_subquery(ref('stg_linkedin_ads__account_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin_ads__account_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e080bf5d4722552a352202d7efd9af55", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__account_history_account_id__version_tag"], "unique_id": "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__account_history_account_id__version_tag.9a655993ce", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "dbt_utils_unique_combination_o_e080bf5d4722552a352202d7efd9af55.sql", "original_file_path": "models/stg_linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_ads__account_history_account_id__version_tag", "alias": "dbt_utils_unique_combination_o_e080bf5d4722552a352202d7efd9af55", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/dbt_utils_unique_combination_o_e080bf5d4722552a352202d7efd9af55.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e080bf5d4722552a352202d7efd9af55"}, "created_at": 1660323534.7037508, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, version_tag\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads_source`.`stg_linkedin_ads__account_history`\n    group by account_id, version_tag\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_ads__account_history"}, "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__url_report_date_day__account_id__campaign_id__ad_set_id__ad_id.03a7e82eb7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bf91f5ef1059f34c9059e06e293717eb\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_set_id", "ad_id"], "model": "{{ get_where_subquery(ref('facebook_ads__url_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads.facebook_ads__url_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bf91f5ef1059f34c9059e06e293717eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads", "dbt_utils_unique_combination_of_columns_facebook_ads__url_report_date_day__account_id__campaign_id__ad_set_id__ad_id"], "unique_id": "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__url_report_date_day__account_id__campaign_id__ad_set_id__ad_id.03a7e82eb7", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "dbt_utils_unique_combination_o_bf91f5ef1059f34c9059e06e293717eb.sql", "original_file_path": "models/facebook.yml", "name": "dbt_utils_unique_combination_of_columns_facebook_ads__url_report_date_day__account_id__campaign_id__ad_set_id__ad_id", "alias": "dbt_utils_unique_combination_o_bf91f5ef1059f34c9059e06e293717eb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads/models/facebook.yml/dbt_utils_unique_combination_o_bf91f5ef1059f34c9059e06e293717eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bf91f5ef1059f34c9059e06e293717eb"}, "created_at": 1660323534.777447, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_set_id, ad_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__url_report`\n    group by date_day, account_id, campaign_id, ad_set_id, ad_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.facebook_ads__url_report"}, "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__ad_report_date_day__account_id__campaign_id__ad_set_id__ad_id.0a25b64738": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6751270b8425b93a72568a6ff0b52e2e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_set_id", "ad_id"], "model": "{{ get_where_subquery(ref('facebook_ads__ad_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads.facebook_ads__ad_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6751270b8425b93a72568a6ff0b52e2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads", "dbt_utils_unique_combination_of_columns_facebook_ads__ad_report_date_day__account_id__campaign_id__ad_set_id__ad_id"], "unique_id": "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__ad_report_date_day__account_id__campaign_id__ad_set_id__ad_id.0a25b64738", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "dbt_utils_unique_combination_o_6751270b8425b93a72568a6ff0b52e2e.sql", "original_file_path": "models/facebook.yml", "name": "dbt_utils_unique_combination_of_columns_facebook_ads__ad_report_date_day__account_id__campaign_id__ad_set_id__ad_id", "alias": "dbt_utils_unique_combination_o_6751270b8425b93a72568a6ff0b52e2e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads/models/facebook.yml/dbt_utils_unique_combination_o_6751270b8425b93a72568a6ff0b52e2e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6751270b8425b93a72568a6ff0b52e2e"}, "created_at": 1660323534.783929, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_set_id, ad_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__ad_report`\n    group by date_day, account_id, campaign_id, ad_set_id, ad_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.facebook_ads__ad_report"}, "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__ad_set_report_date_day__account_id__campaign_id__ad_set_id.3dd4da872f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b03f58e6a60804a93ab31dbb358dad74\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_set_id"], "model": "{{ get_where_subquery(ref('facebook_ads__ad_set_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads.facebook_ads__ad_set_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b03f58e6a60804a93ab31dbb358dad74", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads", "dbt_utils_unique_combination_of_columns_facebook_ads__ad_set_report_date_day__account_id__campaign_id__ad_set_id"], "unique_id": "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__ad_set_report_date_day__account_id__campaign_id__ad_set_id.3dd4da872f", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "dbt_utils_unique_combination_o_b03f58e6a60804a93ab31dbb358dad74.sql", "original_file_path": "models/facebook.yml", "name": "dbt_utils_unique_combination_of_columns_facebook_ads__ad_set_report_date_day__account_id__campaign_id__ad_set_id", "alias": "dbt_utils_unique_combination_o_b03f58e6a60804a93ab31dbb358dad74", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_ads__ad_set_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads/models/facebook.yml/dbt_utils_unique_combination_o_b03f58e6a60804a93ab31dbb358dad74.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b03f58e6a60804a93ab31dbb358dad74"}, "created_at": 1660323534.7899892, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_set_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__ad_set_report`\n    group by date_day, account_id, campaign_id, ad_set_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.facebook_ads__ad_set_report"}, "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__campaign_report_date_day__account_id__campaign_id.7cd75107e6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cf7853fdf8e24958f5a0e3e1b7c1ced1\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id"], "model": "{{ get_where_subquery(ref('facebook_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads.facebook_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cf7853fdf8e24958f5a0e3e1b7c1ced1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads", "dbt_utils_unique_combination_of_columns_facebook_ads__campaign_report_date_day__account_id__campaign_id"], "unique_id": "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__campaign_report_date_day__account_id__campaign_id.7cd75107e6", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "dbt_utils_unique_combination_o_cf7853fdf8e24958f5a0e3e1b7c1ced1.sql", "original_file_path": "models/facebook.yml", "name": "dbt_utils_unique_combination_of_columns_facebook_ads__campaign_report_date_day__account_id__campaign_id", "alias": "dbt_utils_unique_combination_o_cf7853fdf8e24958f5a0e3e1b7c1ced1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads/models/facebook.yml/dbt_utils_unique_combination_o_cf7853fdf8e24958f5a0e3e1b7c1ced1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cf7853fdf8e24958f5a0e3e1b7c1ced1"}, "created_at": 1660323534.796459, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__campaign_report`\n    group by date_day, account_id, campaign_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.facebook_ads__campaign_report"}, "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__account_report_date_day__account_id.5a94423e40": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_19fe7721a9f8cd99b91dca268368654e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id"], "model": "{{ get_where_subquery(ref('facebook_ads__account_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads.facebook_ads__account_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_19fe7721a9f8cd99b91dca268368654e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads", "dbt_utils_unique_combination_of_columns_facebook_ads__account_report_date_day__account_id"], "unique_id": "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__account_report_date_day__account_id.5a94423e40", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "dbt_utils_unique_combination_o_19fe7721a9f8cd99b91dca268368654e.sql", "original_file_path": "models/facebook.yml", "name": "dbt_utils_unique_combination_of_columns_facebook_ads__account_report_date_day__account_id", "alias": "dbt_utils_unique_combination_o_19fe7721a9f8cd99b91dca268368654e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads/models/facebook.yml/dbt_utils_unique_combination_o_19fe7721a9f8cd99b91dca268368654e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_19fe7721a9f8cd99b91dca268368654e"}, "created_at": 1660323534.802381, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__account_report`\n    group by date_day, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.facebook_ads__account_report"}, "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__url_tags__fivetran_id__key__type.ba044777d3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_496bf013366c506c1f3135f19ec7080a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "key", "type"], "model": "{{ get_where_subquery(ref('facebook_ads__url_tags')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads.facebook_ads__url_tags"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_496bf013366c506c1f3135f19ec7080a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads", "dbt_utils_unique_combination_of_columns_facebook_ads__url_tags__fivetran_id__key__type"], "unique_id": "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__url_tags__fivetran_id__key__type.ba044777d3", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "dbt_utils_unique_combination_o_496bf013366c506c1f3135f19ec7080a.sql", "original_file_path": "models/facebook.yml", "name": "dbt_utils_unique_combination_of_columns_facebook_ads__url_tags__fivetran_id__key__type", "alias": "dbt_utils_unique_combination_o_496bf013366c506c1f3135f19ec7080a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_ads__url_tags"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads/models/facebook.yml/dbt_utils_unique_combination_o_496bf013366c506c1f3135f19ec7080a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_496bf013366c506c1f3135f19ec7080a"}, "created_at": 1660323534.8077812, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, key, type\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads`.`facebook_ads__url_tags`\n    group by _fivetran_id, key, type\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.facebook_ads__url_tags"}, "test.snapchat_ads.not_null_snapchat_ads__account_report_date_day.688d7ed260": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('snapchat_ads__account_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__account_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "not_null_snapchat_ads__account_report_date_day"], "unique_id": "test.snapchat_ads.not_null_snapchat_ads__account_report_date_day.688d7ed260", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "not_null_snapchat_ads__account_report_date_day.sql", "original_file_path": "models/snapchat.yml", "name": "not_null_snapchat_ads__account_report_date_day", "alias": "not_null_snapchat_ads__account_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/not_null_snapchat_ads__account_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.8415942, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__account_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.snapchat_ads__account_report"}, "test.snapchat_ads.not_null_snapchat_ads__account_report_ad_account_id.589c81966b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_account_id", "model": "{{ get_where_subquery(ref('snapchat_ads__account_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__account_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "not_null_snapchat_ads__account_report_ad_account_id"], "unique_id": "test.snapchat_ads.not_null_snapchat_ads__account_report_ad_account_id.589c81966b", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "not_null_snapchat_ads__account_report_ad_account_id.sql", "original_file_path": "models/snapchat.yml", "name": "not_null_snapchat_ads__account_report_ad_account_id", "alias": "not_null_snapchat_ads__account_report_ad_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/not_null_snapchat_ads__account_report_ad_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.844071, "compiled_sql": "\n    \n    \n\n\n\nselect ad_account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__account_report`\nwhere ad_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_account_id", "file_key_name": "models.snapchat_ads__account_report"}, "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__account_report_ad_account_id__date_day.da5545b8e6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_524356cb3f1f45c140605a4e4e3e3292\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_account_id", "date_day"], "model": "{{ get_where_subquery(ref('snapchat_ads__account_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__account_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_524356cb3f1f45c140605a4e4e3e3292", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "dbt_utils_unique_combination_of_columns_snapchat_ads__account_report_ad_account_id__date_day"], "unique_id": "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__account_report_ad_account_id__date_day.da5545b8e6", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "dbt_utils_unique_combination_o_524356cb3f1f45c140605a4e4e3e3292.sql", "original_file_path": "models/snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_snapchat_ads__account_report_ad_account_id__date_day", "alias": "dbt_utils_unique_combination_o_524356cb3f1f45c140605a4e4e3e3292", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/dbt_utils_unique_combination_o_524356cb3f1f45c140605a4e4e3e3292.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_524356cb3f1f45c140605a4e4e3e3292"}, "created_at": 1660323534.846113, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_account_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__account_report`\n    group by ad_account_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.snapchat_ads__account_report"}, "test.snapchat_ads.not_null_snapchat_ads__ad_report_date_day.7c5350c8fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('snapchat_ads__ad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "not_null_snapchat_ads__ad_report_date_day"], "unique_id": "test.snapchat_ads.not_null_snapchat_ads__ad_report_date_day.7c5350c8fe", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "not_null_snapchat_ads__ad_report_date_day.sql", "original_file_path": "models/snapchat.yml", "name": "not_null_snapchat_ads__ad_report_date_day", "alias": "not_null_snapchat_ads__ad_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/not_null_snapchat_ads__ad_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.85114, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__ad_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.snapchat_ads__ad_report"}, "test.snapchat_ads.not_null_snapchat_ads__ad_report_ad_id.9000850744": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('snapchat_ads__ad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "not_null_snapchat_ads__ad_report_ad_id"], "unique_id": "test.snapchat_ads.not_null_snapchat_ads__ad_report_ad_id.9000850744", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "not_null_snapchat_ads__ad_report_ad_id.sql", "original_file_path": "models/snapchat.yml", "name": "not_null_snapchat_ads__ad_report_ad_id", "alias": "not_null_snapchat_ads__ad_report_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/not_null_snapchat_ads__ad_report_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.8531258, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__ad_report`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.snapchat_ads__ad_report"}, "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__ad_report_ad_id__date_day.68c2c0de57": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d89cc6fe00f1619f552cd79cf8e1cf2b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "date_day"], "model": "{{ get_where_subquery(ref('snapchat_ads__ad_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__ad_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d89cc6fe00f1619f552cd79cf8e1cf2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "dbt_utils_unique_combination_of_columns_snapchat_ads__ad_report_ad_id__date_day"], "unique_id": "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__ad_report_ad_id__date_day.68c2c0de57", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "dbt_utils_unique_combination_o_d89cc6fe00f1619f552cd79cf8e1cf2b.sql", "original_file_path": "models/snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_snapchat_ads__ad_report_ad_id__date_day", "alias": "dbt_utils_unique_combination_o_d89cc6fe00f1619f552cd79cf8e1cf2b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/dbt_utils_unique_combination_o_d89cc6fe00f1619f552cd79cf8e1cf2b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d89cc6fe00f1619f552cd79cf8e1cf2b"}, "created_at": 1660323534.8553631, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__ad_report`\n    group by ad_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.snapchat_ads__ad_report"}, "test.snapchat_ads.not_null_snapchat_ads__campaign_report_date_day.4e4e31223b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('snapchat_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "not_null_snapchat_ads__campaign_report_date_day"], "unique_id": "test.snapchat_ads.not_null_snapchat_ads__campaign_report_date_day.4e4e31223b", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "not_null_snapchat_ads__campaign_report_date_day.sql", "original_file_path": "models/snapchat.yml", "name": "not_null_snapchat_ads__campaign_report_date_day", "alias": "not_null_snapchat_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/not_null_snapchat_ads__campaign_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.8610291, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.snapchat_ads__campaign_report"}, "test.snapchat_ads.not_null_snapchat_ads__campaign_report_campaign_id.19fd7135ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('snapchat_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "not_null_snapchat_ads__campaign_report_campaign_id"], "unique_id": "test.snapchat_ads.not_null_snapchat_ads__campaign_report_campaign_id.19fd7135ac", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "not_null_snapchat_ads__campaign_report_campaign_id.sql", "original_file_path": "models/snapchat.yml", "name": "not_null_snapchat_ads__campaign_report_campaign_id", "alias": "not_null_snapchat_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/not_null_snapchat_ads__campaign_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.8632178, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.snapchat_ads__campaign_report"}, "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__campaign_report_campaign_id__date_day.dfc5f7da4e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_113e94adc3e9beee92a4d84c51a5a72e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "date_day"], "model": "{{ get_where_subquery(ref('snapchat_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_113e94adc3e9beee92a4d84c51a5a72e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "dbt_utils_unique_combination_of_columns_snapchat_ads__campaign_report_campaign_id__date_day"], "unique_id": "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__campaign_report_campaign_id__date_day.dfc5f7da4e", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "dbt_utils_unique_combination_o_113e94adc3e9beee92a4d84c51a5a72e.sql", "original_file_path": "models/snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_snapchat_ads__campaign_report_campaign_id__date_day", "alias": "dbt_utils_unique_combination_o_113e94adc3e9beee92a4d84c51a5a72e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/dbt_utils_unique_combination_o_113e94adc3e9beee92a4d84c51a5a72e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_113e94adc3e9beee92a4d84c51a5a72e"}, "created_at": 1660323534.865241, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__campaign_report`\n    group by campaign_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.snapchat_ads__campaign_report"}, "test.snapchat_ads.not_null_snapchat_ads__ad_squad_report_date_day.39118ca639": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('snapchat_ads__ad_squad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__ad_squad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "not_null_snapchat_ads__ad_squad_report_date_day"], "unique_id": "test.snapchat_ads.not_null_snapchat_ads__ad_squad_report_date_day.39118ca639", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "not_null_snapchat_ads__ad_squad_report_date_day.sql", "original_file_path": "models/snapchat.yml", "name": "not_null_snapchat_ads__ad_squad_report_date_day", "alias": "not_null_snapchat_ads__ad_squad_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__ad_squad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/not_null_snapchat_ads__ad_squad_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.870125, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__ad_squad_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.snapchat_ads__ad_squad_report"}, "test.snapchat_ads.not_null_snapchat_ads__ad_squad_report_ad_squad_id.424c0bbffe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_squad_id", "model": "{{ get_where_subquery(ref('snapchat_ads__ad_squad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__ad_squad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "not_null_snapchat_ads__ad_squad_report_ad_squad_id"], "unique_id": "test.snapchat_ads.not_null_snapchat_ads__ad_squad_report_ad_squad_id.424c0bbffe", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "not_null_snapchat_ads__ad_squad_report_ad_squad_id.sql", "original_file_path": "models/snapchat.yml", "name": "not_null_snapchat_ads__ad_squad_report_ad_squad_id", "alias": "not_null_snapchat_ads__ad_squad_report_ad_squad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__ad_squad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/not_null_snapchat_ads__ad_squad_report_ad_squad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.872128, "compiled_sql": "\n    \n    \n\n\n\nselect ad_squad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__ad_squad_report`\nwhere ad_squad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_squad_id", "file_key_name": "models.snapchat_ads__ad_squad_report"}, "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__ad_squad_report_ad_squad_id__date_day.027a518f3c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_75177eef68a3eb0454e7209b1fcecc7f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_squad_id", "date_day"], "model": "{{ get_where_subquery(ref('snapchat_ads__ad_squad_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__ad_squad_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_75177eef68a3eb0454e7209b1fcecc7f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "dbt_utils_unique_combination_of_columns_snapchat_ads__ad_squad_report_ad_squad_id__date_day"], "unique_id": "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__ad_squad_report_ad_squad_id__date_day.027a518f3c", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "dbt_utils_unique_combination_o_75177eef68a3eb0454e7209b1fcecc7f.sql", "original_file_path": "models/snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_snapchat_ads__ad_squad_report_ad_squad_id__date_day", "alias": "dbt_utils_unique_combination_o_75177eef68a3eb0454e7209b1fcecc7f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__ad_squad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/dbt_utils_unique_combination_o_75177eef68a3eb0454e7209b1fcecc7f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_75177eef68a3eb0454e7209b1fcecc7f"}, "created_at": 1660323534.875582, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_squad_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__ad_squad_report`\n    group by ad_squad_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.snapchat_ads__ad_squad_report"}, "test.snapchat_ads.not_null_snapchat_ads__url_report_date_day.bcbe87a7f6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('snapchat_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "not_null_snapchat_ads__url_report_date_day"], "unique_id": "test.snapchat_ads.not_null_snapchat_ads__url_report_date_day.bcbe87a7f6", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "not_null_snapchat_ads__url_report_date_day.sql", "original_file_path": "models/snapchat.yml", "name": "not_null_snapchat_ads__url_report_date_day", "alias": "not_null_snapchat_ads__url_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/not_null_snapchat_ads__url_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.8821352, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__url_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.snapchat_ads__url_report"}, "test.snapchat_ads.not_null_snapchat_ads__url_report_ad_id.ecbdfc0d78": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('snapchat_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "not_null_snapchat_ads__url_report_ad_id"], "unique_id": "test.snapchat_ads.not_null_snapchat_ads__url_report_ad_id.ecbdfc0d78", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "not_null_snapchat_ads__url_report_ad_id.sql", "original_file_path": "models/snapchat.yml", "name": "not_null_snapchat_ads__url_report_ad_id", "alias": "not_null_snapchat_ads__url_report_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/not_null_snapchat_ads__url_report_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323534.884156, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__url_report`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.snapchat_ads__url_report"}, "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__url_report_ad_id__date_day.54edc1b2be": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bbe78d99026ed63397aa69997ed2d6a7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "date_day"], "model": "{{ get_where_subquery(ref('snapchat_ads__url_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat_ads__url_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bbe78d99026ed63397aa69997ed2d6a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "dbt_utils_unique_combination_of_columns_snapchat_ads__url_report_ad_id__date_day"], "unique_id": "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__url_report_ad_id__date_day.54edc1b2be", "package_name": "snapchat_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "dbt_utils_unique_combination_o_bbe78d99026ed63397aa69997ed2d6a7.sql", "original_file_path": "models/snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_snapchat_ads__url_report_ad_id__date_day", "alias": "dbt_utils_unique_combination_o_bbe78d99026ed63397aa69997ed2d6a7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/dbt_utils_unique_combination_o_bbe78d99026ed63397aa69997ed2d6a7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bbe78d99026ed63397aa69997ed2d6a7"}, "created_at": 1660323534.886152, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads`.`snapchat_ads__url_report`\n    group by ad_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.snapchat_ads__url_report"}, "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__account_history_account_id__updated_at.19f35742f1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_73f21be54bd17f372632a4da939970a3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_google_ads__account_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__account_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_73f21be54bd17f372632a4da939970a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_utils_unique_combination_of_columns_stg_google_ads__account_history_account_id__updated_at"], "unique_id": "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__account_history_account_id__updated_at.19f35742f1", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_utils_unique_combination_o_73f21be54bd17f372632a4da939970a3.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_google_ads__account_history_account_id__updated_at", "alias": "dbt_utils_unique_combination_o_73f21be54bd17f372632a4da939970a3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_utils_unique_combination_o_73f21be54bd17f372632a4da939970a3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_73f21be54bd17f372632a4da939970a3"}, "created_at": 1660323534.936627, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_history`\n    group by account_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_ads__account_history"}, "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_history_ad_group_id__updated_at.096e8da5fd": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0c1cbeb5a9539431a7fbce6af1a21d7a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_google_ads__ad_group_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__ad_group_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0c1cbeb5a9539431a7fbce6af1a21d7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_history_ad_group_id__updated_at"], "unique_id": "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_history_ad_group_id__updated_at.096e8da5fd", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_utils_unique_combination_o_0c1cbeb5a9539431a7fbce6af1a21d7a.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_history_ad_group_id__updated_at", "alias": "dbt_utils_unique_combination_o_0c1cbeb5a9539431a7fbce6af1a21d7a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_utils_unique_combination_o_0c1cbeb5a9539431a7fbce6af1a21d7a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0c1cbeb5a9539431a7fbce6af1a21d7a"}, "created_at": 1660323534.941893, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_history`\n    group by ad_group_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_ads__ad_group_history"}, "test.google_ads_source.dbt_expectations_expect_column_values_to_not_match_regex_list_stg_google_ads__ad_history_source_final_urls__any___.7dddbd81e7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_match_regex_list(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_expectations_expect_column_f02cb56d69a9df1e600b3958899ceaa5\") }}", "test_metadata": {"name": "expect_column_values_to_not_match_regex_list", "kwargs": {"regex_list": ",", "match_on": "any", "column_name": "source_final_urls", "model": "{{ get_where_subquery(ref('stg_google_ads__ad_history')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__ad_history"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f02cb56d69a9df1e600b3958899ceaa5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_expectations_expect_column_values_to_not_match_regex_list_stg_google_ads__ad_history_source_final_urls__any___"], "unique_id": "test.google_ads_source.dbt_expectations_expect_column_values_to_not_match_regex_list_stg_google_ads__ad_history_source_final_urls__any___.7dddbd81e7", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_expectations_expect_column_f02cb56d69a9df1e600b3958899ceaa5.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_expectations_expect_column_values_to_not_match_regex_list_stg_google_ads__ad_history_source_final_urls__any___", "alias": "dbt_expectations_expect_column_f02cb56d69a9df1e600b3958899ceaa5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_expectations_expect_column_f02cb56d69a9df1e600b3958899ceaa5.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_expectations_expect_column_f02cb56d69a9df1e600b3958899ceaa5"}, "created_at": 1660323534.947426, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n\n    \nregexp_instr(source_final_urls, ',', 1, 1)\n\n\n = 0\n as expression\n\n\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "source_final_urls", "file_key_name": "models.stg_google_ads__ad_history"}, "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_history_ad_id__ad_group_id__updated_at.0c065b0a0b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0cf5dbf0b60dae1b36794a079a6f8b74\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "ad_group_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_google_ads__ad_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__ad_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0cf5dbf0b60dae1b36794a079a6f8b74", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_utils_unique_combination_of_columns_stg_google_ads__ad_history_ad_id__ad_group_id__updated_at"], "unique_id": "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_history_ad_id__ad_group_id__updated_at.0c065b0a0b", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_utils_unique_combination_o_0cf5dbf0b60dae1b36794a079a6f8b74.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_google_ads__ad_history_ad_id__ad_group_id__updated_at", "alias": "dbt_utils_unique_combination_o_0cf5dbf0b60dae1b36794a079a6f8b74", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_utils_unique_combination_o_0cf5dbf0b60dae1b36794a079a6f8b74.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0cf5dbf0b60dae1b36794a079a6f8b74"}, "created_at": 1660323534.9634418, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, ad_group_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_history`\n    group by ad_id, ad_group_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_ads__ad_history"}, "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_stats_ad_id__ad_network_type__device__ad_group_id__date_day.c963f1863c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_99e8df9421c34ee3c8accaa59cf488a0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "ad_network_type", "device", "ad_group_id", "date_day"], "model": "{{ get_where_subquery(ref('stg_google_ads__ad_stats')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__ad_stats"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_99e8df9421c34ee3c8accaa59cf488a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_utils_unique_combination_of_columns_stg_google_ads__ad_stats_ad_id__ad_network_type__device__ad_group_id__date_day"], "unique_id": "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_stats_ad_id__ad_network_type__device__ad_group_id__date_day.c963f1863c", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_utils_unique_combination_o_99e8df9421c34ee3c8accaa59cf488a0.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_google_ads__ad_stats_ad_id__ad_network_type__device__ad_group_id__date_day", "alias": "dbt_utils_unique_combination_o_99e8df9421c34ee3c8accaa59cf488a0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__ad_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_utils_unique_combination_o_99e8df9421c34ee3c8accaa59cf488a0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_99e8df9421c34ee3c8accaa59cf488a0"}, "created_at": 1660323534.968412, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, ad_network_type, device, ad_group_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_stats`\n    group by ad_id, ad_network_type, device, ad_group_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_ads__ad_stats"}, "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_history_campaign_id__updated_at.8bf2733e86": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bd5040437362e14b36ab7ce3eaa14d1d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_google_ads__campaign_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__campaign_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bd5040437362e14b36ab7ce3eaa14d1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_history_campaign_id__updated_at"], "unique_id": "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_history_campaign_id__updated_at.8bf2733e86", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_utils_unique_combination_o_bd5040437362e14b36ab7ce3eaa14d1d.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_history_campaign_id__updated_at", "alias": "dbt_utils_unique_combination_o_bd5040437362e14b36ab7ce3eaa14d1d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_utils_unique_combination_o_bd5040437362e14b36ab7ce3eaa14d1d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bd5040437362e14b36ab7ce3eaa14d1d"}, "created_at": 1660323534.974438, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_history`\n    group by campaign_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_ads__campaign_history"}, "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_criterion_history_criterion_id__ad_group_id__updated_at.197bbc6816": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2ce4e2825f6fe9034f28085d1444c1e8\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["criterion_id", "ad_group_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_google_ads__ad_group_criterion_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__ad_group_criterion_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2ce4e2825f6fe9034f28085d1444c1e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_criterion_history_criterion_id__ad_group_id__updated_at"], "unique_id": "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_criterion_history_criterion_id__ad_group_id__updated_at.197bbc6816", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_utils_unique_combination_o_2ce4e2825f6fe9034f28085d1444c1e8.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_criterion_history_criterion_id__ad_group_id__updated_at", "alias": "dbt_utils_unique_combination_o_2ce4e2825f6fe9034f28085d1444c1e8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__ad_group_criterion_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_utils_unique_combination_o_2ce4e2825f6fe9034f28085d1444c1e8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2ce4e2825f6fe9034f28085d1444c1e8"}, "created_at": 1660323534.9803321, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        criterion_id, ad_group_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_criterion_history`\n    group by criterion_id, ad_group_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_ads__ad_group_criterion_history"}, "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_stats_ad_group_id__device__ad_network_type__date_day.ed55af6020": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_779a67237d95206a8de7fb9388c2108c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "device", "ad_network_type", "date_day"], "model": "{{ get_where_subquery(ref('stg_google_ads__ad_group_stats')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__ad_group_stats"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_779a67237d95206a8de7fb9388c2108c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_stats_ad_group_id__device__ad_network_type__date_day"], "unique_id": "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_stats_ad_group_id__device__ad_network_type__date_day.ed55af6020", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_utils_unique_combination_o_779a67237d95206a8de7fb9388c2108c.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_stats_ad_group_id__device__ad_network_type__date_day", "alias": "dbt_utils_unique_combination_o_779a67237d95206a8de7fb9388c2108c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__ad_group_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_utils_unique_combination_o_779a67237d95206a8de7fb9388c2108c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_779a67237d95206a8de7fb9388c2108c"}, "created_at": 1660323534.9855528, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, device, ad_network_type, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__ad_group_stats`\n    group by ad_group_id, device, ad_network_type, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_ads__ad_group_stats"}, "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_stats_campaign_id__ad_network_type__device__date_day.69600f7d45": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_99cd4c79dd8197dda4f4ac2294fc9259\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "ad_network_type", "device", "date_day"], "model": "{{ get_where_subquery(ref('stg_google_ads__campaign_stats')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__campaign_stats"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_99cd4c79dd8197dda4f4ac2294fc9259", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_stats_campaign_id__ad_network_type__device__date_day"], "unique_id": "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_stats_campaign_id__ad_network_type__device__date_day.69600f7d45", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_utils_unique_combination_o_99cd4c79dd8197dda4f4ac2294fc9259.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_stats_campaign_id__ad_network_type__device__date_day", "alias": "dbt_utils_unique_combination_o_99cd4c79dd8197dda4f4ac2294fc9259", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__campaign_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_utils_unique_combination_o_99cd4c79dd8197dda4f4ac2294fc9259.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_99cd4c79dd8197dda4f4ac2294fc9259"}, "created_at": 1660323534.991701, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, ad_network_type, device, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__campaign_stats`\n    group by campaign_id, ad_network_type, device, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_ads__campaign_stats"}, "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__keyword_stats_keyword_id__date_day.8f15198e68": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7e3d865f56378985172b621ddff21534\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["keyword_id", "date_day"], "model": "{{ get_where_subquery(ref('stg_google_ads__keyword_stats')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__keyword_stats"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7e3d865f56378985172b621ddff21534", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_utils_unique_combination_of_columns_stg_google_ads__keyword_stats_keyword_id__date_day"], "unique_id": "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__keyword_stats_keyword_id__date_day.8f15198e68", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_utils_unique_combination_o_7e3d865f56378985172b621ddff21534.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_google_ads__keyword_stats_keyword_id__date_day", "alias": "dbt_utils_unique_combination_o_7e3d865f56378985172b621ddff21534", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__keyword_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_utils_unique_combination_o_7e3d865f56378985172b621ddff21534.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7e3d865f56378985172b621ddff21534"}, "created_at": 1660323534.997396, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        keyword_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__keyword_stats`\n    group by keyword_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_ads__keyword_stats"}, "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__account_stats_account_id__device__ad_network_type__date_day.3019f8a860": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c760910058eb575d2384e263c612c0c3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "device", "ad_network_type", "date_day"], "model": "{{ get_where_subquery(ref('stg_google_ads__account_stats')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__account_stats"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c760910058eb575d2384e263c612c0c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "dbt_utils_unique_combination_of_columns_stg_google_ads__account_stats_account_id__device__ad_network_type__date_day"], "unique_id": "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__account_stats_account_id__device__ad_network_type__date_day.3019f8a860", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "dbt_utils_unique_combination_o_c760910058eb575d2384e263c612c0c3.sql", "original_file_path": "models/stg_google_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_google_ads__account_stats_account_id__device__ad_network_type__date_day", "alias": "dbt_utils_unique_combination_o_c760910058eb575d2384e263c612c0c3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__account_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/dbt_utils_unique_combination_o_c760910058eb575d2384e263c612c0c3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c760910058eb575d2384e263c612c0c3"}, "created_at": 1660323535.0022259, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, device, ad_network_type, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_google_ads_source`.`stg_google_ads__account_stats`\n    group by account_id, device, ad_network_type, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_google_ads__account_stats"}, "test.apple_search_ads.not_null_apple_search_ads__ad_group_report_ad_group_id.60febec6b5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('apple_search_ads__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__ad_group_report_ad_group_id"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__ad_group_report_ad_group_id.60febec6b5", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__ad_group_report_ad_group_id.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__ad_group_report_ad_group_id", "alias": "not_null_apple_search_ads__ad_group_report_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__ad_group_report_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.107455, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__ad_group_report`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.apple_search_ads__ad_group_report"}, "test.apple_search_ads.not_null_apple_search_ads__ad_group_report_date_day.e6ffb30b3c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('apple_search_ads__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__ad_group_report_date_day"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__ad_group_report_date_day.e6ffb30b3c", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__ad_group_report_date_day.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__ad_group_report_date_day", "alias": "not_null_apple_search_ads__ad_group_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__ad_group_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.11074, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__ad_group_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.apple_search_ads__ad_group_report"}, "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__ad_group_report_organization_id__campaign_id__ad_group_id__date_day.19d180bab9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_36b2ef766b4fc10b364ed4744c94afb2\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id", "campaign_id", "ad_group_id", "date_day"], "model": "{{ get_where_subquery(ref('apple_search_ads__ad_group_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__ad_group_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_36b2ef766b4fc10b364ed4744c94afb2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "dbt_utils_unique_combination_of_columns_apple_search_ads__ad_group_report_organization_id__campaign_id__ad_group_id__date_day"], "unique_id": "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__ad_group_report_organization_id__campaign_id__ad_group_id__date_day.19d180bab9", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "dbt_utils_unique_combination_o_36b2ef766b4fc10b364ed4744c94afb2.sql", "original_file_path": "models/apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_apple_search_ads__ad_group_report_organization_id__campaign_id__ad_group_id__date_day", "alias": "dbt_utils_unique_combination_o_36b2ef766b4fc10b364ed4744c94afb2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/dbt_utils_unique_combination_o_36b2ef766b4fc10b364ed4744c94afb2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_36b2ef766b4fc10b364ed4744c94afb2"}, "created_at": 1660323535.113544, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id, campaign_id, ad_group_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__ad_group_report`\n    group by organization_id, campaign_id, ad_group_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.apple_search_ads__ad_group_report"}, "test.apple_search_ads.not_null_apple_search_ads__ad_report_ad_id.0ab2c5075c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('apple_search_ads__ad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__ad_report_ad_id"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__ad_report_ad_id.0ab2c5075c", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__ad_report_ad_id.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__ad_report_ad_id", "alias": "not_null_apple_search_ads__ad_report_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__ad_report_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.1212401, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__ad_report`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.apple_search_ads__ad_report"}, "test.apple_search_ads.not_null_apple_search_ads__ad_report_date_day.b86c049e17": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('apple_search_ads__ad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__ad_report_date_day"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__ad_report_date_day.b86c049e17", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__ad_report_date_day.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__ad_report_date_day", "alias": "not_null_apple_search_ads__ad_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__ad_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.123908, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__ad_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.apple_search_ads__ad_report"}, "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__ad_report_organization_id__campaign_id__ad_group_id__ad_id__date_day.54e27817a1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bd72aacf9db10be434541a5eb54a963c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id", "campaign_id", "ad_group_id", "ad_id", "date_day"], "model": "{{ get_where_subquery(ref('apple_search_ads__ad_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__ad_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bd72aacf9db10be434541a5eb54a963c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "dbt_utils_unique_combination_of_columns_apple_search_ads__ad_report_organization_id__campaign_id__ad_group_id__ad_id__date_day"], "unique_id": "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__ad_report_organization_id__campaign_id__ad_group_id__ad_id__date_day.54e27817a1", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "dbt_utils_unique_combination_o_bd72aacf9db10be434541a5eb54a963c.sql", "original_file_path": "models/apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_apple_search_ads__ad_report_organization_id__campaign_id__ad_group_id__ad_id__date_day", "alias": "dbt_utils_unique_combination_o_bd72aacf9db10be434541a5eb54a963c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/dbt_utils_unique_combination_o_bd72aacf9db10be434541a5eb54a963c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bd72aacf9db10be434541a5eb54a963c"}, "created_at": 1660323535.126838, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id, campaign_id, ad_group_id, ad_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__ad_report`\n    group by organization_id, campaign_id, ad_group_id, ad_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.apple_search_ads__ad_report"}, "test.apple_search_ads.not_null_apple_search_ads__campaign_report_campaign_id.e26ed1e146": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('apple_search_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__campaign_report_campaign_id"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__campaign_report_campaign_id.e26ed1e146", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__campaign_report_campaign_id.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__campaign_report_campaign_id", "alias": "not_null_apple_search_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__campaign_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.1341162, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.apple_search_ads__campaign_report"}, "test.apple_search_ads.not_null_apple_search_ads__campaign_report_date_day.35652b8d1a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('apple_search_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__campaign_report_date_day"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__campaign_report_date_day.35652b8d1a", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__campaign_report_date_day.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__campaign_report_date_day", "alias": "not_null_apple_search_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__campaign_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.1365938, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.apple_search_ads__campaign_report"}, "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__campaign_report_organization_id__campaign_id__date_day.647e56213f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3acbf89c4e0b6809bc53bfa9067d89c5\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id", "campaign_id", "date_day"], "model": "{{ get_where_subquery(ref('apple_search_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3acbf89c4e0b6809bc53bfa9067d89c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "dbt_utils_unique_combination_of_columns_apple_search_ads__campaign_report_organization_id__campaign_id__date_day"], "unique_id": "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__campaign_report_organization_id__campaign_id__date_day.647e56213f", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "dbt_utils_unique_combination_o_3acbf89c4e0b6809bc53bfa9067d89c5.sql", "original_file_path": "models/apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_apple_search_ads__campaign_report_organization_id__campaign_id__date_day", "alias": "dbt_utils_unique_combination_o_3acbf89c4e0b6809bc53bfa9067d89c5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/dbt_utils_unique_combination_o_3acbf89c4e0b6809bc53bfa9067d89c5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3acbf89c4e0b6809bc53bfa9067d89c5"}, "created_at": 1660323535.139575, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id, campaign_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__campaign_report`\n    group by organization_id, campaign_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.apple_search_ads__campaign_report"}, "test.apple_search_ads.not_null_apple_search_ads__keyword_report_keyword_id.ea493710db": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_id", "model": "{{ get_where_subquery(ref('apple_search_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__keyword_report_keyword_id"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__keyword_report_keyword_id.ea493710db", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__keyword_report_keyword_id.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__keyword_report_keyword_id", "alias": "not_null_apple_search_ads__keyword_report_keyword_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__keyword_report_keyword_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.146646, "compiled_sql": "\n    \n    \n\n\n\nselect keyword_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__keyword_report`\nwhere keyword_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword_id", "file_key_name": "models.apple_search_ads__keyword_report"}, "test.apple_search_ads.not_null_apple_search_ads__keyword_report_date_day.3dec8d0e82": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('apple_search_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__keyword_report_date_day"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__keyword_report_date_day.3dec8d0e82", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__keyword_report_date_day.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__keyword_report_date_day", "alias": "not_null_apple_search_ads__keyword_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__keyword_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.14907, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__keyword_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.apple_search_ads__keyword_report"}, "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__keyword_report_organization_id__campaign_id__ad_group_id__keyword_id__date_day.78fb033a13": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_533c8551a101baa56c397525cb8a9246\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id", "campaign_id", "ad_group_id", "keyword_id", "date_day"], "model": "{{ get_where_subquery(ref('apple_search_ads__keyword_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__keyword_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_533c8551a101baa56c397525cb8a9246", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "dbt_utils_unique_combination_of_columns_apple_search_ads__keyword_report_organization_id__campaign_id__ad_group_id__keyword_id__date_day"], "unique_id": "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__keyword_report_organization_id__campaign_id__ad_group_id__keyword_id__date_day.78fb033a13", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "dbt_utils_unique_combination_o_533c8551a101baa56c397525cb8a9246.sql", "original_file_path": "models/apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_apple_search_ads__keyword_report_organization_id__campaign_id__ad_group_id__keyword_id__date_day", "alias": "dbt_utils_unique_combination_o_533c8551a101baa56c397525cb8a9246", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/dbt_utils_unique_combination_o_533c8551a101baa56c397525cb8a9246.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_533c8551a101baa56c397525cb8a9246"}, "created_at": 1660323535.151773, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id, campaign_id, ad_group_id, keyword_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__keyword_report`\n    group by organization_id, campaign_id, ad_group_id, keyword_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.apple_search_ads__keyword_report"}, "test.apple_search_ads.not_null_apple_search_ads__organization_report_organization_id.b6cf7d69f8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('apple_search_ads__organization_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__organization_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__organization_report_organization_id"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__organization_report_organization_id.b6cf7d69f8", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__organization_report_organization_id.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__organization_report_organization_id", "alias": "not_null_apple_search_ads__organization_report_organization_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__organization_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__organization_report_organization_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.158643, "compiled_sql": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__organization_report`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "organization_id", "file_key_name": "models.apple_search_ads__organization_report"}, "test.apple_search_ads.not_null_apple_search_ads__organization_report_date_day.5784fed523": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('apple_search_ads__organization_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__organization_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__organization_report_date_day"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__organization_report_date_day.5784fed523", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__organization_report_date_day.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__organization_report_date_day", "alias": "not_null_apple_search_ads__organization_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__organization_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__organization_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.160993, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__organization_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.apple_search_ads__organization_report"}, "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__organization_report_organization_id__date_day.8bc84fccc3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f2f453668a8bb7c0387ed85fc7bfaf2d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id", "date_day"], "model": "{{ get_where_subquery(ref('apple_search_ads__organization_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__organization_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f2f453668a8bb7c0387ed85fc7bfaf2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "dbt_utils_unique_combination_of_columns_apple_search_ads__organization_report_organization_id__date_day"], "unique_id": "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__organization_report_organization_id__date_day.8bc84fccc3", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "dbt_utils_unique_combination_o_f2f453668a8bb7c0387ed85fc7bfaf2d.sql", "original_file_path": "models/apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_apple_search_ads__organization_report_organization_id__date_day", "alias": "dbt_utils_unique_combination_o_f2f453668a8bb7c0387ed85fc7bfaf2d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__organization_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/dbt_utils_unique_combination_o_f2f453668a8bb7c0387ed85fc7bfaf2d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f2f453668a8bb7c0387ed85fc7bfaf2d"}, "created_at": 1660323535.1635609, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__organization_report`\n    group by organization_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.apple_search_ads__organization_report"}, "test.apple_search_ads.not_null_apple_search_ads__search_term_report_date_day.1bc3b0d57c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('apple_search_ads__search_term_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__search_term_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__search_term_report_date_day"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__search_term_report_date_day.1bc3b0d57c", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__search_term_report_date_day.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__search_term_report_date_day", "alias": "not_null_apple_search_ads__search_term_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__search_term_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__search_term_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.169875, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__search_term_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.apple_search_ads__search_term_report"}, "test.apple_search_ads.not_null_apple_search_ads__search_term_report_search_term_text.aecc7447f7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "search_term_text", "model": "{{ get_where_subquery(ref('apple_search_ads__search_term_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__search_term_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "not_null_apple_search_ads__search_term_report_search_term_text"], "unique_id": "test.apple_search_ads.not_null_apple_search_ads__search_term_report_search_term_text.aecc7447f7", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "not_null_apple_search_ads__search_term_report_search_term_text.sql", "original_file_path": "models/apple_search_ads.yml", "name": "not_null_apple_search_ads__search_term_report_search_term_text", "alias": "not_null_apple_search_ads__search_term_report_search_term_text", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__search_term_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/not_null_apple_search_ads__search_term_report_search_term_text.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.1727161, "compiled_sql": "\n    \n    \n\n\n\nselect search_term_text\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__search_term_report`\nwhere search_term_text is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "search_term_text", "file_key_name": "models.apple_search_ads__search_term_report"}, "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__search_term_report_search_term_text__date_day.e60fe79ec4": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7c3690db5ce751fbf1f2dff07b3a8690\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["search_term_text", "date_day"], "model": "{{ get_where_subquery(ref('apple_search_ads__search_term_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads.apple_search_ads__search_term_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7c3690db5ce751fbf1f2dff07b3a8690", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads", "dbt_utils_unique_combination_of_columns_apple_search_ads__search_term_report_search_term_text__date_day"], "unique_id": "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__search_term_report_search_term_text__date_day.e60fe79ec4", "package_name": "apple_search_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads", "path": "dbt_utils_unique_combination_o_7c3690db5ce751fbf1f2dff07b3a8690.sql", "original_file_path": "models/apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_apple_search_ads__search_term_report_search_term_text__date_day", "alias": "dbt_utils_unique_combination_o_7c3690db5ce751fbf1f2dff07b3a8690", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["apple_search_ads__search_term_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads/models/apple_search_ads.yml/dbt_utils_unique_combination_o_7c3690db5ce751fbf1f2dff07b3a8690.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7c3690db5ce751fbf1f2dff07b3a8690"}, "created_at": 1660323535.175182, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        search_term_text, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads`.`apple_search_ads__search_term_report`\n    group by search_term_text, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.apple_search_ads__search_term_report"}, "test.ad_reporting.not_null_ad_reporting__account_report_account_id.316a64c022": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('ad_reporting__account_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__account_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "not_null_ad_reporting__account_report_account_id"], "unique_id": "test.ad_reporting.not_null_ad_reporting__account_report_account_id.316a64c022", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "not_null_ad_reporting__account_report_account_id.sql", "original_file_path": "models/ad_reporting.yml", "name": "not_null_ad_reporting__account_report_account_id", "alias": "not_null_ad_reporting__account_report_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/not_null_ad_reporting__account_report_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.286038, "compiled_sql": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__account_report`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.ad_reporting__account_report"}, "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__account_report_platform__date_day__account_id.1cadcf1583": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_096d5dbf3a188e4736e3d2c607a5a2ce\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["platform", "date_day", "account_id"], "model": "{{ get_where_subquery(ref('ad_reporting__account_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__account_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_096d5dbf3a188e4736e3d2c607a5a2ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "dbt_utils_unique_combination_of_columns_ad_reporting__account_report_platform__date_day__account_id"], "unique_id": "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__account_report_platform__date_day__account_id.1cadcf1583", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "dbt_utils_unique_combination_o_096d5dbf3a188e4736e3d2c607a5a2ce.sql", "original_file_path": "models/ad_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_ad_reporting__account_report_platform__date_day__account_id", "alias": "dbt_utils_unique_combination_o_096d5dbf3a188e4736e3d2c607a5a2ce", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/dbt_utils_unique_combination_o_096d5dbf3a188e4736e3d2c607a5a2ce.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_096d5dbf3a188e4736e3d2c607a5a2ce"}, "created_at": 1660323535.2886112, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        platform, date_day, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__account_report`\n    group by platform, date_day, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.ad_reporting__account_report"}, "test.ad_reporting.not_null_ad_reporting__ad_group_report_ad_group_id.963e17e842": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('ad_reporting__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "not_null_ad_reporting__ad_group_report_ad_group_id"], "unique_id": "test.ad_reporting.not_null_ad_reporting__ad_group_report_ad_group_id.963e17e842", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "not_null_ad_reporting__ad_group_report_ad_group_id.sql", "original_file_path": "models/ad_reporting.yml", "name": "not_null_ad_reporting__ad_group_report_ad_group_id", "alias": "not_null_ad_reporting__ad_group_report_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/not_null_ad_reporting__ad_group_report_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.294773, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__ad_group_report`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.ad_reporting__ad_group_report"}, "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__ad_group_report_platform__date_day__ad_group_id__campaign_id__account_id.2116e5a78a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_86fffff8dec06644eeb81f4837856342\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["platform", "date_day", "ad_group_id", "campaign_id", "account_id"], "model": "{{ get_where_subquery(ref('ad_reporting__ad_group_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__ad_group_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_86fffff8dec06644eeb81f4837856342", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "dbt_utils_unique_combination_of_columns_ad_reporting__ad_group_report_platform__date_day__ad_group_id__campaign_id__account_id"], "unique_id": "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__ad_group_report_platform__date_day__ad_group_id__campaign_id__account_id.2116e5a78a", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "dbt_utils_unique_combination_o_86fffff8dec06644eeb81f4837856342.sql", "original_file_path": "models/ad_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_ad_reporting__ad_group_report_platform__date_day__ad_group_id__campaign_id__account_id", "alias": "dbt_utils_unique_combination_o_86fffff8dec06644eeb81f4837856342", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/dbt_utils_unique_combination_o_86fffff8dec06644eeb81f4837856342.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_86fffff8dec06644eeb81f4837856342"}, "created_at": 1660323535.297578, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        platform, date_day, ad_group_id, campaign_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__ad_group_report`\n    group by platform, date_day, ad_group_id, campaign_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.ad_reporting__ad_group_report"}, "test.ad_reporting.not_null_ad_reporting__ad_report_ad_id.f3eb210152": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('ad_reporting__ad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "not_null_ad_reporting__ad_report_ad_id"], "unique_id": "test.ad_reporting.not_null_ad_reporting__ad_report_ad_id.f3eb210152", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "not_null_ad_reporting__ad_report_ad_id.sql", "original_file_path": "models/ad_reporting.yml", "name": "not_null_ad_reporting__ad_report_ad_id", "alias": "not_null_ad_reporting__ad_report_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/not_null_ad_reporting__ad_report_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.30452, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__ad_report`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.ad_reporting__ad_report"}, "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__ad_report_platform__date_day__ad_id__ad_group_id__campaign_id__account_id.3c5bc5ae55": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c3ce7d8d1708ef4f2ca05b498dce6f21\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["platform", "date_day", "ad_id", "ad_group_id", "campaign_id", "account_id"], "model": "{{ get_where_subquery(ref('ad_reporting__ad_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__ad_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c3ce7d8d1708ef4f2ca05b498dce6f21", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "dbt_utils_unique_combination_of_columns_ad_reporting__ad_report_platform__date_day__ad_id__ad_group_id__campaign_id__account_id"], "unique_id": "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__ad_report_platform__date_day__ad_id__ad_group_id__campaign_id__account_id.3c5bc5ae55", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "dbt_utils_unique_combination_o_c3ce7d8d1708ef4f2ca05b498dce6f21.sql", "original_file_path": "models/ad_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_ad_reporting__ad_report_platform__date_day__ad_id__ad_group_id__campaign_id__account_id", "alias": "dbt_utils_unique_combination_o_c3ce7d8d1708ef4f2ca05b498dce6f21", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/dbt_utils_unique_combination_o_c3ce7d8d1708ef4f2ca05b498dce6f21.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c3ce7d8d1708ef4f2ca05b498dce6f21"}, "created_at": 1660323535.3071308, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        platform, date_day, ad_id, ad_group_id, campaign_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__ad_report`\n    group by platform, date_day, ad_id, ad_group_id, campaign_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.ad_reporting__ad_report"}, "test.ad_reporting.not_null_ad_reporting__campaign_report_campaign_id.1cfaa7698b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('ad_reporting__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "not_null_ad_reporting__campaign_report_campaign_id"], "unique_id": "test.ad_reporting.not_null_ad_reporting__campaign_report_campaign_id.1cfaa7698b", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "not_null_ad_reporting__campaign_report_campaign_id.sql", "original_file_path": "models/ad_reporting.yml", "name": "not_null_ad_reporting__campaign_report_campaign_id", "alias": "not_null_ad_reporting__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/not_null_ad_reporting__campaign_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.3146381, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.ad_reporting__campaign_report"}, "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__campaign_report_platform__date_day__campaign_id__account_id.4b3426da0f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f617d9a2a7237faaa5a8bf82407d243f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["platform", "date_day", "campaign_id", "account_id"], "model": "{{ get_where_subquery(ref('ad_reporting__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f617d9a2a7237faaa5a8bf82407d243f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "dbt_utils_unique_combination_of_columns_ad_reporting__campaign_report_platform__date_day__campaign_id__account_id"], "unique_id": "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__campaign_report_platform__date_day__campaign_id__account_id.4b3426da0f", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "dbt_utils_unique_combination_o_f617d9a2a7237faaa5a8bf82407d243f.sql", "original_file_path": "models/ad_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_ad_reporting__campaign_report_platform__date_day__campaign_id__account_id", "alias": "dbt_utils_unique_combination_o_f617d9a2a7237faaa5a8bf82407d243f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/dbt_utils_unique_combination_o_f617d9a2a7237faaa5a8bf82407d243f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f617d9a2a7237faaa5a8bf82407d243f"}, "created_at": 1660323535.3173602, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        platform, date_day, campaign_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__campaign_report`\n    group by platform, date_day, campaign_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.ad_reporting__campaign_report"}, "test.ad_reporting.not_null_ad_reporting__keyword_report_keyword_text.5d9a007b6f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_text", "model": "{{ get_where_subquery(ref('ad_reporting__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "not_null_ad_reporting__keyword_report_keyword_text"], "unique_id": "test.ad_reporting.not_null_ad_reporting__keyword_report_keyword_text.5d9a007b6f", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "not_null_ad_reporting__keyword_report_keyword_text.sql", "original_file_path": "models/ad_reporting.yml", "name": "not_null_ad_reporting__keyword_report_keyword_text", "alias": "not_null_ad_reporting__keyword_report_keyword_text", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/not_null_ad_reporting__keyword_report_keyword_text.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.3243961, "compiled_sql": "\n    \n    \n\n\n\nselect keyword_text\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__keyword_report`\nwhere keyword_text is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword_text", "file_key_name": "models.ad_reporting__keyword_report"}, "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__keyword_report_platform__date_day__keyword_text__keyword_match_type__ad_group_id__campaign_id__account_id.45c0f2075a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f1b58d2a0be6cb3ab97cee07f3247bfb\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["platform", "date_day", "keyword_text", "keyword_match_type", "ad_group_id", "campaign_id", "account_id"], "model": "{{ get_where_subquery(ref('ad_reporting__keyword_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__keyword_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f1b58d2a0be6cb3ab97cee07f3247bfb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "dbt_utils_unique_combination_of_columns_ad_reporting__keyword_report_platform__date_day__keyword_text__keyword_match_type__ad_group_id__campaign_id__account_id"], "unique_id": "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__keyword_report_platform__date_day__keyword_text__keyword_match_type__ad_group_id__campaign_id__account_id.45c0f2075a", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "dbt_utils_unique_combination_o_f1b58d2a0be6cb3ab97cee07f3247bfb.sql", "original_file_path": "models/ad_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_ad_reporting__keyword_report_platform__date_day__keyword_text__keyword_match_type__ad_group_id__campaign_id__account_id", "alias": "dbt_utils_unique_combination_o_f1b58d2a0be6cb3ab97cee07f3247bfb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/dbt_utils_unique_combination_o_f1b58d2a0be6cb3ab97cee07f3247bfb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f1b58d2a0be6cb3ab97cee07f3247bfb"}, "created_at": 1660323535.327113, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        platform, date_day, keyword_text, keyword_match_type, ad_group_id, campaign_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__keyword_report`\n    group by platform, date_day, keyword_text, keyword_match_type, ad_group_id, campaign_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.ad_reporting__keyword_report"}, "test.ad_reporting.not_null_ad_reporting__search_report_search_query.ee2f0fcafb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "search_query", "model": "{{ get_where_subquery(ref('ad_reporting__search_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__search_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "not_null_ad_reporting__search_report_search_query"], "unique_id": "test.ad_reporting.not_null_ad_reporting__search_report_search_query.ee2f0fcafb", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "not_null_ad_reporting__search_report_search_query.sql", "original_file_path": "models/ad_reporting.yml", "name": "not_null_ad_reporting__search_report_search_query", "alias": "not_null_ad_reporting__search_report_search_query", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__search_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/not_null_ad_reporting__search_report_search_query.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.334392, "compiled_sql": "\n    \n    \n\n\n\nselect search_query\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__search_report`\nwhere search_query is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "search_query", "file_key_name": "models.ad_reporting__search_report"}, "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__search_report_platform__date_day__search_query__search_match_type__keyword_id__ad_group_id__campaign_id__account_id.4efd457bbf": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_437a89e9e4e53f95ce99529e3a181371\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["platform", "date_day", "search_query", "search_match_type", "keyword_id", "ad_group_id", "campaign_id", "account_id"], "model": "{{ get_where_subquery(ref('ad_reporting__search_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__search_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_437a89e9e4e53f95ce99529e3a181371", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "dbt_utils_unique_combination_of_columns_ad_reporting__search_report_platform__date_day__search_query__search_match_type__keyword_id__ad_group_id__campaign_id__account_id"], "unique_id": "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__search_report_platform__date_day__search_query__search_match_type__keyword_id__ad_group_id__campaign_id__account_id.4efd457bbf", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "dbt_utils_unique_combination_o_437a89e9e4e53f95ce99529e3a181371.sql", "original_file_path": "models/ad_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_ad_reporting__search_report_platform__date_day__search_query__search_match_type__keyword_id__ad_group_id__campaign_id__account_id", "alias": "dbt_utils_unique_combination_o_437a89e9e4e53f95ce99529e3a181371", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__search_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/dbt_utils_unique_combination_o_437a89e9e4e53f95ce99529e3a181371.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_437a89e9e4e53f95ce99529e3a181371"}, "created_at": 1660323535.3364558, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        platform, date_day, search_query, search_match_type, keyword_id, ad_group_id, campaign_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__search_report`\n    group by platform, date_day, search_query, search_match_type, keyword_id, ad_group_id, campaign_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.ad_reporting__search_report"}, "test.ad_reporting.not_null_ad_reporting__url_report_base_url.a29864e5b6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "base_url", "model": "{{ get_where_subquery(ref('ad_reporting__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "not_null_ad_reporting__url_report_base_url"], "unique_id": "test.ad_reporting.not_null_ad_reporting__url_report_base_url.a29864e5b6", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "not_null_ad_reporting__url_report_base_url.sql", "original_file_path": "models/ad_reporting.yml", "name": "not_null_ad_reporting__url_report_base_url", "alias": "not_null_ad_reporting__url_report_base_url", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/not_null_ad_reporting__url_report_base_url.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.3447528, "compiled_sql": "\n    \n    \n\n\n\nselect base_url\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__url_report`\nwhere base_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "base_url", "file_key_name": "models.ad_reporting__url_report"}, "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__url_report_platform__date_day__ad_group_id__campaign_id__account_id__base_url__url_host__url_path__utm_campaign__utm_content__utm_medium__utm_source__utm_term.cd216b1424": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_996efa0d96cfeb69e01d6d9960ce6a10\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["platform", "date_day", "ad_group_id", "campaign_id", "account_id", "base_url", "url_host", "url_path", "utm_campaign", "utm_content", "utm_medium", "utm_source", "utm_term"], "model": "{{ get_where_subquery(ref('ad_reporting__url_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ad_reporting.ad_reporting__url_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_996efa0d96cfeb69e01d6d9960ce6a10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["ad_reporting", "dbt_utils_unique_combination_of_columns_ad_reporting__url_report_platform__date_day__ad_group_id__campaign_id__account_id__base_url__url_host__url_path__utm_campaign__utm_content__utm_medium__utm_source__utm_term"], "unique_id": "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__url_report_platform__date_day__ad_group_id__campaign_id__account_id__base_url__url_host__url_path__utm_campaign__utm_content__utm_medium__utm_source__utm_term.cd216b1424", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "dbt_utils_unique_combination_o_996efa0d96cfeb69e01d6d9960ce6a10.sql", "original_file_path": "models/ad_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_ad_reporting__url_report_platform__date_day__ad_group_id__campaign_id__account_id__base_url__url_host__url_path__utm_campaign__utm_content__utm_medium__utm_source__utm_term", "alias": "dbt_utils_unique_combination_o_996efa0d96cfeb69e01d6d9960ce6a10", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["ad_reporting__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.yml/dbt_utils_unique_combination_o_996efa0d96cfeb69e01d6d9960ce6a10.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_996efa0d96cfeb69e01d6d9960ce6a10"}, "created_at": 1660323535.3473852, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        platform, date_day, ad_group_id, campaign_id, account_id, base_url, url_host, url_path, utm_campaign, utm_content, utm_medium, utm_source, utm_term\n    from `dbt-package-testing`.`ad_reporting_integration_tests_ad_reporting`.`ad_reporting__url_report`\n    group by platform, date_day, ad_group_id, campaign_id, account_id, base_url, url_host, url_path, utm_campaign, utm_content, utm_medium, utm_source, utm_term\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.ad_reporting__url_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_history_modified_at.e5d65fa28f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "modified_at", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__ad_group_history_modified_at"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_history_modified_at.e5d65fa28f", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__ad_group_history_modified_at.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__ad_group_history_modified_at", "alias": "not_null_stg_apple_search_ads__ad_group_history_modified_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__ad_group_history_modified_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.4497101, "compiled_sql": "\n    \n    \n\n\n\nselect modified_at\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_history`\nwhere modified_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "modified_at", "file_key_name": "models.stg_apple_search_ads__ad_group_history"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_history_ad_group_id.dc128eecb7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__ad_group_history_ad_group_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_history_ad_group_id.dc128eecb7", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__ad_group_history_ad_group_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__ad_group_history_ad_group_id", "alias": "not_null_stg_apple_search_ads__ad_group_history_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__ad_group_history_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.451992, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_history`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.stg_apple_search_ads__ad_group_history"}, "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_history_ad_group_id__modified_at.84af14c83b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d82553a0f3b4daa8d59460c85a542d4f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "modified_at"], "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_group_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d82553a0f3b4daa8d59460c85a542d4f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_history_ad_group_id__modified_at"], "unique_id": "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_history_ad_group_id__modified_at.84af14c83b", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "dbt_utils_unique_combination_o_d82553a0f3b4daa8d59460c85a542d4f.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_history_ad_group_id__modified_at", "alias": "dbt_utils_unique_combination_o_d82553a0f3b4daa8d59460c85a542d4f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/dbt_utils_unique_combination_o_d82553a0f3b4daa8d59460c85a542d4f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d82553a0f3b4daa8d59460c85a542d4f"}, "created_at": 1660323535.454756, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, modified_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_history`\n    group by ad_group_id, modified_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_apple_search_ads__ad_group_history"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_report_ad_group_id.a115f9cfc1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__ad_group_report_ad_group_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_report_ad_group_id.a115f9cfc1", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__ad_group_report_ad_group_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__ad_group_report_ad_group_id", "alias": "not_null_stg_apple_search_ads__ad_group_report_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__ad_group_report_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.4613829, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_report`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.stg_apple_search_ads__ad_group_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_report_date_day.4dfd46a43b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__ad_group_report_date_day"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_report_date_day.4dfd46a43b", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__ad_group_report_date_day.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__ad_group_report_date_day", "alias": "not_null_stg_apple_search_ads__ad_group_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__ad_group_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.4633758, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_apple_search_ads__ad_group_report"}, "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_report_ad_group_id__date_day.a0fcc4e33c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_107a9492c163887581fde6b34131e42d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "date_day"], "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_group_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_107a9492c163887581fde6b34131e42d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_report_ad_group_id__date_day"], "unique_id": "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_report_ad_group_id__date_day.a0fcc4e33c", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "dbt_utils_unique_combination_o_107a9492c163887581fde6b34131e42d.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_report_ad_group_id__date_day", "alias": "dbt_utils_unique_combination_o_107a9492c163887581fde6b34131e42d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/dbt_utils_unique_combination_o_107a9492c163887581fde6b34131e42d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_107a9492c163887581fde6b34131e42d"}, "created_at": 1660323535.466311, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_group_report`\n    group by ad_group_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_apple_search_ads__ad_group_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_history_modified_at.2eea7e006d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "modified_at", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__ad_history_modified_at"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_history_modified_at.2eea7e006d", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__ad_history_modified_at.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__ad_history_modified_at", "alias": "not_null_stg_apple_search_ads__ad_history_modified_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__ad_history_modified_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.471254, "compiled_sql": "\n    \n    \n\n\n\nselect modified_at\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_history`\nwhere modified_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "modified_at", "file_key_name": "models.stg_apple_search_ads__ad_history"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_history_ad_id.4ad3bde32a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__ad_history_ad_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_history_ad_id.4ad3bde32a", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__ad_history_ad_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__ad_history_ad_id", "alias": "not_null_stg_apple_search_ads__ad_history_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__ad_history_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.4735591, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_history`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_apple_search_ads__ad_history"}, "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_history_ad_id__modified_at.38599b8cba": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ed0f61b146739c836defcf2fb6005d31\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "modified_at"], "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ed0f61b146739c836defcf2fb6005d31", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_history_ad_id__modified_at"], "unique_id": "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_history_ad_id__modified_at.38599b8cba", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "dbt_utils_unique_combination_o_ed0f61b146739c836defcf2fb6005d31.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_history_ad_id__modified_at", "alias": "dbt_utils_unique_combination_o_ed0f61b146739c836defcf2fb6005d31", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/dbt_utils_unique_combination_o_ed0f61b146739c836defcf2fb6005d31.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ed0f61b146739c836defcf2fb6005d31"}, "created_at": 1660323535.476532, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, modified_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_history`\n    group by ad_id, modified_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_apple_search_ads__ad_history"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_date_day.e6252346d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__ad_report_date_day"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_date_day.e6252346d8", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__ad_report_date_day.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__ad_report_date_day", "alias": "not_null_stg_apple_search_ads__ad_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__ad_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.4819782, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_apple_search_ads__ad_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_ad_group_id.a397755e9f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__ad_report_ad_group_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_ad_group_id.a397755e9f", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__ad_report_ad_group_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__ad_report_ad_group_id", "alias": "not_null_stg_apple_search_ads__ad_report_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__ad_report_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.483945, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_report`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.stg_apple_search_ads__ad_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_ad_id.d08e760c58": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__ad_report_ad_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_ad_id.d08e760c58", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__ad_report_ad_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__ad_report_ad_id", "alias": "not_null_stg_apple_search_ads__ad_report_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__ad_report_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.486165, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_report`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_apple_search_ads__ad_report"}, "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_report_ad_id__date_day__ad_group_id.0d8d23c516": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9ce5e828ce9fa0987b5e86cbcb1207b9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "date_day", "ad_group_id"], "model": "{{ get_where_subquery(ref('stg_apple_search_ads__ad_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9ce5e828ce9fa0987b5e86cbcb1207b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_report_ad_id__date_day__ad_group_id"], "unique_id": "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_report_ad_id__date_day__ad_group_id.0d8d23c516", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "dbt_utils_unique_combination_o_9ce5e828ce9fa0987b5e86cbcb1207b9.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_report_ad_id__date_day__ad_group_id", "alias": "dbt_utils_unique_combination_o_9ce5e828ce9fa0987b5e86cbcb1207b9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/dbt_utils_unique_combination_o_9ce5e828ce9fa0987b5e86cbcb1207b9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9ce5e828ce9fa0987b5e86cbcb1207b9"}, "created_at": 1660323535.4888802, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, date_day, ad_group_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__ad_report`\n    group by ad_id, date_day, ad_group_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_apple_search_ads__ad_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_history_modified_at.f34a7a97c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "modified_at", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__campaign_history_modified_at"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_history_modified_at.f34a7a97c9", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__campaign_history_modified_at.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__campaign_history_modified_at", "alias": "not_null_stg_apple_search_ads__campaign_history_modified_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__campaign_history_modified_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.495471, "compiled_sql": "\n    \n    \n\n\n\nselect modified_at\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history`\nwhere modified_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "modified_at", "file_key_name": "models.stg_apple_search_ads__campaign_history"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_history_campaign_id.3f0f7502b8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__campaign_history_campaign_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_history_campaign_id.3f0f7502b8", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__campaign_history_campaign_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__campaign_history_campaign_id", "alias": "not_null_stg_apple_search_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.497507, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_apple_search_ads__campaign_history"}, "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_history_campaign_id__modified_at.317f970af9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_055fa7e8a6c292e0f56d1feec61284a9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "modified_at"], "model": "{{ get_where_subquery(ref('stg_apple_search_ads__campaign_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_055fa7e8a6c292e0f56d1feec61284a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_history_campaign_id__modified_at"], "unique_id": "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_history_campaign_id__modified_at.317f970af9", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "dbt_utils_unique_combination_o_055fa7e8a6c292e0f56d1feec61284a9.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_history_campaign_id__modified_at", "alias": "dbt_utils_unique_combination_o_055fa7e8a6c292e0f56d1feec61284a9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/dbt_utils_unique_combination_o_055fa7e8a6c292e0f56d1feec61284a9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_055fa7e8a6c292e0f56d1feec61284a9"}, "created_at": 1660323535.5004659, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, modified_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_history`\n    group by campaign_id, modified_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_apple_search_ads__campaign_history"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_report_campaign_id.b83941e728": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__campaign_report_campaign_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_report_campaign_id.b83941e728", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__campaign_report_campaign_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__campaign_report_campaign_id", "alias": "not_null_stg_apple_search_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__campaign_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.505153, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_apple_search_ads__campaign_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_report_date_day.c8dc10a6f3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__campaign_report_date_day"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_report_date_day.c8dc10a6f3", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__campaign_report_date_day.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__campaign_report_date_day", "alias": "not_null_stg_apple_search_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__campaign_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.507705, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_apple_search_ads__campaign_report"}, "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_report_campaign_id__date_day.bad41b0481": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d8bdb244aa45cb237ef5189371733c07\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "date_day"], "model": "{{ get_where_subquery(ref('stg_apple_search_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d8bdb244aa45cb237ef5189371733c07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_report_campaign_id__date_day"], "unique_id": "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_report_campaign_id__date_day.bad41b0481", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "dbt_utils_unique_combination_o_d8bdb244aa45cb237ef5189371733c07.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_report_campaign_id__date_day", "alias": "dbt_utils_unique_combination_o_d8bdb244aa45cb237ef5189371733c07", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/dbt_utils_unique_combination_o_d8bdb244aa45cb237ef5189371733c07.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d8bdb244aa45cb237ef5189371733c07"}, "created_at": 1660323535.510736, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__campaign_report`\n    group by campaign_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_apple_search_ads__campaign_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_history_modified_at.42fde5a287": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "modified_at", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__keyword_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__keyword_history_modified_at"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_history_modified_at.42fde5a287", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__keyword_history_modified_at.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__keyword_history_modified_at", "alias": "not_null_stg_apple_search_ads__keyword_history_modified_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__keyword_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__keyword_history_modified_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.515882, "compiled_sql": "\n    \n    \n\n\n\nselect modified_at\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_history`\nwhere modified_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "modified_at", "file_key_name": "models.stg_apple_search_ads__keyword_history"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_history_keyword_id.889f83cfd2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__keyword_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__keyword_history_keyword_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_history_keyword_id.889f83cfd2", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__keyword_history_keyword_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__keyword_history_keyword_id", "alias": "not_null_stg_apple_search_ads__keyword_history_keyword_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__keyword_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__keyword_history_keyword_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.517872, "compiled_sql": "\n    \n    \n\n\n\nselect keyword_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_history`\nwhere keyword_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword_id", "file_key_name": "models.stg_apple_search_ads__keyword_history"}, "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_history_keyword_id__modified_at.7b06162d24": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_26b09b2f81a50b0ba84b566cd7df85b5\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["keyword_id", "modified_at"], "model": "{{ get_where_subquery(ref('stg_apple_search_ads__keyword_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_26b09b2f81a50b0ba84b566cd7df85b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_history_keyword_id__modified_at"], "unique_id": "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_history_keyword_id__modified_at.7b06162d24", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "dbt_utils_unique_combination_o_26b09b2f81a50b0ba84b566cd7df85b5.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_history_keyword_id__modified_at", "alias": "dbt_utils_unique_combination_o_26b09b2f81a50b0ba84b566cd7df85b5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__keyword_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/dbt_utils_unique_combination_o_26b09b2f81a50b0ba84b566cd7df85b5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_26b09b2f81a50b0ba84b566cd7df85b5"}, "created_at": 1660323535.5198631, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        keyword_id, modified_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_history`\n    group by keyword_id, modified_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_apple_search_ads__keyword_history"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_report_keyword_id.501725b09e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__keyword_report_keyword_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_report_keyword_id.501725b09e", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__keyword_report_keyword_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__keyword_report_keyword_id", "alias": "not_null_stg_apple_search_ads__keyword_report_keyword_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__keyword_report_keyword_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.527421, "compiled_sql": "\n    \n    \n\n\n\nselect keyword_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_report`\nwhere keyword_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword_id", "file_key_name": "models.stg_apple_search_ads__keyword_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_report_date_day.16098db928": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__keyword_report_date_day"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_report_date_day.16098db928", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__keyword_report_date_day.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__keyword_report_date_day", "alias": "not_null_stg_apple_search_ads__keyword_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__keyword_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.529643, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_apple_search_ads__keyword_report"}, "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_report_keyword_id__date_day.9f0099cff8": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2ec7f68205f05a3b68cfa7324135a1a5\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["keyword_id", "date_day"], "model": "{{ get_where_subquery(ref('stg_apple_search_ads__keyword_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2ec7f68205f05a3b68cfa7324135a1a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_report_keyword_id__date_day"], "unique_id": "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_report_keyword_id__date_day.9f0099cff8", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "dbt_utils_unique_combination_o_2ec7f68205f05a3b68cfa7324135a1a5.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_report_keyword_id__date_day", "alias": "dbt_utils_unique_combination_o_2ec7f68205f05a3b68cfa7324135a1a5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/dbt_utils_unique_combination_o_2ec7f68205f05a3b68cfa7324135a1a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2ec7f68205f05a3b68cfa7324135a1a5"}, "created_at": 1660323535.5316339, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        keyword_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__keyword_report`\n    group by keyword_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_apple_search_ads__keyword_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__organization_organization_id.b013ce33cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__organization')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__organization"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__organization_organization_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__organization_organization_id.b013ce33cb", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__organization_organization_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__organization_organization_id", "alias": "not_null_stg_apple_search_ads__organization_organization_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__organization"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__organization_organization_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.536513, "compiled_sql": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "organization_id", "file_key_name": "models.stg_apple_search_ads__organization"}, "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__organization_organization_id.8647048f7a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_53ded9060f9d3981217ae23e5d2ba89b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id"], "model": "{{ get_where_subquery(ref('stg_apple_search_ads__organization')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__organization"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_53ded9060f9d3981217ae23e5d2ba89b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__organization_organization_id"], "unique_id": "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__organization_organization_id.8647048f7a", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "dbt_utils_unique_combination_o_53ded9060f9d3981217ae23e5d2ba89b.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__organization_organization_id", "alias": "dbt_utils_unique_combination_o_53ded9060f9d3981217ae23e5d2ba89b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__organization"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/dbt_utils_unique_combination_o_53ded9060f9d3981217ae23e5d2ba89b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_53ded9060f9d3981217ae23e5d2ba89b"}, "created_at": 1660323535.538507, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__organization`\n    group by organization_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_apple_search_ads__organization"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__search_term_report__fivetran_id.aa430d1dad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__search_term_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__search_term_report__fivetran_id"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__search_term_report__fivetran_id.aa430d1dad", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__search_term_report__fivetran_id.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__search_term_report__fivetran_id", "alias": "not_null_stg_apple_search_ads__search_term_report__fivetran_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__search_term_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__search_term_report__fivetran_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.5445151, "compiled_sql": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__search_term_report`\nwhere _fivetran_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_id", "file_key_name": "models.stg_apple_search_ads__search_term_report"}, "test.apple_search_ads_source.not_null_stg_apple_search_ads__search_term_report_date_day.fd93df3302": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_apple_search_ads__search_term_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "not_null_stg_apple_search_ads__search_term_report_date_day"], "unique_id": "test.apple_search_ads_source.not_null_stg_apple_search_ads__search_term_report_date_day.fd93df3302", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "not_null_stg_apple_search_ads__search_term_report_date_day.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "not_null_stg_apple_search_ads__search_term_report_date_day", "alias": "not_null_stg_apple_search_ads__search_term_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__search_term_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/not_null_stg_apple_search_ads__search_term_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.547561, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__search_term_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_apple_search_ads__search_term_report"}, "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__search_term_report__fivetran_id__date_day.aad2a48344": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4b957c6b8a75dcd1a6055884f71d71c1\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "date_day"], "model": "{{ get_where_subquery(ref('stg_apple_search_ads__search_term_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4b957c6b8a75dcd1a6055884f71d71c1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["apple_search_ads_source", "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__search_term_report__fivetran_id__date_day"], "unique_id": "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__search_term_report__fivetran_id__date_day.aad2a48344", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "dbt_utils_unique_combination_o_4b957c6b8a75dcd1a6055884f71d71c1.sql", "original_file_path": "models/stg_apple_search_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_apple_search_ads__search_term_report__fivetran_id__date_day", "alias": "dbt_utils_unique_combination_o_4b957c6b8a75dcd1a6055884f71d71c1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_apple_search_ads__search_term_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/apple_search_ads_source/models/stg_apple_search_ads.yml/dbt_utils_unique_combination_o_4b957c6b8a75dcd1a6055884f71d71c1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4b957c6b8a75dcd1a6055884f71d71c1"}, "created_at": 1660323535.550317, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, date_day\n    from `dbt-package-testing`.`ad_reporting_integration_tests_apple_search_ads_source`.`stg_apple_search_ads__search_term_report`\n    group by _fivetran_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_apple_search_ads__search_term_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_ad_group_id.220c6220be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__ad_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__ad_group_history_ad_group_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_ad_group_id.220c6220be", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__ad_group_history_ad_group_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__ad_group_history_ad_group_id", "alias": "not_null_stg_pinterest_ads__ad_group_history_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__ad_group_history_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.605361, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_history`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.stg_pinterest_ads__ad_group_history"}, "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_history_ad_group_id___fivetran_synced.1132e1f339": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_14ec492421aa290adbd40aba9f38efa7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_pinterest_ads__ad_group_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_14ec492421aa290adbd40aba9f38efa7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_history_ad_group_id___fivetran_synced"], "unique_id": "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_history_ad_group_id___fivetran_synced.1132e1f339", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "dbt_utils_unique_combination_o_14ec492421aa290adbd40aba9f38efa7.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_history_ad_group_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_14ec492421aa290adbd40aba9f38efa7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/dbt_utils_unique_combination_o_14ec492421aa290adbd40aba9f38efa7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_14ec492421aa290adbd40aba9f38efa7"}, "created_at": 1660323535.608093, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, _fivetran_synced\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_history`\n    group by ad_group_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pinterest_ads__ad_group_history"}, "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_campaign_id.60cb10d341": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__campaign_history_campaign_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_campaign_id.60cb10d341", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__campaign_history_campaign_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__campaign_history_campaign_id", "alias": "not_null_stg_pinterest_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.6141398, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_pinterest_ads__campaign_history"}, "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_history_campaign_id___fivetran_synced.eff7196b87": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0f71f27ed6b0ce2d4940b4361559871b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_pinterest_ads__campaign_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0f71f27ed6b0ce2d4940b4361559871b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_history_campaign_id___fivetran_synced"], "unique_id": "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_history_campaign_id___fivetran_synced.eff7196b87", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "dbt_utils_unique_combination_o_0f71f27ed6b0ce2d4940b4361559871b.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_history_campaign_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_0f71f27ed6b0ce2d4940b4361559871b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/dbt_utils_unique_combination_o_0f71f27ed6b0ce2d4940b4361559871b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0f71f27ed6b0ce2d4940b4361559871b"}, "created_at": 1660323535.61615, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, _fivetran_synced\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_history`\n    group by campaign_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pinterest_ads__campaign_history"}, "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_pin_promotion_id.171995cd34": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_pinterest_ads__pi_5cf03dfc3d2615f9d68ae62d55aa2b8f\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pin_promotion_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__pin_promotion_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"]}, "config": {"enabled": true, "alias": "not_null_stg_pinterest_ads__pi_5cf03dfc3d2615f9d68ae62d55aa2b8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__pin_promotion_history_pin_promotion_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_pin_promotion_id.171995cd34", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__pi_5cf03dfc3d2615f9d68ae62d55aa2b8f.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__pin_promotion_history_pin_promotion_id", "alias": "not_null_stg_pinterest_ads__pi_5cf03dfc3d2615f9d68ae62d55aa2b8f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__pi_5cf03dfc3d2615f9d68ae62d55aa2b8f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_pinterest_ads__pi_5cf03dfc3d2615f9d68ae62d55aa2b8f"}, "created_at": 1660323535.621197, "compiled_sql": "\n    \n    \n\n\n\nselect pin_promotion_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_history`\nwhere pin_promotion_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pin_promotion_id", "file_key_name": "models.stg_pinterest_ads__pin_promotion_history"}, "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_history__fivetran_synced__pin_promotion_id.8e9ab31ea9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e0501de9c3316348957b42725bcba175\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_synced", "pin_promotion_id"], "model": "{{ get_where_subquery(ref('stg_pinterest_ads__pin_promotion_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e0501de9c3316348957b42725bcba175", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_history__fivetran_synced__pin_promotion_id"], "unique_id": "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_history__fivetran_synced__pin_promotion_id.8e9ab31ea9", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "dbt_utils_unique_combination_o_e0501de9c3316348957b42725bcba175.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_history__fivetran_synced__pin_promotion_id", "alias": "dbt_utils_unique_combination_o_e0501de9c3316348957b42725bcba175", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/dbt_utils_unique_combination_o_e0501de9c3316348957b42725bcba175.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e0501de9c3316348957b42725bcba175"}, "created_at": 1660323535.624623, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_synced, pin_promotion_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_history`\n    group by _fivetran_synced, pin_promotion_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pinterest_ads__pin_promotion_history"}, "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_date_day.ed272212a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__pin_promotion_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__pin_promotion_report_date_day"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_date_day.ed272212a1", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__pin_promotion_report_date_day.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__pin_promotion_report_date_day", "alias": "not_null_stg_pinterest_ads__pin_promotion_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__pin_promotion_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.630653, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_pinterest_ads__pin_promotion_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_pin_promotion_id.9c3c9f71ab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_pinterest_ads__pi_d0985f4b7b2bc6d5ec7f384cc03d6f4b\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pin_promotion_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__pin_promotion_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"]}, "config": {"enabled": true, "alias": "not_null_stg_pinterest_ads__pi_d0985f4b7b2bc6d5ec7f384cc03d6f4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__pin_promotion_report_pin_promotion_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_pin_promotion_id.9c3c9f71ab", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__pi_d0985f4b7b2bc6d5ec7f384cc03d6f4b.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__pin_promotion_report_pin_promotion_id", "alias": "not_null_stg_pinterest_ads__pi_d0985f4b7b2bc6d5ec7f384cc03d6f4b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__pi_d0985f4b7b2bc6d5ec7f384cc03d6f4b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_pinterest_ads__pi_d0985f4b7b2bc6d5ec7f384cc03d6f4b"}, "created_at": 1660323535.633007, "compiled_sql": "\n    \n    \n\n\n\nselect pin_promotion_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_report`\nwhere pin_promotion_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pin_promotion_id", "file_key_name": "models.stg_pinterest_ads__pin_promotion_report"}, "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_report_date_day__pin_promotion_id__ad_group_id__campaign_id__advertiser_id.7ea04e6024": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b200b80456022485be650ebe0c64fc19\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "pin_promotion_id", "ad_group_id", "campaign_id", "advertiser_id"], "model": "{{ get_where_subquery(ref('stg_pinterest_ads__pin_promotion_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b200b80456022485be650ebe0c64fc19", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_report_date_day__pin_promotion_id__ad_group_id__campaign_id__advertiser_id"], "unique_id": "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_report_date_day__pin_promotion_id__ad_group_id__campaign_id__advertiser_id.7ea04e6024", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "dbt_utils_unique_combination_o_b200b80456022485be650ebe0c64fc19.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_report_date_day__pin_promotion_id__ad_group_id__campaign_id__advertiser_id", "alias": "dbt_utils_unique_combination_o_b200b80456022485be650ebe0c64fc19", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/dbt_utils_unique_combination_o_b200b80456022485be650ebe0c64fc19.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b200b80456022485be650ebe0c64fc19"}, "created_at": 1660323535.6357021, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, pin_promotion_id, ad_group_id, campaign_id, advertiser_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__pin_promotion_report`\n    group by date_day, pin_promotion_id, ad_group_id, campaign_id, advertiser_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pinterest_ads__pin_promotion_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_report_date_day.80e8904c4c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__ad_group_report_date_day"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_report_date_day.80e8904c4c", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__ad_group_report_date_day.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__ad_group_report_date_day", "alias": "not_null_stg_pinterest_ads__ad_group_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__ad_group_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.642251, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_pinterest_ads__ad_group_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_report_ad_group_id.bb8cf3c471": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__ad_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__ad_group_report_ad_group_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_report_ad_group_id.bb8cf3c471", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__ad_group_report_ad_group_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__ad_group_report_ad_group_id", "alias": "not_null_stg_pinterest_ads__ad_group_report_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__ad_group_report_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.644763, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_report`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.stg_pinterest_ads__ad_group_report"}, "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_report_date_day__ad_group_id__campaign_id__advertiser_id.3800c02b0e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e8f9cd4890106f736fbaf772885876c8\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "ad_group_id", "campaign_id", "advertiser_id"], "model": "{{ get_where_subquery(ref('stg_pinterest_ads__ad_group_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e8f9cd4890106f736fbaf772885876c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_report_date_day__ad_group_id__campaign_id__advertiser_id"], "unique_id": "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_report_date_day__ad_group_id__campaign_id__advertiser_id.3800c02b0e", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "dbt_utils_unique_combination_o_e8f9cd4890106f736fbaf772885876c8.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_report_date_day__ad_group_id__campaign_id__advertiser_id", "alias": "dbt_utils_unique_combination_o_e8f9cd4890106f736fbaf772885876c8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/dbt_utils_unique_combination_o_e8f9cd4890106f736fbaf772885876c8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e8f9cd4890106f736fbaf772885876c8"}, "created_at": 1660323535.647382, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, ad_group_id, campaign_id, advertiser_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__ad_group_report`\n    group by date_day, ad_group_id, campaign_id, advertiser_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pinterest_ads__ad_group_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_history_advertiser_id.7d24f665fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "advertiser_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__advertiser_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__advertiser_history_advertiser_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_history_advertiser_id.7d24f665fb", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__advertiser_history_advertiser_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__advertiser_history_advertiser_id", "alias": "not_null_stg_pinterest_ads__advertiser_history_advertiser_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__advertiser_history_advertiser_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.652907, "compiled_sql": "\n    \n    \n\n\n\nselect advertiser_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history`\nwhere advertiser_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "advertiser_id", "file_key_name": "models.stg_pinterest_ads__advertiser_history"}, "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_history_updated_at__advertiser_id.94e8f4de4b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ac571a135eb9bbe6db1401c33b830733\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["updated_at", "advertiser_id"], "model": "{{ get_where_subquery(ref('stg_pinterest_ads__advertiser_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ac571a135eb9bbe6db1401c33b830733", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_history_updated_at__advertiser_id"], "unique_id": "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_history_updated_at__advertiser_id.94e8f4de4b", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "dbt_utils_unique_combination_o_ac571a135eb9bbe6db1401c33b830733.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_history_updated_at__advertiser_id", "alias": "dbt_utils_unique_combination_o_ac571a135eb9bbe6db1401c33b830733", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/dbt_utils_unique_combination_o_ac571a135eb9bbe6db1401c33b830733.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ac571a135eb9bbe6db1401c33b830733"}, "created_at": 1660323535.654902, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        updated_at, advertiser_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_history`\n    group by updated_at, advertiser_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pinterest_ads__advertiser_history"}, "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_report_date_day.153bd03c95": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__advertiser_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__advertiser_report_date_day"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_report_date_day.153bd03c95", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__advertiser_report_date_day.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__advertiser_report_date_day", "alias": "not_null_stg_pinterest_ads__advertiser_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__advertiser_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.660588, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_pinterest_ads__advertiser_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_report_advertiser_id.1b16ed73ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "advertiser_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__advertiser_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__advertiser_report_advertiser_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_report_advertiser_id.1b16ed73ff", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__advertiser_report_advertiser_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__advertiser_report_advertiser_id", "alias": "not_null_stg_pinterest_ads__advertiser_report_advertiser_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__advertiser_report_advertiser_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.662571, "compiled_sql": "\n    \n    \n\n\n\nselect advertiser_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_report`\nwhere advertiser_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "advertiser_id", "file_key_name": "models.stg_pinterest_ads__advertiser_report"}, "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_report_date_day__advertiser_id.e92ce8a9c0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7440d10d36ca9b555b1bb533d442c6de\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "advertiser_id"], "model": "{{ get_where_subquery(ref('stg_pinterest_ads__advertiser_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7440d10d36ca9b555b1bb533d442c6de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_report_date_day__advertiser_id"], "unique_id": "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_report_date_day__advertiser_id.e92ce8a9c0", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "dbt_utils_unique_combination_o_7440d10d36ca9b555b1bb533d442c6de.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_report_date_day__advertiser_id", "alias": "dbt_utils_unique_combination_o_7440d10d36ca9b555b1bb533d442c6de", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/dbt_utils_unique_combination_o_7440d10d36ca9b555b1bb533d442c6de.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7440d10d36ca9b555b1bb533d442c6de"}, "created_at": 1660323535.664804, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, advertiser_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__advertiser_report`\n    group by date_day, advertiser_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pinterest_ads__advertiser_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__campaign_report_date_day.7ef5fb1238": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__campaign_report_date_day"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__campaign_report_date_day.7ef5fb1238", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__campaign_report_date_day.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__campaign_report_date_day", "alias": "not_null_stg_pinterest_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__campaign_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.6695838, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_pinterest_ads__campaign_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__campaign_report_campaign_id.a287eba0fc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__campaign_report_campaign_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__campaign_report_campaign_id.a287eba0fc", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__campaign_report_campaign_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__campaign_report_campaign_id", "alias": "not_null_stg_pinterest_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__campaign_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.671783, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_pinterest_ads__campaign_report"}, "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_report_date_day__campaign_id__advertiser_id.ff47cb8abc": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ea5276bb765474198ad51f22f75fccbf\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "campaign_id", "advertiser_id"], "model": "{{ get_where_subquery(ref('stg_pinterest_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ea5276bb765474198ad51f22f75fccbf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_report_date_day__campaign_id__advertiser_id"], "unique_id": "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_report_date_day__campaign_id__advertiser_id.ff47cb8abc", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "dbt_utils_unique_combination_o_ea5276bb765474198ad51f22f75fccbf.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_report_date_day__campaign_id__advertiser_id", "alias": "dbt_utils_unique_combination_o_ea5276bb765474198ad51f22f75fccbf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/dbt_utils_unique_combination_o_ea5276bb765474198ad51f22f75fccbf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ea5276bb765474198ad51f22f75fccbf"}, "created_at": 1660323535.6739001, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, campaign_id, advertiser_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__campaign_report`\n    group by date_day, campaign_id, advertiser_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pinterest_ads__campaign_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__keyword_history_keyword_id.246889377a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__keyword_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__keyword_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__keyword_history_keyword_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__keyword_history_keyword_id.246889377a", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__keyword_history_keyword_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__keyword_history_keyword_id", "alias": "not_null_stg_pinterest_ads__keyword_history_keyword_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__keyword_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__keyword_history_keyword_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.67961, "compiled_sql": "\n    \n    \n\n\n\nselect keyword_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_history`\nwhere keyword_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword_id", "file_key_name": "models.stg_pinterest_ads__keyword_history"}, "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_history_keyword_id__ad_group_id___fivetran_synced.d122faa877": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ed0c009a9ff1bbb46e1ea2a210b25628\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["keyword_id", "ad_group_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_pinterest_ads__keyword_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__keyword_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ed0c009a9ff1bbb46e1ea2a210b25628", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_history_keyword_id__ad_group_id___fivetran_synced"], "unique_id": "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_history_keyword_id__ad_group_id___fivetran_synced.d122faa877", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "dbt_utils_unique_combination_o_ed0c009a9ff1bbb46e1ea2a210b25628.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_history_keyword_id__ad_group_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_ed0c009a9ff1bbb46e1ea2a210b25628", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__keyword_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/dbt_utils_unique_combination_o_ed0c009a9ff1bbb46e1ea2a210b25628.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ed0c009a9ff1bbb46e1ea2a210b25628"}, "created_at": 1660323535.681619, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        keyword_id, ad_group_id, _fivetran_synced\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_history`\n    group by keyword_id, ad_group_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pinterest_ads__keyword_history"}, "test.pinterest_source.not_null_stg_pinterest_ads__keyword_report_date_day.9937216300": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__keyword_report_date_day"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__keyword_report_date_day.9937216300", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__keyword_report_date_day.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__keyword_report_date_day", "alias": "not_null_stg_pinterest_ads__keyword_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__keyword_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.6867788, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_pinterest_ads__keyword_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__keyword_report_keyword_id.5f00679c48": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__keyword_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__keyword_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__keyword_report_keyword_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__keyword_report_keyword_id.5f00679c48", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__keyword_report_keyword_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__keyword_report_keyword_id", "alias": "not_null_stg_pinterest_ads__keyword_report_keyword_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__keyword_report_keyword_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.688958, "compiled_sql": "\n    \n    \n\n\n\nselect keyword_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_report`\nwhere keyword_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword_id", "file_key_name": "models.stg_pinterest_ads__keyword_report"}, "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_report_date_day__keyword_id__ad_group_id__campaign_id__advertiser_id.3ac101cc13": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9e2909bcbf42ab2426c3540a2e7a0bb7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "keyword_id", "ad_group_id", "campaign_id", "advertiser_id"], "model": "{{ get_where_subquery(ref('stg_pinterest_ads__keyword_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__keyword_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9e2909bcbf42ab2426c3540a2e7a0bb7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_report_date_day__keyword_id__ad_group_id__campaign_id__advertiser_id"], "unique_id": "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_report_date_day__keyword_id__ad_group_id__campaign_id__advertiser_id.3ac101cc13", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "dbt_utils_unique_combination_o_9e2909bcbf42ab2426c3540a2e7a0bb7.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_report_date_day__keyword_id__ad_group_id__campaign_id__advertiser_id", "alias": "dbt_utils_unique_combination_o_9e2909bcbf42ab2426c3540a2e7a0bb7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/dbt_utils_unique_combination_o_9e2909bcbf42ab2426c3540a2e7a0bb7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9e2909bcbf42ab2426c3540a2e7a0bb7"}, "created_at": 1660323535.6912751, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, keyword_id, ad_group_id, campaign_id, advertiser_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_pinterest_source`.`stg_pinterest_ads__keyword_report`\n    group by date_day, keyword_id, ad_group_id, campaign_id, advertiser_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pinterest_ads__keyword_report"}, "test.tiktok_ads_source.unique_stg_tiktok_ads__advertiser_advertiser_id.078391ba66": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "advertiser_id", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__advertiser')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__advertiser"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "unique_stg_tiktok_ads__advertiser_advertiser_id"], "unique_id": "test.tiktok_ads_source.unique_stg_tiktok_ads__advertiser_advertiser_id.078391ba66", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "unique_stg_tiktok_ads__advertiser_advertiser_id.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "unique_stg_tiktok_ads__advertiser_advertiser_id", "alias": "unique_stg_tiktok_ads__advertiser_advertiser_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__advertiser"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/unique_stg_tiktok_ads__advertiser_advertiser_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.896105, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n\n  select advertiser_id as unique_field\n  from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__advertiser`\n  where advertiser_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "advertiser_id", "file_key_name": "models.stg_tiktok_ads__advertiser"}, "test.tiktok_ads_source.not_null_stg_tiktok_ads__advertiser_advertiser_id.5deab92def": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "advertiser_id", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__advertiser')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__advertiser"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "not_null_stg_tiktok_ads__advertiser_advertiser_id"], "unique_id": "test.tiktok_ads_source.not_null_stg_tiktok_ads__advertiser_advertiser_id.5deab92def", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "not_null_stg_tiktok_ads__advertiser_advertiser_id.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "not_null_stg_tiktok_ads__advertiser_advertiser_id", "alias": "not_null_stg_tiktok_ads__advertiser_advertiser_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__advertiser"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/not_null_stg_tiktok_ads__advertiser_advertiser_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.898313, "compiled_sql": "\n    \n    \n\n\n\nselect advertiser_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__advertiser`\nwhere advertiser_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "advertiser_id", "file_key_name": "models.stg_tiktok_ads__advertiser"}, "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_history_ad_group_id.04778d7fad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__ad_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "not_null_stg_tiktok_ads__ad_group_history_ad_group_id"], "unique_id": "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_history_ad_group_id.04778d7fad", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "not_null_stg_tiktok_ads__ad_group_history_ad_group_id.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "not_null_stg_tiktok_ads__ad_group_history_ad_group_id", "alias": "not_null_stg_tiktok_ads__ad_group_history_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/not_null_stg_tiktok_ads__ad_group_history_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.9003892, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_history`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.stg_tiktok_ads__ad_group_history"}, "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_history_ad_group_id__updated_at.cec78c01de": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_353c130a41ba5d6aab13dbda36b226c8\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_tiktok_ads__ad_group_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_353c130a41ba5d6aab13dbda36b226c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_history_ad_group_id__updated_at"], "unique_id": "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_history_ad_group_id__updated_at.cec78c01de", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "dbt_utils_unique_combination_o_353c130a41ba5d6aab13dbda36b226c8.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_history_ad_group_id__updated_at", "alias": "dbt_utils_unique_combination_o_353c130a41ba5d6aab13dbda36b226c8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__ad_group_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/dbt_utils_unique_combination_o_353c130a41ba5d6aab13dbda36b226c8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_353c130a41ba5d6aab13dbda36b226c8"}, "created_at": 1660323535.90238, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_history`\n    group by ad_group_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_tiktok_ads__ad_group_history"}, "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_history_ad_id.4ffd05b23a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "not_null_stg_tiktok_ads__ad_history_ad_id"], "unique_id": "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_history_ad_id.4ffd05b23a", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "not_null_stg_tiktok_ads__ad_history_ad_id.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "not_null_stg_tiktok_ads__ad_history_ad_id", "alias": "not_null_stg_tiktok_ads__ad_history_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/not_null_stg_tiktok_ads__ad_history_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.9086678, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_history`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_tiktok_ads__ad_history"}, "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_history_ad_id__updated_at.66b86b4dd1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fe2e43690b07f6a6cbd499af54b7738f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_tiktok_ads__ad_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fe2e43690b07f6a6cbd499af54b7738f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_history_ad_id__updated_at"], "unique_id": "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_history_ad_id__updated_at.66b86b4dd1", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "dbt_utils_unique_combination_o_fe2e43690b07f6a6cbd499af54b7738f.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_history_ad_id__updated_at", "alias": "dbt_utils_unique_combination_o_fe2e43690b07f6a6cbd499af54b7738f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/dbt_utils_unique_combination_o_fe2e43690b07f6a6cbd499af54b7738f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fe2e43690b07f6a6cbd499af54b7738f"}, "created_at": 1660323535.9108531, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_history`\n    group by ad_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_tiktok_ads__ad_history"}, "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_history_campaign_id.7f9147d1e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "not_null_stg_tiktok_ads__campaign_history_campaign_id"], "unique_id": "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_history_campaign_id.7f9147d1e1", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "not_null_stg_tiktok_ads__campaign_history_campaign_id.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "not_null_stg_tiktok_ads__campaign_history_campaign_id", "alias": "not_null_stg_tiktok_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/not_null_stg_tiktok_ads__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.9167109, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_tiktok_ads__campaign_history"}, "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_history_campaign_id__updated_at.72bf07011b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_843ebfc08785d00a296625f469aa2000\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_tiktok_ads__campaign_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_843ebfc08785d00a296625f469aa2000", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_history_campaign_id__updated_at"], "unique_id": "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_history_campaign_id__updated_at.72bf07011b", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "dbt_utils_unique_combination_o_843ebfc08785d00a296625f469aa2000.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_history_campaign_id__updated_at", "alias": "dbt_utils_unique_combination_o_843ebfc08785d00a296625f469aa2000", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/dbt_utils_unique_combination_o_843ebfc08785d00a296625f469aa2000.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_843ebfc08785d00a296625f469aa2000"}, "created_at": 1660323535.918685, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_history`\n    group by campaign_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_tiktok_ads__campaign_history"}, "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_report_hourly_ad_id.ee84d783ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__ad_report_hourly')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "not_null_stg_tiktok_ads__ad_report_hourly_ad_id"], "unique_id": "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_report_hourly_ad_id.ee84d783ed", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "not_null_stg_tiktok_ads__ad_report_hourly_ad_id.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "not_null_stg_tiktok_ads__ad_report_hourly_ad_id", "alias": "not_null_stg_tiktok_ads__ad_report_hourly_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__ad_report_hourly"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/not_null_stg_tiktok_ads__ad_report_hourly_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.923576, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_report_hourly`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_tiktok_ads__ad_report_hourly"}, "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_report_hourly_stat_time_hour.9e2a2dca81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stat_time_hour", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__ad_report_hourly')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "not_null_stg_tiktok_ads__ad_report_hourly_stat_time_hour"], "unique_id": "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_report_hourly_stat_time_hour.9e2a2dca81", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "not_null_stg_tiktok_ads__ad_report_hourly_stat_time_hour.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "not_null_stg_tiktok_ads__ad_report_hourly_stat_time_hour", "alias": "not_null_stg_tiktok_ads__ad_report_hourly_stat_time_hour", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__ad_report_hourly"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/not_null_stg_tiktok_ads__ad_report_hourly_stat_time_hour.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.926906, "compiled_sql": "\n    \n    \n\n\n\nselect stat_time_hour\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_report_hourly`\nwhere stat_time_hour is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stat_time_hour", "file_key_name": "models.stg_tiktok_ads__ad_report_hourly"}, "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_report_hourly_ad_id__stat_time_hour.e70f8cef6d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e6913172297a173fb855f92cf72b08dc\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "stat_time_hour"], "model": "{{ get_where_subquery(ref('stg_tiktok_ads__ad_report_hourly')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e6913172297a173fb855f92cf72b08dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_report_hourly_ad_id__stat_time_hour"], "unique_id": "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_report_hourly_ad_id__stat_time_hour.e70f8cef6d", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "dbt_utils_unique_combination_o_e6913172297a173fb855f92cf72b08dc.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_report_hourly_ad_id__stat_time_hour", "alias": "dbt_utils_unique_combination_o_e6913172297a173fb855f92cf72b08dc", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__ad_report_hourly"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/dbt_utils_unique_combination_o_e6913172297a173fb855f92cf72b08dc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e6913172297a173fb855f92cf72b08dc"}, "created_at": 1660323535.929745, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, stat_time_hour\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_report_hourly`\n    group by ad_id, stat_time_hour\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_tiktok_ads__ad_report_hourly"}, "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_report_hourly_ad_group_id.8da17119f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__ad_group_report_hourly')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "not_null_stg_tiktok_ads__ad_group_report_hourly_ad_group_id"], "unique_id": "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_report_hourly_ad_group_id.8da17119f1", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "not_null_stg_tiktok_ads__ad_group_report_hourly_ad_group_id.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "not_null_stg_tiktok_ads__ad_group_report_hourly_ad_group_id", "alias": "not_null_stg_tiktok_ads__ad_group_report_hourly_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__ad_group_report_hourly"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/not_null_stg_tiktok_ads__ad_group_report_hourly_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.934737, "compiled_sql": "\n    \n    \n\n\n\nselect ad_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_report_hourly`\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.stg_tiktok_ads__ad_group_report_hourly"}, "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_report_hourly_stat_time_hour.ca4b495127": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stat_time_hour", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__ad_group_report_hourly')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "not_null_stg_tiktok_ads__ad_group_report_hourly_stat_time_hour"], "unique_id": "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_report_hourly_stat_time_hour.ca4b495127", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "not_null_stg_tiktok_ads__ad_group_report_hourly_stat_time_hour.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "not_null_stg_tiktok_ads__ad_group_report_hourly_stat_time_hour", "alias": "not_null_stg_tiktok_ads__ad_group_report_hourly_stat_time_hour", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__ad_group_report_hourly"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/not_null_stg_tiktok_ads__ad_group_report_hourly_stat_time_hour.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.937092, "compiled_sql": "\n    \n    \n\n\n\nselect stat_time_hour\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_report_hourly`\nwhere stat_time_hour is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stat_time_hour", "file_key_name": "models.stg_tiktok_ads__ad_group_report_hourly"}, "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_report_hourly_ad_group_id__stat_time_hour.1aeaeb71ad": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b8146651452c0bd776f5ad7184463e60\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_group_id", "stat_time_hour"], "model": "{{ get_where_subquery(ref('stg_tiktok_ads__ad_group_report_hourly')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b8146651452c0bd776f5ad7184463e60", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_report_hourly_ad_group_id__stat_time_hour"], "unique_id": "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_report_hourly_ad_group_id__stat_time_hour.1aeaeb71ad", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "dbt_utils_unique_combination_o_b8146651452c0bd776f5ad7184463e60.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_report_hourly_ad_group_id__stat_time_hour", "alias": "dbt_utils_unique_combination_o_b8146651452c0bd776f5ad7184463e60", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__ad_group_report_hourly"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/dbt_utils_unique_combination_o_b8146651452c0bd776f5ad7184463e60.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b8146651452c0bd776f5ad7184463e60"}, "created_at": 1660323535.939463, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_group_id, stat_time_hour\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__ad_group_report_hourly`\n    group by ad_group_id, stat_time_hour\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_tiktok_ads__ad_group_report_hourly"}, "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_report_hourly_campaign_id.ef898379fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__campaign_report_hourly')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "not_null_stg_tiktok_ads__campaign_report_hourly_campaign_id"], "unique_id": "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_report_hourly_campaign_id.ef898379fb", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "not_null_stg_tiktok_ads__campaign_report_hourly_campaign_id.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "not_null_stg_tiktok_ads__campaign_report_hourly_campaign_id", "alias": "not_null_stg_tiktok_ads__campaign_report_hourly_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__campaign_report_hourly"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/not_null_stg_tiktok_ads__campaign_report_hourly_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.945099, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_report_hourly`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_tiktok_ads__campaign_report_hourly"}, "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_report_hourly_stat_time_hour.e75e13184c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stat_time_hour", "model": "{{ get_where_subquery(ref('stg_tiktok_ads__campaign_report_hourly')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "not_null_stg_tiktok_ads__campaign_report_hourly_stat_time_hour"], "unique_id": "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_report_hourly_stat_time_hour.e75e13184c", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "not_null_stg_tiktok_ads__campaign_report_hourly_stat_time_hour.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "not_null_stg_tiktok_ads__campaign_report_hourly_stat_time_hour", "alias": "not_null_stg_tiktok_ads__campaign_report_hourly_stat_time_hour", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__campaign_report_hourly"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/not_null_stg_tiktok_ads__campaign_report_hourly_stat_time_hour.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.947053, "compiled_sql": "\n    \n    \n\n\n\nselect stat_time_hour\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_report_hourly`\nwhere stat_time_hour is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stat_time_hour", "file_key_name": "models.stg_tiktok_ads__campaign_report_hourly"}, "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_report_hourly_campaign_id__stat_time_hour.8e4a1e4b34": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_28d20c1f14a23926a21e229d68eb6b16\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "stat_time_hour"], "model": "{{ get_where_subquery(ref('stg_tiktok_ads__campaign_report_hourly')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_28d20c1f14a23926a21e229d68eb6b16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["tiktok_ads_source", "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_report_hourly_campaign_id__stat_time_hour"], "unique_id": "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_report_hourly_campaign_id__stat_time_hour.8e4a1e4b34", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "dbt_utils_unique_combination_o_28d20c1f14a23926a21e229d68eb6b16.sql", "original_file_path": "models/stg_tiktok_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_report_hourly_campaign_id__stat_time_hour", "alias": "dbt_utils_unique_combination_o_28d20c1f14a23926a21e229d68eb6b16", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_ads__campaign_report_hourly"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tiktok_ads_source/models/stg_tiktok_ads.yml/dbt_utils_unique_combination_o_28d20c1f14a23926a21e229d68eb6b16.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_28d20c1f14a23926a21e229d68eb6b16"}, "created_at": 1660323535.950015, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, stat_time_hour\n    from `dbt-package-testing`.`ad_reporting_integration_tests_stg_tiktok_ads`.`stg_tiktok_ads__campaign_report_hourly`\n    group by campaign_id, stat_time_hour\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_tiktok_ads__campaign_report_hourly"}, "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__account_history_account_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__account_history_account_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__account_history_account_id", "alias": "not_null_stg_facebook_ads__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__account_history_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.990391, "compiled_sql": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_facebook_ads__account_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__account_history__fivetran_synced.0570e35e1f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_synced", "model": "{{ get_where_subquery(ref('stg_facebook_ads__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__account_history__fivetran_synced"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__account_history__fivetran_synced.0570e35e1f", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__account_history__fivetran_synced.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__account_history__fivetran_synced", "alias": "not_null_stg_facebook_ads__account_history__fivetran_synced", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__account_history__fivetran_synced.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323535.9935622, "compiled_sql": "\n    \n    \n\n\n\nselect _fivetran_synced\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history`\nwhere _fivetran_synced is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_synced", "file_key_name": "models.stg_facebook_ads__account_history"}, "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__account_history_account_id___fivetran_synced.f9b4d28fa2": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6c9521eb7e9747df57d9737e83cb864f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__account_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6c9521eb7e9747df57d9737e83cb864f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__account_history_account_id___fivetran_synced"], "unique_id": "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__account_history_account_id___fivetran_synced.f9b4d28fa2", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "dbt_utils_unique_combination_o_6c9521eb7e9747df57d9737e83cb864f.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__account_history_account_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_6c9521eb7e9747df57d9737e83cb864f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/dbt_utils_unique_combination_o_6c9521eb7e9747df57d9737e83cb864f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6c9521eb7e9747df57d9737e83cb864f"}, "created_at": 1660323535.996063, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, _fivetran_synced\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__account_history`\n    group by account_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_ads__account_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__ad_history_ad_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__ad_history_ad_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__ad_history_ad_id", "alias": "not_null_stg_facebook_ads__ad_history_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__ad_history_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.0015948, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_history`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_facebook_ads__ad_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_updated_at.250a5a84e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('stg_facebook_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__ad_history_updated_at"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_updated_at.250a5a84e4", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__ad_history_updated_at.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__ad_history_updated_at", "alias": "not_null_stg_facebook_ads__ad_history_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__ad_history_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.003565, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_history`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.stg_facebook_ads__ad_history"}, "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_history_ad_id__updated_at.2922c18b58": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_da2a7458e53ca8b420768a0c3e8e2137\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__ad_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_da2a7458e53ca8b420768a0c3e8e2137", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_history_ad_id__updated_at"], "unique_id": "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_history_ad_id__updated_at.2922c18b58", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "dbt_utils_unique_combination_o_da2a7458e53ca8b420768a0c3e8e2137.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_history_ad_id__updated_at", "alias": "dbt_utils_unique_combination_o_da2a7458e53ca8b420768a0c3e8e2137", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/dbt_utils_unique_combination_o_da2a7458e53ca8b420768a0c3e8e2137.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_da2a7458e53ca8b420768a0c3e8e2137"}, "created_at": 1660323536.007257, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_history`\n    group by ad_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_ads__ad_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_set_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__ad_set_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__ad_set_history_ad_set_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__ad_set_history_ad_set_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__ad_set_history_ad_set_id", "alias": "not_null_stg_facebook_ads__ad_set_history_ad_set_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__ad_set_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__ad_set_history_ad_set_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.012885, "compiled_sql": "\n    \n    \n\n\n\nselect ad_set_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_set_history`\nwhere ad_set_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_set_id", "file_key_name": "models.stg_facebook_ads__ad_set_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_updated_at.ef7fafe0fa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('stg_facebook_ads__ad_set_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__ad_set_history_updated_at"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_updated_at.ef7fafe0fa", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__ad_set_history_updated_at.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__ad_set_history_updated_at", "alias": "not_null_stg_facebook_ads__ad_set_history_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__ad_set_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__ad_set_history_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.0148711, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_set_history`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.stg_facebook_ads__ad_set_history"}, "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_set_history_ad_set_id__updated_at.0a60ad0fef": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_214e0ea8c1d3eb6e1c1fae451c60969f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_set_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__ad_set_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_214e0ea8c1d3eb6e1c1fae451c60969f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_set_history_ad_set_id__updated_at"], "unique_id": "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_set_history_ad_set_id__updated_at.0a60ad0fef", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "dbt_utils_unique_combination_o_214e0ea8c1d3eb6e1c1fae451c60969f.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_set_history_ad_set_id__updated_at", "alias": "dbt_utils_unique_combination_o_214e0ea8c1d3eb6e1c1fae451c60969f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__ad_set_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/dbt_utils_unique_combination_o_214e0ea8c1d3eb6e1c1fae451c60969f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_214e0ea8c1d3eb6e1c1fae451c60969f"}, "created_at": 1660323536.017462, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_set_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__ad_set_history`\n    group by ad_set_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_ads__ad_set_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__campaign_history_campaign_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__campaign_history_campaign_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__campaign_history_campaign_id", "alias": "not_null_stg_facebook_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.022544, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_facebook_ads__campaign_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_updated_at.9e59f99270": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('stg_facebook_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__campaign_history_updated_at"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_updated_at.9e59f99270", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__campaign_history_updated_at.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__campaign_history_updated_at", "alias": "not_null_stg_facebook_ads__campaign_history_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__campaign_history_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.024999, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__campaign_history`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.stg_facebook_ads__campaign_history"}, "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__campaign_history_campaign_id__updated_at.7437b392c2": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6067330a8eb187d5024e9840cd7cbd78\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__campaign_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6067330a8eb187d5024e9840cd7cbd78", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__campaign_history_campaign_id__updated_at"], "unique_id": "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__campaign_history_campaign_id__updated_at.7437b392c2", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "dbt_utils_unique_combination_o_6067330a8eb187d5024e9840cd7cbd78.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__campaign_history_campaign_id__updated_at", "alias": "dbt_utils_unique_combination_o_6067330a8eb187d5024e9840cd7cbd78", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/dbt_utils_unique_combination_o_6067330a8eb187d5024e9840cd7cbd78.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6067330a8eb187d5024e9840cd7cbd78"}, "created_at": 1660323536.028835, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__campaign_history`\n    group by campaign_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_ads__campaign_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history__fivetran_synced.3b0593cb4f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_synced", "model": "{{ get_where_subquery(ref('stg_facebook_ads__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__creative_history__fivetran_synced"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history__fivetran_synced.3b0593cb4f", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__creative_history__fivetran_synced.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__creative_history__fivetran_synced", "alias": "not_null_stg_facebook_ads__creative_history__fivetran_synced", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__creative_history__fivetran_synced.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.035181, "compiled_sql": "\n    \n    \n\n\n\nselect _fivetran_synced\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__creative_history`\nwhere _fivetran_synced is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_synced", "file_key_name": "models.stg_facebook_ads__creative_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__creative_history_creative_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__creative_history_creative_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__creative_history_creative_id", "alias": "not_null_stg_facebook_ads__creative_history_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__creative_history_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.0373461, "compiled_sql": "\n    \n    \n\n\n\nselect creative_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__creative_history`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.stg_facebook_ads__creative_history"}, "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_creative_id___fivetran_synced.69ddc26562": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c52d893dfedd530a7cd19c495da30217\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["creative_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__creative_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c52d893dfedd530a7cd19c495da30217", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_creative_id___fivetran_synced"], "unique_id": "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_creative_id___fivetran_synced.69ddc26562", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "dbt_utils_unique_combination_o_c52d893dfedd530a7cd19c495da30217.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_creative_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_c52d893dfedd530a7cd19c495da30217", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/dbt_utils_unique_combination_o_c52d893dfedd530a7cd19c495da30217.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c52d893dfedd530a7cd19c495da30217"}, "created_at": 1660323536.0403898, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        creative_id, _fivetran_synced\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__creative_history`\n    group by creative_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_ads__creative_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__basic_ad_ad_id.2611b250fc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__basic_ad')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__basic_ad_ad_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__basic_ad_ad_id.2611b250fc", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__basic_ad_ad_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__basic_ad_ad_id", "alias": "not_null_stg_facebook_ads__basic_ad_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__basic_ad_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.046324, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_facebook_ads__basic_ad"}, "test.facebook_ads_source.not_null_stg_facebook_ads__basic_ad_account_id.d06f6d861b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__basic_ad')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__basic_ad_account_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__basic_ad_account_id.d06f6d861b", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__basic_ad_account_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__basic_ad_account_id", "alias": "not_null_stg_facebook_ads__basic_ad_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__basic_ad_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.048268, "compiled_sql": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_facebook_ads__basic_ad"}, "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__basic_ad_date_day__ad_id__account_id.bd909529e7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_42caf2b48bab7db5c316ae2524dd0683\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "ad_id", "account_id"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__basic_ad')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_42caf2b48bab7db5c316ae2524dd0683", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__basic_ad_date_day__ad_id__account_id"], "unique_id": "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__basic_ad_date_day__ad_id__account_id.bd909529e7", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "dbt_utils_unique_combination_o_42caf2b48bab7db5c316ae2524dd0683.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__basic_ad_date_day__ad_id__account_id", "alias": "dbt_utils_unique_combination_o_42caf2b48bab7db5c316ae2524dd0683", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/dbt_utils_unique_combination_o_42caf2b48bab7db5c316ae2524dd0683.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_42caf2b48bab7db5c316ae2524dd0683"}, "created_at": 1660323536.0517828, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, ad_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_facebook_ads_source`.`stg_facebook_ads__basic_ad`\n    group by date_day, ad_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_ads__basic_ad"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_account_history__fivetran_synced.2d5dd77824": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_synced", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__ad_account_history__fivetran_synced"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_account_history__fivetran_synced.2d5dd77824", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__ad_account_history__fivetran_synced.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__ad_account_history__fivetran_synced", "alias": "not_null_stg_snapchat_ads__ad_account_history__fivetran_synced", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__ad_account_history__fivetran_synced.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.25888, "compiled_sql": "\n    \n    \n\n\n\nselect _fivetran_synced\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history`\nwhere _fivetran_synced is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_synced", "file_key_name": "models.stg_snapchat_ads__ad_account_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_account_history_ad_account_id.426d71d605": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_account_id", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__ad_account_history_ad_account_id"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_account_history_ad_account_id.426d71d605", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__ad_account_history_ad_account_id.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__ad_account_history_ad_account_id", "alias": "not_null_stg_snapchat_ads__ad_account_history_ad_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__ad_account_history_ad_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.261467, "compiled_sql": "\n    \n    \n\n\n\nselect ad_account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history`\nwhere ad_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_account_id", "file_key_name": "models.stg_snapchat_ads__ad_account_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_account_history_ad_account_id___fivetran_synced.cd4fd6b0be": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3852df57bdc45c0c215b1863f3f9075d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_account_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_account_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3852df57bdc45c0c215b1863f3f9075d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_account_history_ad_account_id___fivetran_synced"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_account_history_ad_account_id___fivetran_synced.cd4fd6b0be", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_3852df57bdc45c0c215b1863f3f9075d.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_account_history_ad_account_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_3852df57bdc45c0c215b1863f3f9075d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_3852df57bdc45c0c215b1863f3f9075d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3852df57bdc45c0c215b1863f3f9075d"}, "created_at": 1660323536.264174, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_account_id, _fivetran_synced\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_account_history`\n    group by ad_account_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat_ads__ad_account_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_history__fivetran_synced.1607c70fda": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_synced", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__ad_history__fivetran_synced"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_history__fivetran_synced.1607c70fda", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__ad_history__fivetran_synced.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__ad_history__fivetran_synced", "alias": "not_null_stg_snapchat_ads__ad_history__fivetran_synced", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__ad_history__fivetran_synced.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.2698932, "compiled_sql": "\n    \n    \n\n\n\nselect _fivetran_synced\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_history`\nwhere _fivetran_synced is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_synced", "file_key_name": "models.stg_snapchat_ads__ad_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_history_ad_id.e9d367fd15": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__ad_history_ad_id"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_history_ad_id.e9d367fd15", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__ad_history_ad_id.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__ad_history_ad_id", "alias": "not_null_stg_snapchat_ads__ad_history_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__ad_history_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.2725189, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_history`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_snapchat_ads__ad_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_history_ad_id___fivetran_synced.f84924f13b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f4293c0007c439c8e914dcbf1296b060\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f4293c0007c439c8e914dcbf1296b060", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_history_ad_id___fivetran_synced"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_history_ad_id___fivetran_synced.f84924f13b", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_f4293c0007c439c8e914dcbf1296b060.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_history_ad_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_f4293c0007c439c8e914dcbf1296b060", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_f4293c0007c439c8e914dcbf1296b060.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f4293c0007c439c8e914dcbf1296b060"}, "created_at": 1660323536.274994, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, _fivetran_synced\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_history`\n    group by ad_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat_ads__ad_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_hourly_report_ad_id.7e763de19d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_hourly_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__ad_hourly_report_ad_id"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_hourly_report_ad_id.7e763de19d", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__ad_hourly_report_ad_id.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__ad_hourly_report_ad_id", "alias": "not_null_stg_snapchat_ads__ad_hourly_report_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_hourly_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__ad_hourly_report_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.280771, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_hourly_report`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_snapchat_ads__ad_hourly_report"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_hourly_report_date_hour.666cda1cd7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_hour", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_hourly_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__ad_hourly_report_date_hour"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_hourly_report_date_hour.666cda1cd7", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__ad_hourly_report_date_hour.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__ad_hourly_report_date_hour", "alias": "not_null_stg_snapchat_ads__ad_hourly_report_date_hour", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_hourly_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__ad_hourly_report_date_hour.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.2828412, "compiled_sql": "\n    \n    \n\n\n\nselect date_hour\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_hourly_report`\nwhere date_hour is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_hour", "file_key_name": "models.stg_snapchat_ads__ad_hourly_report"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_hourly_report_ad_id__date_hour.1a4ef6182a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_51be039d7f287e51c6f47e98ae48f8ea\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "date_hour"], "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_hourly_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_51be039d7f287e51c6f47e98ae48f8ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_hourly_report_ad_id__date_hour"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_hourly_report_ad_id__date_hour.1a4ef6182a", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_51be039d7f287e51c6f47e98ae48f8ea.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_hourly_report_ad_id__date_hour", "alias": "dbt_utils_unique_combination_o_51be039d7f287e51c6f47e98ae48f8ea", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_hourly_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_51be039d7f287e51c6f47e98ae48f8ea.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_51be039d7f287e51c6f47e98ae48f8ea"}, "created_at": 1660323536.285755, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, date_hour\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_hourly_report`\n    group by ad_id, date_hour\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat_ads__ad_hourly_report"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_history__fivetran_synced.7ed7d105ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_synced", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_squad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__ad_squad_history__fivetran_synced"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_history__fivetran_synced.7ed7d105ae", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__ad_squad_history__fivetran_synced.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__ad_squad_history__fivetran_synced", "alias": "not_null_stg_snapchat_ads__ad_squad_history__fivetran_synced", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_squad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__ad_squad_history__fivetran_synced.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.290786, "compiled_sql": "\n    \n    \n\n\n\nselect _fivetran_synced\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_history`\nwhere _fivetran_synced is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_synced", "file_key_name": "models.stg_snapchat_ads__ad_squad_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_history_ad_squad_id.71c7122278": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_squad_id", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_squad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__ad_squad_history_ad_squad_id"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_history_ad_squad_id.71c7122278", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__ad_squad_history_ad_squad_id.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__ad_squad_history_ad_squad_id", "alias": "not_null_stg_snapchat_ads__ad_squad_history_ad_squad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_squad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__ad_squad_history_ad_squad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.293303, "compiled_sql": "\n    \n    \n\n\n\nselect ad_squad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_history`\nwhere ad_squad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_squad_id", "file_key_name": "models.stg_snapchat_ads__ad_squad_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_history_ad_squad_id___fivetran_synced.200b225a27": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e1915f47a6425292156cafe7be652128\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_squad_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_squad_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e1915f47a6425292156cafe7be652128", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_history_ad_squad_id___fivetran_synced"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_history_ad_squad_id___fivetran_synced.200b225a27", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_e1915f47a6425292156cafe7be652128.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_history_ad_squad_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_e1915f47a6425292156cafe7be652128", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_squad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_e1915f47a6425292156cafe7be652128.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e1915f47a6425292156cafe7be652128"}, "created_at": 1660323536.295598, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_squad_id, _fivetran_synced\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_history`\n    group by ad_squad_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat_ads__ad_squad_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id.ab16aa72c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_squad_id", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_squad_hourly_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id.ab16aa72c9", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id", "alias": "not_null_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_squad_hourly_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.3013818, "compiled_sql": "\n    \n    \n\n\n\nselect ad_squad_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_hourly_report`\nwhere ad_squad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_squad_id", "file_key_name": "models.stg_snapchat_ads__ad_squad_hourly_report"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_hourly_report_date_hour.6f0b63a9cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_hour", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_squad_hourly_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__ad_squad_hourly_report_date_hour"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_hourly_report_date_hour.6f0b63a9cb", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__ad_squad_hourly_report_date_hour.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__ad_squad_hourly_report_date_hour", "alias": "not_null_stg_snapchat_ads__ad_squad_hourly_report_date_hour", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_squad_hourly_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__ad_squad_hourly_report_date_hour.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.303473, "compiled_sql": "\n    \n    \n\n\n\nselect date_hour\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_hourly_report`\nwhere date_hour is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_hour", "file_key_name": "models.stg_snapchat_ads__ad_squad_hourly_report"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id__date_hour.774a407e69": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f511cc57cc2f37ea815924cccff18bc3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_squad_id", "date_hour"], "model": "{{ get_where_subquery(ref('stg_snapchat_ads__ad_squad_hourly_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f511cc57cc2f37ea815924cccff18bc3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id__date_hour"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id__date_hour.774a407e69", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_f511cc57cc2f37ea815924cccff18bc3.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id__date_hour", "alias": "dbt_utils_unique_combination_o_f511cc57cc2f37ea815924cccff18bc3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__ad_squad_hourly_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_f511cc57cc2f37ea815924cccff18bc3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f511cc57cc2f37ea815924cccff18bc3"}, "created_at": 1660323536.305814, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_squad_id, date_hour\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__ad_squad_hourly_report`\n    group by ad_squad_id, date_hour\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat_ads__ad_squad_hourly_report"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_history__fivetran_synced.55bc48b3ec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_synced", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__campaign_history__fivetran_synced"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_history__fivetran_synced.55bc48b3ec", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__campaign_history__fivetran_synced.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__campaign_history__fivetran_synced", "alias": "not_null_stg_snapchat_ads__campaign_history__fivetran_synced", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__campaign_history__fivetran_synced.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.3109992, "compiled_sql": "\n    \n    \n\n\n\nselect _fivetran_synced\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_history`\nwhere _fivetran_synced is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_synced", "file_key_name": "models.stg_snapchat_ads__campaign_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_history_campaign_id.f74a0fb8c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__campaign_history_campaign_id"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_history_campaign_id.f74a0fb8c0", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__campaign_history_campaign_id.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__campaign_history_campaign_id", "alias": "not_null_stg_snapchat_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.313345, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_snapchat_ads__campaign_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_history_campaign_id___fivetran_synced.31b9fb6777": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_57987eae5ec7cafd860959dc1cd2003b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_snapchat_ads__campaign_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_57987eae5ec7cafd860959dc1cd2003b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_history_campaign_id___fivetran_synced"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_history_campaign_id___fivetran_synced.31b9fb6777", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_57987eae5ec7cafd860959dc1cd2003b.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_history_campaign_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_57987eae5ec7cafd860959dc1cd2003b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_57987eae5ec7cafd860959dc1cd2003b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_57987eae5ec7cafd860959dc1cd2003b"}, "created_at": 1660323536.3154402, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, _fivetran_synced\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_history`\n    group by campaign_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat_ads__campaign_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_hourly_report_campaign_id.f255c38a3e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__campaign_hourly_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__campaign_hourly_report_campaign_id"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_hourly_report_campaign_id.f255c38a3e", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__campaign_hourly_report_campaign_id.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__campaign_hourly_report_campaign_id", "alias": "not_null_stg_snapchat_ads__campaign_hourly_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__campaign_hourly_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__campaign_hourly_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.320692, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_hourly_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_snapchat_ads__campaign_hourly_report"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_hourly_report_date_hour.0bc4218ac8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_hour", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__campaign_hourly_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__campaign_hourly_report_date_hour"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_hourly_report_date_hour.0bc4218ac8", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__campaign_hourly_report_date_hour.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__campaign_hourly_report_date_hour", "alias": "not_null_stg_snapchat_ads__campaign_hourly_report_date_hour", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__campaign_hourly_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__campaign_hourly_report_date_hour.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.322767, "compiled_sql": "\n    \n    \n\n\n\nselect date_hour\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_hourly_report`\nwhere date_hour is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_hour", "file_key_name": "models.stg_snapchat_ads__campaign_hourly_report"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_hourly_report_campaign_id__date_hour.64293afa9c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0cd5a718b668452c6086029c1d653cd2\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "date_hour"], "model": "{{ get_where_subquery(ref('stg_snapchat_ads__campaign_hourly_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0cd5a718b668452c6086029c1d653cd2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_hourly_report_campaign_id__date_hour"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_hourly_report_campaign_id__date_hour.64293afa9c", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_0cd5a718b668452c6086029c1d653cd2.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_hourly_report_campaign_id__date_hour", "alias": "dbt_utils_unique_combination_o_0cd5a718b668452c6086029c1d653cd2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__campaign_hourly_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_0cd5a718b668452c6086029c1d653cd2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0cd5a718b668452c6086029c1d653cd2"}, "created_at": 1660323536.325269, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, date_hour\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__campaign_hourly_report`\n    group by campaign_id, date_hour\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat_ads__campaign_hourly_report"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_history__fivetran_synced.b9c95b4380": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_synced", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__creative_history__fivetran_synced"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_history__fivetran_synced.b9c95b4380", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__creative_history__fivetran_synced.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__creative_history__fivetran_synced", "alias": "not_null_stg_snapchat_ads__creative_history__fivetran_synced", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__creative_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__creative_history__fivetran_synced.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.330548, "compiled_sql": "\n    \n    \n\n\n\nselect _fivetran_synced\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history`\nwhere _fivetran_synced is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_synced", "file_key_name": "models.stg_snapchat_ads__creative_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_history_creative_id.09c83690f4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__creative_history_creative_id"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_history_creative_id.09c83690f4", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__creative_history_creative_id.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__creative_history_creative_id", "alias": "not_null_stg_snapchat_ads__creative_history_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__creative_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__creative_history_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.33276, "compiled_sql": "\n    \n    \n\n\n\nselect creative_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.stg_snapchat_ads__creative_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_history_creative_id___fivetran_synced.c6f6c78b99": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6b9615128ce9ee3b9b92bc0b5f9bc33d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["creative_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_snapchat_ads__creative_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6b9615128ce9ee3b9b92bc0b5f9bc33d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_history_creative_id___fivetran_synced"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_history_creative_id___fivetran_synced.c6f6c78b99", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_6b9615128ce9ee3b9b92bc0b5f9bc33d.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_history_creative_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_6b9615128ce9ee3b9b92bc0b5f9bc33d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__creative_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_6b9615128ce9ee3b9b92bc0b5f9bc33d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6b9615128ce9ee3b9b92bc0b5f9bc33d"}, "created_at": 1660323536.33498, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        creative_id, _fivetran_synced\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_history`\n    group by creative_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat_ads__creative_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_url_tag_history_creative_id.7ff6bb9c1b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__creative_url_tag_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__creative_url_tag_history_creative_id"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_url_tag_history_creative_id.7ff6bb9c1b", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__creative_url_tag_history_creative_id.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__creative_url_tag_history_creative_id", "alias": "not_null_stg_snapchat_ads__creative_url_tag_history_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__creative_url_tag_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__creative_url_tag_history_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.340238, "compiled_sql": "\n    \n    \n\n\n\nselect creative_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.stg_snapchat_ads__creative_url_tag_history"}, "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_url_tag_history_updated_at.894b86a924": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('stg_snapchat_ads__creative_url_tag_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "not_null_stg_snapchat_ads__creative_url_tag_history_updated_at"], "unique_id": "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_url_tag_history_updated_at.894b86a924", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "not_null_stg_snapchat_ads__creative_url_tag_history_updated_at.sql", "original_file_path": "models/stg_snapchat.yml", "name": "not_null_stg_snapchat_ads__creative_url_tag_history_updated_at", "alias": "not_null_stg_snapchat_ads__creative_url_tag_history_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__creative_url_tag_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/not_null_stg_snapchat_ads__creative_url_tag_history_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.343271, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.stg_snapchat_ads__creative_url_tag_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_url_tag_history_creative_id__param_key__updated_at.cc3fa6acbe": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bf5f1fe7986f7917e2a647b5f7b1f985\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["creative_id", "param_key", "updated_at"], "model": "{{ get_where_subquery(ref('stg_snapchat_ads__creative_url_tag_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bf5f1fe7986f7917e2a647b5f7b1f985", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_url_tag_history_creative_id__param_key__updated_at"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_url_tag_history_creative_id__param_key__updated_at.cc3fa6acbe", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_bf5f1fe7986f7917e2a647b5f7b1f985.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_url_tag_history_creative_id__param_key__updated_at", "alias": "dbt_utils_unique_combination_o_bf5f1fe7986f7917e2a647b5f7b1f985", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat_ads__creative_url_tag_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_bf5f1fe7986f7917e2a647b5f7b1f985.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bf5f1fe7986f7917e2a647b5f7b1f985"}, "created_at": 1660323536.345781, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        creative_id, param_key, updated_at\n    from `dbt-package-testing`.`ad_reporting_integration_tests_snapchat_ads_source`.`stg_snapchat_ads__creative_url_tag_history`\n    group by creative_id, param_key, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat_ads__creative_url_tag_history"}, "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__account_report_date_day__account_id__device_os__device_type__network__currency_code.2d5faac68f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9284db0a761f9f76982a86a301c98668\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "device_os", "device_type", "network", "currency_code"], "model": "{{ get_where_subquery(ref('microsoft_ads__account_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads.microsoft_ads__account_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9284db0a761f9f76982a86a301c98668", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads", "dbt_utils_unique_combination_of_columns_microsoft_ads__account_report_date_day__account_id__device_os__device_type__network__currency_code"], "unique_id": "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__account_report_date_day__account_id__device_os__device_type__network__currency_code.2d5faac68f", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "dbt_utils_unique_combination_o_9284db0a761f9f76982a86a301c98668.sql", "original_file_path": "models/microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_microsoft_ads__account_report_date_day__account_id__device_os__device_type__network__currency_code", "alias": "dbt_utils_unique_combination_o_9284db0a761f9f76982a86a301c98668", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["microsoft_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads.yml/dbt_utils_unique_combination_o_9284db0a761f9f76982a86a301c98668.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9284db0a761f9f76982a86a301c98668"}, "created_at": 1660323536.4002419, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, device_os, device_type, network, currency_code\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__account_report`\n    group by date_day, account_id, device_os, device_type, network, currency_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.microsoft_ads__account_report"}, "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__ad_group_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__currency_code.87353ef6b3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_40dfe26196c4c6b90b8b7492df4c01d6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_group_id", "device_os", "device_type", "network", "currency_code"], "model": "{{ get_where_subquery(ref('microsoft_ads__ad_group_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_group_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_40dfe26196c4c6b90b8b7492df4c01d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads", "dbt_utils_unique_combination_of_columns_microsoft_ads__ad_group_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__currency_code"], "unique_id": "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__ad_group_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__currency_code.87353ef6b3", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "dbt_utils_unique_combination_o_40dfe26196c4c6b90b8b7492df4c01d6.sql", "original_file_path": "models/microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_microsoft_ads__ad_group_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__currency_code", "alias": "dbt_utils_unique_combination_o_40dfe26196c4c6b90b8b7492df4c01d6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["microsoft_ads__ad_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads.yml/dbt_utils_unique_combination_o_40dfe26196c4c6b90b8b7492df4c01d6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_40dfe26196c4c6b90b8b7492df4c01d6"}, "created_at": 1660323536.406328, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_group_id, device_os, device_type, network, currency_code\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__ad_group_report`\n    group by date_day, account_id, campaign_id, ad_group_id, device_os, device_type, network, currency_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.microsoft_ads__ad_group_report"}, "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__ad_report_date_day__account_id__campaign_id__ad_group_id__ad_id__ad_type__device_os__device_type__network__currency_code.4b91f31686": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_77fd1448acda33bd9d2c0555648d2822\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_group_id", "ad_id", "ad_type", "device_os", "device_type", "network", "currency_code"], "model": "{{ get_where_subquery(ref('microsoft_ads__ad_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_77fd1448acda33bd9d2c0555648d2822", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads", "dbt_utils_unique_combination_of_columns_microsoft_ads__ad_report_date_day__account_id__campaign_id__ad_group_id__ad_id__ad_type__device_os__device_type__network__currency_code"], "unique_id": "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__ad_report_date_day__account_id__campaign_id__ad_group_id__ad_id__ad_type__device_os__device_type__network__currency_code.4b91f31686", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "dbt_utils_unique_combination_o_77fd1448acda33bd9d2c0555648d2822.sql", "original_file_path": "models/microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_microsoft_ads__ad_report_date_day__account_id__campaign_id__ad_group_id__ad_id__ad_type__device_os__device_type__network__currency_code", "alias": "dbt_utils_unique_combination_o_77fd1448acda33bd9d2c0555648d2822", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["microsoft_ads__ad_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads.yml/dbt_utils_unique_combination_o_77fd1448acda33bd9d2c0555648d2822.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_77fd1448acda33bd9d2c0555648d2822"}, "created_at": 1660323536.4167712, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_group_id, ad_id, ad_type, device_os, device_type, network, currency_code\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__ad_report`\n    group by date_day, account_id, campaign_id, ad_group_id, ad_id, ad_type, device_os, device_type, network, currency_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.microsoft_ads__ad_report"}, "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__campaign_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code.d7e35aaa9b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_90115110f76cc54bfcc637b8965bda7a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "device_os", "device_type", "network", "currency_code"], "model": "{{ get_where_subquery(ref('microsoft_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads.microsoft_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_90115110f76cc54bfcc637b8965bda7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads", "dbt_utils_unique_combination_of_columns_microsoft_ads__campaign_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code"], "unique_id": "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__campaign_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code.d7e35aaa9b", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "dbt_utils_unique_combination_o_90115110f76cc54bfcc637b8965bda7a.sql", "original_file_path": "models/microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_microsoft_ads__campaign_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code", "alias": "dbt_utils_unique_combination_o_90115110f76cc54bfcc637b8965bda7a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["microsoft_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads.yml/dbt_utils_unique_combination_o_90115110f76cc54bfcc637b8965bda7a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_90115110f76cc54bfcc637b8965bda7a"}, "created_at": 1660323536.428267, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, device_os, device_type, network, currency_code\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__campaign_report`\n    group by date_day, account_id, campaign_id, device_os, device_type, network, currency_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.microsoft_ads__campaign_report"}, "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__keyword_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__currency_code.9ddafdcbe9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_44d9a6d860076a5eefdaf319891f3854\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_group_id", "ad_id", "keyword_id", "device_os", "device_type", "network", "currency_code"], "model": "{{ get_where_subquery(ref('microsoft_ads__keyword_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads.microsoft_ads__keyword_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_44d9a6d860076a5eefdaf319891f3854", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads", "dbt_utils_unique_combination_of_columns_microsoft_ads__keyword_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__currency_code"], "unique_id": "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__keyword_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__currency_code.9ddafdcbe9", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "dbt_utils_unique_combination_o_44d9a6d860076a5eefdaf319891f3854.sql", "original_file_path": "models/microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_microsoft_ads__keyword_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__currency_code", "alias": "dbt_utils_unique_combination_o_44d9a6d860076a5eefdaf319891f3854", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["microsoft_ads__keyword_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads.yml/dbt_utils_unique_combination_o_44d9a6d860076a5eefdaf319891f3854.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_44d9a6d860076a5eefdaf319891f3854"}, "created_at": 1660323536.43783, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_group_id, ad_id, keyword_id, device_os, device_type, network, currency_code\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__keyword_report`\n    group by date_day, account_id, campaign_id, ad_group_id, ad_id, keyword_id, device_os, device_type, network, currency_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.microsoft_ads__keyword_report"}, "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__search_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network.99029c3602": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9ae81dd8de8ada9477b5f15322a78a95\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_group_id", "ad_id", "keyword_id", "search_query", "device_os", "device_type", "network"], "model": "{{ get_where_subquery(ref('microsoft_ads__search_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads.microsoft_ads__search_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9ae81dd8de8ada9477b5f15322a78a95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads", "dbt_utils_unique_combination_of_columns_microsoft_ads__search_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network"], "unique_id": "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__search_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network.99029c3602", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "dbt_utils_unique_combination_o_9ae81dd8de8ada9477b5f15322a78a95.sql", "original_file_path": "models/microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_microsoft_ads__search_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network", "alias": "dbt_utils_unique_combination_o_9ae81dd8de8ada9477b5f15322a78a95", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["microsoft_ads__search_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads.yml/dbt_utils_unique_combination_o_9ae81dd8de8ada9477b5f15322a78a95.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9ae81dd8de8ada9477b5f15322a78a95"}, "created_at": 1660323536.447755, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_group_id, ad_id, keyword_id, search_query, device_os, device_type, network\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__search_report`\n    group by date_day, account_id, campaign_id, ad_group_id, ad_id, keyword_id, search_query, device_os, device_type, network\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.microsoft_ads__search_report"}, "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__url_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__currency_code.070da99eb7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_64edf902e79ea377b0f44b91e375b432\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id", "campaign_id", "ad_group_id", "ad_id", "device_os", "device_type", "network", "currency_code"], "model": "{{ get_where_subquery(ref('microsoft_ads__url_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads.microsoft_ads__url_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_64edf902e79ea377b0f44b91e375b432", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads", "dbt_utils_unique_combination_of_columns_microsoft_ads__url_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__currency_code"], "unique_id": "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__url_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__currency_code.070da99eb7", "package_name": "microsoft_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "dbt_utils_unique_combination_o_64edf902e79ea377b0f44b91e375b432.sql", "original_file_path": "models/microsoft_ads.yml", "name": "dbt_utils_unique_combination_of_columns_microsoft_ads__url_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__currency_code", "alias": "dbt_utils_unique_combination_o_64edf902e79ea377b0f44b91e375b432", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["microsoft_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads.yml/dbt_utils_unique_combination_o_64edf902e79ea377b0f44b91e375b432.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_64edf902e79ea377b0f44b91e375b432"}, "created_at": 1660323536.4573681, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id, campaign_id, ad_group_id, ad_id, device_os, device_type, network, currency_code\n    from `dbt-package-testing`.`ad_reporting_integration_tests_microsoft_ads`.`microsoft_ads__url_report`\n    group by date_day, account_id, campaign_id, ad_group_id, ad_id, device_os, device_type, network, currency_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.microsoft_ads__url_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__account_history_account_id.66fb3601e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__account_history_account_id"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__account_history_account_id.66fb3601e2", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__account_history_account_id.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__account_history_account_id", "alias": "not_null_stg_twitter_ads__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__account_history_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.614583, "compiled_sql": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_twitter_ads__account_history"}, "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__account_history_account_id__updated_timestamp.2725b1ff40": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_568d1f63aee1f98c5b03795b1c7ce6e0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "updated_timestamp"], "model": "{{ get_where_subquery(ref('stg_twitter_ads__account_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__account_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_568d1f63aee1f98c5b03795b1c7ce6e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "dbt_utils_unique_combination_of_columns_stg_twitter_ads__account_history_account_id__updated_timestamp"], "unique_id": "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__account_history_account_id__updated_timestamp.2725b1ff40", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "dbt_utils_unique_combination_o_568d1f63aee1f98c5b03795b1c7ce6e0.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_ads__account_history_account_id__updated_timestamp", "alias": "dbt_utils_unique_combination_o_568d1f63aee1f98c5b03795b1c7ce6e0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/dbt_utils_unique_combination_o_568d1f63aee1f98c5b03795b1c7ce6e0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_568d1f63aee1f98c5b03795b1c7ce6e0"}, "created_at": 1660323536.6169658, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, updated_timestamp\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__account_history`\n    group by account_id, updated_timestamp\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_ads__account_history"}, "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_history_campaign_id.51218487ce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__campaign_history_campaign_id"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_history_campaign_id.51218487ce", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__campaign_history_campaign_id.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__campaign_history_campaign_id", "alias": "not_null_stg_twitter_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.621793, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_twitter_ads__campaign_history"}, "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_history_campaign_id__updated_timestamp.c7054e5b55": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3a2db0bbb04188c2d34d0a3918a671e2\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "updated_timestamp"], "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3a2db0bbb04188c2d34d0a3918a671e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_history_campaign_id__updated_timestamp"], "unique_id": "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_history_campaign_id__updated_timestamp.c7054e5b55", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "dbt_utils_unique_combination_o_3a2db0bbb04188c2d34d0a3918a671e2.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_history_campaign_id__updated_timestamp", "alias": "dbt_utils_unique_combination_o_3a2db0bbb04188c2d34d0a3918a671e2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/dbt_utils_unique_combination_o_3a2db0bbb04188c2d34d0a3918a671e2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3a2db0bbb04188c2d34d0a3918a671e2"}, "created_at": 1660323536.625965, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_timestamp\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_history`\n    group by campaign_id, updated_timestamp\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_ads__campaign_history"}, "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_history_line_item_id.2cef040809": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_item_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__line_item_history_line_item_id"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_history_line_item_id.2cef040809", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__line_item_history_line_item_id.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__line_item_history_line_item_id", "alias": "not_null_stg_twitter_ads__line_item_history_line_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_history_line_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.633298, "compiled_sql": "\n    \n    \n\n\n\nselect line_item_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_history`\nwhere line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "line_item_id", "file_key_name": "models.stg_twitter_ads__line_item_history"}, "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_history_line_item_id__updated_timestamp.b12672e022": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_46813227544cee5d3f0e709e692abea3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["line_item_id", "updated_timestamp"], "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_46813227544cee5d3f0e709e692abea3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_history_line_item_id__updated_timestamp"], "unique_id": "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_history_line_item_id__updated_timestamp.b12672e022", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "dbt_utils_unique_combination_o_46813227544cee5d3f0e709e692abea3.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_history_line_item_id__updated_timestamp", "alias": "dbt_utils_unique_combination_o_46813227544cee5d3f0e709e692abea3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/dbt_utils_unique_combination_o_46813227544cee5d3f0e709e692abea3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_46813227544cee5d3f0e709e692abea3"}, "created_at": 1660323536.635925, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        line_item_id, updated_timestamp\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_history`\n    group by line_item_id, updated_timestamp\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_ads__line_item_history"}, "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id.f447a1cd09": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promoted_tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__promoted_tweet_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history"]}, "config": {"enabled": true, "alias": "not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id.f447a1cd09", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id", "alias": "not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976"}, "created_at": 1660323536.642129, "compiled_sql": "\n    \n    \n\n\n\nselect promoted_tweet_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_history`\nwhere promoted_tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "promoted_tweet_id", "file_key_name": "models.stg_twitter_ads__promoted_tweet_history"}, "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id__updated_timestamp.dddc4a21ef": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d9257bc7a9cdb33491e1f7fe6f42bbca\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["promoted_tweet_id", "updated_timestamp"], "model": "{{ get_where_subquery(ref('stg_twitter_ads__promoted_tweet_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d9257bc7a9cdb33491e1f7fe6f42bbca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id__updated_timestamp"], "unique_id": "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id__updated_timestamp.dddc4a21ef", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "dbt_utils_unique_combination_o_d9257bc7a9cdb33491e1f7fe6f42bbca.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id__updated_timestamp", "alias": "dbt_utils_unique_combination_o_d9257bc7a9cdb33491e1f7fe6f42bbca", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/dbt_utils_unique_combination_o_d9257bc7a9cdb33491e1f7fe6f42bbca.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d9257bc7a9cdb33491e1f7fe6f42bbca"}, "created_at": 1660323536.6452632, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        promoted_tweet_id, updated_timestamp\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_history`\n    group by promoted_tweet_id, updated_timestamp\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_ads__promoted_tweet_history"}, "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_date_day.c4c46a5894": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_twitter_ads__promoted_tweet_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__promoted_tweet_report_date_day"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_date_day.c4c46a5894", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__promoted_tweet_report_date_day.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__promoted_tweet_report_date_day", "alias": "not_null_stg_twitter_ads__promoted_tweet_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__promoted_tweet_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.6548421, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_twitter_ads__promoted_tweet_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id.6028694598": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promoted_tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__promoted_tweet_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"]}, "config": {"enabled": true, "alias": "not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id.6028694598", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id", "alias": "not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa"}, "created_at": 1660323536.657822, "compiled_sql": "\n    \n    \n\n\n\nselect promoted_tweet_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_report`\nwhere promoted_tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "promoted_tweet_id", "file_key_name": "models.stg_twitter_ads__promoted_tweet_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_placement.c1b1f648b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('stg_twitter_ads__promoted_tweet_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__promoted_tweet_report_placement"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_placement.c1b1f648b3", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__promoted_tweet_report_placement.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__promoted_tweet_report_placement", "alias": "not_null_stg_twitter_ads__promoted_tweet_report_placement", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__promoted_tweet_report_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.661202, "compiled_sql": "\n    \n    \n\n\n\nselect placement\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placement", "file_key_name": "models.stg_twitter_ads__promoted_tweet_report"}, "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement.7028206273": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3d583fe3c6abbb0e930d21030936ced9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "promoted_tweet_id", "placement"], "model": "{{ get_where_subquery(ref('stg_twitter_ads__promoted_tweet_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3d583fe3c6abbb0e930d21030936ced9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement"], "unique_id": "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement.7028206273", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "dbt_utils_unique_combination_o_3d583fe3c6abbb0e930d21030936ced9.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement", "alias": "dbt_utils_unique_combination_o_3d583fe3c6abbb0e930d21030936ced9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/dbt_utils_unique_combination_o_3d583fe3c6abbb0e930d21030936ced9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3d583fe3c6abbb0e930d21030936ced9"}, "created_at": 1660323536.664109, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, promoted_tweet_id, placement\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__promoted_tweet_report`\n    group by date_day, promoted_tweet_id, placement\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_ads__promoted_tweet_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_url_index.e998fb67be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "index", "model": "{{ get_where_subquery(ref('stg_twitter_ads__tweet_url')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__tweet_url"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__tweet_url_index"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_url_index.e998fb67be", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__tweet_url_index.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__tweet_url_index", "alias": "not_null_stg_twitter_ads__tweet_url_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__tweet_url"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__tweet_url_index.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.671947, "compiled_sql": "\n    \n    \n\n\n\nselect index\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet_url`\nwhere index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "index", "file_key_name": "models.stg_twitter_ads__tweet_url"}, "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_url_tweet_id.f7e1670218": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__tweet_url')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__tweet_url"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__tweet_url_tweet_id"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_url_tweet_id.f7e1670218", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__tweet_url_tweet_id.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__tweet_url_tweet_id", "alias": "not_null_stg_twitter_ads__tweet_url_tweet_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__tweet_url"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__tweet_url_tweet_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.675102, "compiled_sql": "\n    \n    \n\n\n\nselect tweet_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet_url`\nwhere tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tweet_id", "file_key_name": "models.stg_twitter_ads__tweet_url"}, "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__tweet_url_index__tweet_id.eab5b85d74": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_67f262d96b6883ebf74236649dcc0540\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["index", "tweet_id"], "model": "{{ get_where_subquery(ref('stg_twitter_ads__tweet_url')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__tweet_url"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_67f262d96b6883ebf74236649dcc0540", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "dbt_utils_unique_combination_of_columns_stg_twitter_ads__tweet_url_index__tweet_id"], "unique_id": "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__tweet_url_index__tweet_id.eab5b85d74", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "dbt_utils_unique_combination_o_67f262d96b6883ebf74236649dcc0540.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_ads__tweet_url_index__tweet_id", "alias": "dbt_utils_unique_combination_o_67f262d96b6883ebf74236649dcc0540", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__tweet_url"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/dbt_utils_unique_combination_o_67f262d96b6883ebf74236649dcc0540.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_67f262d96b6883ebf74236649dcc0540"}, "created_at": 1660323536.678713, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        index, tweet_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet_url`\n    group by index, tweet_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_ads__tweet_url"}, "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_date_day.053c09786c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__campaign_report_date_day"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_date_day.053c09786c", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__campaign_report_date_day.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__campaign_report_date_day", "alias": "not_null_stg_twitter_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__campaign_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.6861482, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_twitter_ads__campaign_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_campaign_id.a63b62981f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__campaign_report_campaign_id"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_campaign_id.a63b62981f", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__campaign_report_campaign_id.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__campaign_report_campaign_id", "alias": "not_null_stg_twitter_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__campaign_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.6896691, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_twitter_ads__campaign_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_placement.5067d8c4f4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__campaign_report_placement"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_placement.5067d8c4f4", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__campaign_report_placement.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__campaign_report_placement", "alias": "not_null_stg_twitter_ads__campaign_report_placement", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__campaign_report_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.693161, "compiled_sql": "\n    \n    \n\n\n\nselect placement\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placement", "file_key_name": "models.stg_twitter_ads__campaign_report"}, "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_report_date_day__campaign_id__placement.71102d8fdb": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8ea2fb330c061f42c1639904f6bdc5f0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "campaign_id", "placement"], "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8ea2fb330c061f42c1639904f6bdc5f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_report_date_day__campaign_id__placement"], "unique_id": "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_report_date_day__campaign_id__placement.71102d8fdb", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "dbt_utils_unique_combination_o_8ea2fb330c061f42c1639904f6bdc5f0.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_report_date_day__campaign_id__placement", "alias": "dbt_utils_unique_combination_o_8ea2fb330c061f42c1639904f6bdc5f0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/dbt_utils_unique_combination_o_8ea2fb330c061f42c1639904f6bdc5f0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8ea2fb330c061f42c1639904f6bdc5f0"}, "created_at": 1660323536.696766, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, campaign_id, placement\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__campaign_report`\n    group by date_day, campaign_id, placement\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_ads__campaign_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_date_day.0f4d8cc8fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__line_item_report_date_day"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_date_day.0f4d8cc8fe", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__line_item_report_date_day.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__line_item_report_date_day", "alias": "not_null_stg_twitter_ads__line_item_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.705158, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_twitter_ads__line_item_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_line_item_id.9f5a4860b7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_item_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__line_item_report_line_item_id"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_line_item_id.9f5a4860b7", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__line_item_report_line_item_id.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__line_item_report_line_item_id", "alias": "not_null_stg_twitter_ads__line_item_report_line_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_report_line_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.708305, "compiled_sql": "\n    \n    \n\n\n\nselect line_item_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_report`\nwhere line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "line_item_id", "file_key_name": "models.stg_twitter_ads__line_item_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_placement.cd7e77e0eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__line_item_report_placement"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_placement.cd7e77e0eb", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__line_item_report_placement.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__line_item_report_placement", "alias": "not_null_stg_twitter_ads__line_item_report_placement", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_report_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.7117949, "compiled_sql": "\n    \n    \n\n\n\nselect placement\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placement", "file_key_name": "models.stg_twitter_ads__line_item_report"}, "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_report_date_day__line_item_id__placement.251e077e6b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_aaeab9295a1b92ec034614169e5444cb\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "line_item_id", "placement"], "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_aaeab9295a1b92ec034614169e5444cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_report_date_day__line_item_id__placement"], "unique_id": "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_report_date_day__line_item_id__placement.251e077e6b", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "dbt_utils_unique_combination_o_aaeab9295a1b92ec034614169e5444cb.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_report_date_day__line_item_id__placement", "alias": "dbt_utils_unique_combination_o_aaeab9295a1b92ec034614169e5444cb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/dbt_utils_unique_combination_o_aaeab9295a1b92ec034614169e5444cb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_aaeab9295a1b92ec034614169e5444cb"}, "created_at": 1660323536.714845, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, line_item_id, placement\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_report`\n    group by date_day, line_item_id, placement\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_ads__line_item_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_date_day.c7e7155b13": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_keywords_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__line_item_keywords_report_date_day"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_date_day.c7e7155b13", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__line_item_keywords_report_date_day.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__line_item_keywords_report_date_day", "alias": "not_null_stg_twitter_ads__line_item_keywords_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_keywords_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_keywords_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.7235498, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_keywords_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_twitter_ads__line_item_keywords_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_line_item_id.e4f3fa2e5c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_twitter_ads__line_da56af10c290b71b2ed3fe91bb6e626c\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_item_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_keywords_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"]}, "config": {"enabled": true, "alias": "not_null_stg_twitter_ads__line_da56af10c290b71b2ed3fe91bb6e626c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__line_item_keywords_report_line_item_id"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_line_item_id.e4f3fa2e5c", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__line_da56af10c290b71b2ed3fe91bb6e626c.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__line_item_keywords_report_line_item_id", "alias": "not_null_stg_twitter_ads__line_da56af10c290b71b2ed3fe91bb6e626c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_keywords_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_da56af10c290b71b2ed3fe91bb6e626c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_twitter_ads__line_da56af10c290b71b2ed3fe91bb6e626c"}, "created_at": 1660323536.726966, "compiled_sql": "\n    \n    \n\n\n\nselect line_item_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_keywords_report`\nwhere line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "line_item_id", "file_key_name": "models.stg_twitter_ads__line_item_keywords_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_keyword.02bb211fa0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_keywords_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__line_item_keywords_report_keyword"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_keyword.02bb211fa0", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__line_item_keywords_report_keyword.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__line_item_keywords_report_keyword", "alias": "not_null_stg_twitter_ads__line_item_keywords_report_keyword", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_keywords_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_keywords_report_keyword.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.730597, "compiled_sql": "\n    \n    \n\n\n\nselect keyword\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_keywords_report`\nwhere keyword is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "keyword", "file_key_name": "models.stg_twitter_ads__line_item_keywords_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_placement.f5bb738cac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_keywords_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__line_item_keywords_report_placement"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_placement.f5bb738cac", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__line_item_keywords_report_placement.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__line_item_keywords_report_placement", "alias": "not_null_stg_twitter_ads__line_item_keywords_report_placement", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_keywords_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_keywords_report_placement.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.733475, "compiled_sql": "\n    \n    \n\n\n\nselect placement\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_keywords_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "placement", "file_key_name": "models.stg_twitter_ads__line_item_keywords_report"}, "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_keywords_report_date_day__line_item_id__keyword__placement.c47c820cc3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ee7bc3b252634b2879df7977692fb089\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "line_item_id", "keyword", "placement"], "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_keywords_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ee7bc3b252634b2879df7977692fb089", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_keywords_report_date_day__line_item_id__keyword__placement"], "unique_id": "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_keywords_report_date_day__line_item_id__keyword__placement.c47c820cc3", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "dbt_utils_unique_combination_o_ee7bc3b252634b2879df7977692fb089.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_keywords_report_date_day__line_item_id__keyword__placement", "alias": "dbt_utils_unique_combination_o_ee7bc3b252634b2879df7977692fb089", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__line_item_keywords_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/dbt_utils_unique_combination_o_ee7bc3b252634b2879df7977692fb089.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ee7bc3b252634b2879df7977692fb089"}, "created_at": 1660323536.736396, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, line_item_id, keyword, placement\n    from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__line_item_keywords_report`\n    group by date_day, line_item_id, keyword, placement\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_ads__line_item_keywords_report"}, "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_tweet_id.a0427f37cd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__tweet')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__tweet"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "not_null_stg_twitter_ads__tweet_tweet_id"], "unique_id": "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_tweet_id.a0427f37cd", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "not_null_stg_twitter_ads__tweet_tweet_id.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "not_null_stg_twitter_ads__tweet_tweet_id", "alias": "not_null_stg_twitter_ads__tweet_tweet_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__tweet"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/not_null_stg_twitter_ads__tweet_tweet_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.745452, "compiled_sql": "\n    \n    \n\n\n\nselect tweet_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet`\nwhere tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tweet_id", "file_key_name": "models.stg_twitter_ads__tweet"}, "test.twitter_ads_source.unique_stg_twitter_ads__tweet_tweet_id.7e44536c95": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__tweet')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__tweet"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads_source", "unique_stg_twitter_ads__tweet_tweet_id"], "unique_id": "test.twitter_ads_source.unique_stg_twitter_ads__tweet_tweet_id.7e44536c95", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "unique_stg_twitter_ads__tweet_tweet_id.sql", "original_file_path": "models/stg_twitter_ads.yml", "name": "unique_stg_twitter_ads__tweet_tweet_id", "alias": "unique_stg_twitter_ads__tweet_tweet_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_ads__tweet"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads.yml/unique_stg_twitter_ads__tweet_tweet_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.748523, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n\n  select tweet_id as unique_field\n  from `dbt-package-testing`.`ad_reporting_integration_tests_twitter_ads_source`.`stg_twitter_ads__tweet`\n  where tweet_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tweet_id", "file_key_name": "models.stg_twitter_ads__tweet"}, "test.linkedin.not_null_linkedin_ads__account_report_account_id.0c34ea1842": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('linkedin_ads__account_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__account_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin_ads__account_report_account_id"], "unique_id": "test.linkedin.not_null_linkedin_ads__account_report_account_id.0c34ea1842", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin_ads__account_report_account_id.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin_ads__account_report_account_id", "alias": "not_null_linkedin_ads__account_report_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin_ads__account_report_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.8058188, "compiled_sql": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__account_report`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.linkedin_ads__account_report"}, "test.linkedin.not_null_linkedin_ads__account_report_date_day.c4b33f8f53": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('linkedin_ads__account_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__account_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin_ads__account_report_date_day"], "unique_id": "test.linkedin.not_null_linkedin_ads__account_report_date_day.c4b33f8f53", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin_ads__account_report_date_day.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin_ads__account_report_date_day", "alias": "not_null_linkedin_ads__account_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin_ads__account_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.808558, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__account_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.linkedin_ads__account_report"}, "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__account_report_date_day__account_id.a2dcede91c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0644abec3559f9c0247b709331bb1231\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "account_id"], "model": "{{ get_where_subquery(ref('linkedin_ads__account_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__account_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0644abec3559f9c0247b709331bb1231", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "dbt_utils_unique_combination_of_columns_linkedin_ads__account_report_date_day__account_id"], "unique_id": "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__account_report_date_day__account_id.a2dcede91c", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "dbt_utils_unique_combination_o_0644abec3559f9c0247b709331bb1231.sql", "original_file_path": "models/linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_linkedin_ads__account_report_date_day__account_id", "alias": "dbt_utils_unique_combination_o_0644abec3559f9c0247b709331bb1231", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__account_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/dbt_utils_unique_combination_o_0644abec3559f9c0247b709331bb1231.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0644abec3559f9c0247b709331bb1231"}, "created_at": 1660323536.810981, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__account_report`\n    group by date_day, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.linkedin_ads__account_report"}, "test.linkedin.not_null_linkedin_ads__campaign_report_date_day.8d320b88b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('linkedin_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin_ads__campaign_report_date_day"], "unique_id": "test.linkedin.not_null_linkedin_ads__campaign_report_date_day.8d320b88b1", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin_ads__campaign_report_date_day.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin_ads__campaign_report_date_day", "alias": "not_null_linkedin_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin_ads__campaign_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.817019, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.linkedin_ads__campaign_report"}, "test.linkedin.not_null_linkedin_ads__campaign_report_campaign_id.bf43964b15": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('linkedin_ads__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin_ads__campaign_report_campaign_id"], "unique_id": "test.linkedin.not_null_linkedin_ads__campaign_report_campaign_id.bf43964b15", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin_ads__campaign_report_campaign_id.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin_ads__campaign_report_campaign_id", "alias": "not_null_linkedin_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin_ads__campaign_report_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.819412, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.linkedin_ads__campaign_report"}, "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_report_date_day__campaign_id__account_id__campaign_group_id.0b09b4b3f3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fd56be6c8a6c070551363fa2fd8d2873\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "campaign_id", "account_id", "campaign_group_id"], "model": "{{ get_where_subquery(ref('linkedin_ads__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fd56be6c8a6c070551363fa2fd8d2873", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_report_date_day__campaign_id__account_id__campaign_group_id"], "unique_id": "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_report_date_day__campaign_id__account_id__campaign_group_id.0b09b4b3f3", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "dbt_utils_unique_combination_o_fd56be6c8a6c070551363fa2fd8d2873.sql", "original_file_path": "models/linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_report_date_day__campaign_id__account_id__campaign_group_id", "alias": "dbt_utils_unique_combination_o_fd56be6c8a6c070551363fa2fd8d2873", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__campaign_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/dbt_utils_unique_combination_o_fd56be6c8a6c070551363fa2fd8d2873.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fd56be6c8a6c070551363fa2fd8d2873"}, "created_at": 1660323536.822112, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, campaign_id, account_id, campaign_group_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__campaign_report`\n    group by date_day, campaign_id, account_id, campaign_group_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.linkedin_ads__campaign_report"}, "test.linkedin.not_null_linkedin_ads__campaign_group_report_date_day.2676a1f76b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('linkedin_ads__campaign_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__campaign_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin_ads__campaign_group_report_date_day"], "unique_id": "test.linkedin.not_null_linkedin_ads__campaign_group_report_date_day.2676a1f76b", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin_ads__campaign_group_report_date_day.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin_ads__campaign_group_report_date_day", "alias": "not_null_linkedin_ads__campaign_group_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__campaign_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin_ads__campaign_group_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.8290172, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__campaign_group_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.linkedin_ads__campaign_group_report"}, "test.linkedin.not_null_linkedin_ads__campaign_group_report_campaign_group_id.39b448cdaf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_group_id", "model": "{{ get_where_subquery(ref('linkedin_ads__campaign_group_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__campaign_group_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin_ads__campaign_group_report_campaign_group_id"], "unique_id": "test.linkedin.not_null_linkedin_ads__campaign_group_report_campaign_group_id.39b448cdaf", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin_ads__campaign_group_report_campaign_group_id.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin_ads__campaign_group_report_campaign_group_id", "alias": "not_null_linkedin_ads__campaign_group_report_campaign_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__campaign_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin_ads__campaign_group_report_campaign_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.8314052, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_group_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__campaign_group_report`\nwhere campaign_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_group_id", "file_key_name": "models.linkedin_ads__campaign_group_report"}, "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_group_report_date_day__campaign_group_id__account_id.f60989a7a6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bcb471c45c713cd1ea59bd0229ed3f9e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "campaign_group_id", "account_id"], "model": "{{ get_where_subquery(ref('linkedin_ads__campaign_group_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__campaign_group_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bcb471c45c713cd1ea59bd0229ed3f9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_group_report_date_day__campaign_group_id__account_id"], "unique_id": "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_group_report_date_day__campaign_group_id__account_id.f60989a7a6", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "dbt_utils_unique_combination_o_bcb471c45c713cd1ea59bd0229ed3f9e.sql", "original_file_path": "models/linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_group_report_date_day__campaign_group_id__account_id", "alias": "dbt_utils_unique_combination_o_bcb471c45c713cd1ea59bd0229ed3f9e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__campaign_group_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/dbt_utils_unique_combination_o_bcb471c45c713cd1ea59bd0229ed3f9e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bcb471c45c713cd1ea59bd0229ed3f9e"}, "created_at": 1660323536.833809, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, campaign_group_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__campaign_group_report`\n    group by date_day, campaign_group_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.linkedin_ads__campaign_group_report"}, "test.linkedin.not_null_linkedin_ads__creative_report_date_day.0c6338b020": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('linkedin_ads__creative_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__creative_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin_ads__creative_report_date_day"], "unique_id": "test.linkedin.not_null_linkedin_ads__creative_report_date_day.0c6338b020", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin_ads__creative_report_date_day.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin_ads__creative_report_date_day", "alias": "not_null_linkedin_ads__creative_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__creative_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin_ads__creative_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.8407192, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__creative_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.linkedin_ads__creative_report"}, "test.linkedin.not_null_linkedin_ads__creative_report_creative_id.096d93f889": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('linkedin_ads__creative_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__creative_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin_ads__creative_report_creative_id"], "unique_id": "test.linkedin.not_null_linkedin_ads__creative_report_creative_id.096d93f889", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin_ads__creative_report_creative_id.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin_ads__creative_report_creative_id", "alias": "not_null_linkedin_ads__creative_report_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__creative_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin_ads__creative_report_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.843422, "compiled_sql": "\n    \n    \n\n\n\nselect creative_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__creative_report`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.linkedin_ads__creative_report"}, "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__creative_report_date_day__creative_id__campaign_id__campaign_group_id__account_id.5c000e925f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_28cc8f6d273bc5b366ed325805452f92\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "creative_id", "campaign_id", "campaign_group_id", "account_id"], "model": "{{ get_where_subquery(ref('linkedin_ads__creative_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__creative_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_28cc8f6d273bc5b366ed325805452f92", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "dbt_utils_unique_combination_of_columns_linkedin_ads__creative_report_date_day__creative_id__campaign_id__campaign_group_id__account_id"], "unique_id": "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__creative_report_date_day__creative_id__campaign_id__campaign_group_id__account_id.5c000e925f", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "dbt_utils_unique_combination_o_28cc8f6d273bc5b366ed325805452f92.sql", "original_file_path": "models/linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_linkedin_ads__creative_report_date_day__creative_id__campaign_id__campaign_group_id__account_id", "alias": "dbt_utils_unique_combination_o_28cc8f6d273bc5b366ed325805452f92", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__creative_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/dbt_utils_unique_combination_o_28cc8f6d273bc5b366ed325805452f92.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_28cc8f6d273bc5b366ed325805452f92"}, "created_at": 1660323536.8462899, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, creative_id, campaign_id, campaign_group_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__creative_report`\n    group by date_day, creative_id, campaign_id, campaign_group_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.linkedin_ads__creative_report"}, "test.linkedin.not_null_linkedin_ads__url_report_date_day.48b540f315": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('linkedin_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin_ads__url_report_date_day"], "unique_id": "test.linkedin.not_null_linkedin_ads__url_report_date_day.48b540f315", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin_ads__url_report_date_day.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin_ads__url_report_date_day", "alias": "not_null_linkedin_ads__url_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin_ads__url_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.8532941, "compiled_sql": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__url_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.linkedin_ads__url_report"}, "test.linkedin.not_null_linkedin_ads__url_report_creative_id.83967fe9d2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('linkedin_ads__url_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__url_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin_ads__url_report_creative_id"], "unique_id": "test.linkedin.not_null_linkedin_ads__url_report_creative_id.83967fe9d2", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin_ads__url_report_creative_id.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin_ads__url_report_creative_id", "alias": "not_null_linkedin_ads__url_report_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin_ads__url_report_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1660323536.8553832, "compiled_sql": "\n    \n    \n\n\n\nselect creative_id\nfrom `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__url_report`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.linkedin_ads__url_report"}, "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__url_report_date_day__creative_id__campaign_id__campaign_group_id__account_id.d00d4a104d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_24d7d196c7f59231b7de190c11b33a2f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "creative_id", "campaign_id", "campaign_group_id", "account_id"], "model": "{{ get_where_subquery(ref('linkedin_ads__url_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin_ads__url_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_24d7d196c7f59231b7de190c11b33a2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "dbt_utils_unique_combination_of_columns_linkedin_ads__url_report_date_day__creative_id__campaign_id__campaign_group_id__account_id"], "unique_id": "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__url_report_date_day__creative_id__campaign_id__campaign_group_id__account_id.d00d4a104d", "package_name": "linkedin", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "dbt_utils_unique_combination_o_24d7d196c7f59231b7de190c11b33a2f.sql", "original_file_path": "models/linkedin.yml", "name": "dbt_utils_unique_combination_of_columns_linkedin_ads__url_report_date_day__creative_id__campaign_id__campaign_group_id__account_id", "alias": "dbt_utils_unique_combination_o_24d7d196c7f59231b7de190c11b33a2f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_ads__url_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/dbt_utils_unique_combination_o_24d7d196c7f59231b7de190c11b33a2f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_24d7d196c7f59231b7de190c11b33a2f"}, "created_at": 1660323536.857688, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, creative_id, campaign_id, campaign_group_id, account_id\n    from `dbt-package-testing`.`ad_reporting_integration_tests_linkedin_ads`.`linkedin_ads__url_report`\n    group by date_day, creative_id, campaign_id, campaign_group_id, account_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.linkedin_ads__url_report"}}, "sources": {"source.microsoft_ads_source.microsoft_ads.account_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "account_history"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.account_history", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "account_history", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a version of one or more Microsoft accounts.", "columns": {"id": {"name": "id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The time each version of the object was last modified, i.e. when that version of the object was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`account_history`", "created_at": 1660323536.864838}, "source.microsoft_ads_source.microsoft_ads.account_performance_daily_report": {"fqn": ["microsoft_ads_source", "microsoft_ads", "account_performance_daily_report"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.account_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "account_performance_daily_report", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "account_performance_daily_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance by account and all non-metric columns.", "columns": {"date": {"name": "date", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`account_performance_daily_report`", "created_at": 1660323536.865035}, "source.microsoft_ads_source.microsoft_ads.ad_group_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "ad_group_history"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.ad_group_history", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "ad_group_history", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a version of one or more Microsoft ad groups.", "columns": {"id": {"name": "id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_time": {"name": "modified_time", "description": "The time each version of the object was last modified, i.e. when that version of the object was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "The date in which an ad group starts running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "The date in which this ad group will no longer run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this ad group; see the following [documentation](https://help.ads.microsoft.com/apex/index/3/en/53094) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`ad_group_history`", "created_at": 1660323536.8651981}, "source.microsoft_ads_source.microsoft_ads.ad_group_performance_daily_report": {"fqn": ["microsoft_ads_source", "microsoft_ads", "ad_group_performance_daily_report"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.ad_group_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "ad_group_performance_daily_report", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_group_performance_daily_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance by account, campaign, ad group and all non-metric columns.", "columns": {"date": {"name": "date", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "The language that the associated ad was viewed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`ad_group_performance_daily_report`", "created_at": 1660323536.865375}, "source.microsoft_ads_source.microsoft_ads.ad_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "ad_history"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.ad_history", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "ad_history", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a version of one or more Microsoft ads.", "columns": {"id": {"name": "id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_part_1": {"name": "title_part_1", "description": "The name of the corresponding ad; `title_part_1` is used as the ad name as a proxy as one is not provided by the data source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "The full URL that the ad links to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_time": {"name": "modified_time", "description": "The time each version of the object was last modified, i.e. when that version of the object was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this ad; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/adstatus?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The ad type associated with this record; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/adtype?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`ad_history`", "created_at": 1660323536.865532}, "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report": {"fqn": ["microsoft_ads_source", "microsoft_ads", "ad_performance_daily_report"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "ad_performance_daily_report", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_performance_daily_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance by account, campaign, ad group, ad and all non-metric columns.", "columns": {"date": {"name": "date", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "The language that the associated ad was viewed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`ad_performance_daily_report`", "created_at": 1660323536.865706}, "source.microsoft_ads_source.microsoft_ads.campaign_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.campaign_history", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "campaign_history", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a version of one or more Microsoft campaigns.", "columns": {"id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_time": {"name": "modified_time", "description": "The time each version of the object was last modified, i.e. when that version of the object was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The campaign type associated with this record; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/campaigntype?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this campaign; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/campaignstatus?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`campaign_history`", "created_at": 1660323536.865862}, "source.microsoft_ads_source.microsoft_ads.campaign_performance_daily_report": {"fqn": ["microsoft_ads_source", "microsoft_ads", "campaign_performance_daily_report"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.campaign_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "campaign_performance_daily_report", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_performance_daily_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance by account, campaign and all non-metric columns.", "columns": {"date": {"name": "date", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`campaign_performance_daily_report`", "created_at": 1660323536.866029}, "source.microsoft_ads_source.microsoft_ads.keyword_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "keyword_history"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.keyword_history", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "keyword_history", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "keyword_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a version of one or more Microsoft keywords.", "columns": {"id": {"name": "id", "description": "The ID of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The keyword(s) associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_time": {"name": "modified_time", "description": "The time each version of the object was last modified, i.e. when that version of the object was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "The match type associated with this record; values contain but may not be limited to 'Broad', 'Exact', 'Phrase'. Please refer to Microsoft Ad's [documentation](https://help.ads.microsoft.com/#apex/ads/en/50822/1).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this keyword; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/keywordstatus?view=bingads-13) for more information on values and definitions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`keyword_history`", "created_at": 1660323536.866188}, "source.microsoft_ads_source.microsoft_ads.keyword_performance_daily_report": {"fqn": ["microsoft_ads_source", "microsoft_ads", "keyword_performance_daily_report"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.keyword_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "keyword_performance_daily_report", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "keyword_performance_daily_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance by account, campaign, ad group, ad, keyword and all non-metric columns.", "columns": {"date": {"name": "date", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "The ID of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "The language that the associated ad was viewed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`keyword_performance_daily_report`", "created_at": 1660323536.86636}, "source.microsoft_ads_source.microsoft_ads.search_query_performance_daily_report": {"fqn": ["microsoft_ads_source", "microsoft_ads", "search_query_performance_daily_report"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.search_query_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "search_query_performance_daily_report", "source_name": "microsoft_ads", "source_description": "", "loader": "Fivetran", "identifier": "search_query_performance_daily_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance by account, campaign, ad group, ad, keyword and all non-metric columns.", "columns": {"date": {"name": "date", "description": "The date of the performance report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "The ID of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_query": {"name": "search_query", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency code associated with spend and, if applicable, other metrics associated with currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_os": {"name": "device_os", "description": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The network associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "The language that the associated ad was viewed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_distribution": {"name": "ad_distribution", "description": "The distribution medium associated with this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_match_type": {"name": "bid_match_type", "description": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivered_match_type": {"name": "delivered_match_type", "description": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_vs_other": {"name": "top_vs_other", "description": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred by the grain of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`bingads`.`search_query_performance_daily_report`", "created_at": 1660323536.8665411}, "source.linkedin_source.linkedin.ad_analytics_by_creative": {"fqn": ["linkedin_source", "linkedin", "ad_analytics_by_creative"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.ad_analytics_by_creative", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "ad_analytics_by_creative", "source_name": "linkedin", "source_description": "", "loader": "fivetran", "identifier": "ad_analytics_by_creative", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance of ads at the creative level.", "columns": {"creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_in_local_currency": {"name": "cost_in_local_currency", "description": "The cost of the ads in the local currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_in_usd": {"name": "cost_in_usd", "description": "The cost of the ads in the USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`ad_analytics_by_creative`", "created_at": 1660323536.866687}, "source.linkedin_source.linkedin.creative_history": {"fqn": ["linkedin_source", "linkedin", "creative_history"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.creative_history", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "creative_history", "source_name": "linkedin", "source_description": "", "loader": "fivetran", "identifier": "creative_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a 'version' of a creative.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the creative was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign the creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "ACTIVE - Creative creation is complete and creative is available for review and serve.\nPAUSED - Creative creation is complete and creative is current, but should temporarily not be served. This status is not valid upon creation.\nDRAFT - Creative creation is incomplete and may still be edited.\nARCHIVED - Creative creation is complete, but creative should not be served and should be separated from non-archived creatives in any UI.\nCANCELED - Creative is permanently canceled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "TEXT_AD - Text with Sponsored Link to landing page on your site.\nSPONSORED_STATUS_UPDATE - Sponsored status update from a profile page.\nSPONSORED_INMAILS - Single message ad delivered to the member's inbox\nSPONSORED_MESSAGE - Conversation ad containing a tree of pre-determined messages delivered to the member's inbox\nSPONSORED_VIDEO - Sponsored videos.\nSPONSORED_UPDATE_CAROUSEL - Sponsored Carousels\nFOLLOW_COMPANY_V2 - Dynamic Follow Ad\nSPOTLIGHT_V2 - Dynamic Spotlight Ad\nJOBS_V2 - Dynamic Job Ad\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_uri": {"name": "click_uri", "description": "Required when creative type is TEXT_AD. Maximum character limit of 500 after URL encoding all special characters. \nLimit does not include the \"https://\" prefix.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_to_action_label_type": {"name": "call_to_action_label_type", "description": "The labeled call-to-action on this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`creative_history`", "created_at": 1660323536.8668349}, "source.linkedin_source.linkedin.campaign_history": {"fqn": ["linkedin_source", "linkedin", "campaign_history"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.campaign_history", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "campaign_history", "source_name": "linkedin", "source_description": "", "loader": "fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a 'version' of a campaign.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "The ID of the campaign group the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "audience_expansion_enabled": {"name": "audience_expansion_enabled", "description": "Boolean (default=false) representing whether Audience Expansion is enabled for the campaign provides query expansion for certain targeting criteria.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_type": {"name": "cost_type", "description": "CPM - Cost per thousand advertising impressions. If type=SPONSORED_INMAILS; cost per send(CPS) is measured as CPM x 1000.\nCPC- Cost per individual click on the associated link.\nCPV- Cost per view for video ads.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_selection": {"name": "creative_selection", "description": "ROUND_ROBIN - Rotate through available creatives to serve them as evenly as possible.\nOPTIMIZED (default) - Bias selection taking into account such as expected performance. Not available for Message and Conversation Ads (type=SPONSORED_INMAILS).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount": {"name": "daily_budget_amount", "description": "Maximum amount to spend per day UTC. The amount of money as a real number string.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_currency_code": {"name": "daily_budget_currency_code", "description": "ISO currency code. The currency must match that of the parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "format": {"name": "format", "description": "The ad format on the campaign level. See https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads/campaign-formats?view=li-lms-2022-07", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale_country": {"name": "locale_country", "description": "Locale of the campaign. An uppercase two-letter country code as defined by ISO-3166.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale_language": {"name": "locale_language", "description": "Locale of the campaign. A lowercase two-letter language code as defined by ISO-639.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective_type": {"name": "objective_type", "description": "Campaign Objective type values. Click [here](https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads-reporting/ad-budget-pricing-type-combinations?view=li-lms-2022-07) for Campaign Objective descriptions. One of: - BRAND_AWARENESS - ENGAGEMENT - JOB_APPLICANTS - LEAD_GENERATION - WEBSITE_CONVERSIONS - WEBSITE_VISITS - VIDEO_VIEWS\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offsite_delivery_enabled": {"name": "offsite_delivery_enabled", "description": "Boolean indicating if this campaign to allowed to be served on the LinkedIn Audience Network to extend the reach of your campaign by delivering ads beyond the  LinkedIn feed to members on third-party apps and sites.\t(default will be \"True\" from June 30, 2022)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization_target_type": {"name": "optimization_target_type", "description": "Determines how this campaign is optimized for spending. If this is not set, there is no optimization. Refer to the documentation here. Default = 'NONE'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_start": {"name": "run_schedule_start", "description": "Scheduled date range to run associated creatives. The start date must be non-null. Represents the inclusive (greater than or equal to) value in which to start the range.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_end": {"name": "run_schedule_end", "description": "Scheduled date range to run associated creatives. The start date must be non-null. Represents the exclusive (strictly less than) value in which to end the range, if provided.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "ACTIVE - Denotes that the campaign is fully servable.\nPAUSED - Denotes that the campaign meets all requirements to be served, but temporarily should not be.\nARCHIVED - Denotes that the campaign is presently inactive, and should mostly be hidden in the UI until un-archived.\nCOMPLETED - Denotes that the campaign has reached a specified budgetary or chronological limit.\nCANCELED - Denotes that the campaign has been permanently canceled, such as when an advertising account is permanently closed.\nDRAFT - Denotes that the campaign is still being edited and not eligible for serving. Some validation will be postponed until the campaign is activated.\nPENDING_DELETION - Denotes that the campaign has been requested to be deleted that is currently pending.\nREMOVED - Denotes that the campaign was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "TEXT_AD - Text-based ads that show up in the right column or top of the page on LinkedIn.\nSPONSORED_UPDATES - Native ads that promote a company's content updates in the LinkedIn feed.\nSPONSORED_INMAILS - Personalized messages with a call-to-action button delivered to a LinkedIn's member inbox.\nDYNAMIC - Ads that are dynamically personalized.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_cost_amount": {"name": "unit_cost_amount", "description": "This value is used as one of the following: amount to bid (for manual bidding), amount which is the target cost (for target cost bidding) per click,  impression, or other event depending on the pricing model, or cost cap (for cost cap bidding). The amount of money as a real number string.  The amount should be non-negative if the bidding strategy is manual, target cost, or cost cap bidding. The default is 0 with the currency code set to match that of the associated account.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_cost_currency_code": {"name": "unit_cost_currency_code", "description": "Amount to bid per click, impression, or other event depending on the pricing model. The default is 0 with the currency code set to match that of the associated account.  ISO currency code.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`campaign_history`", "created_at": 1660323536.867022}, "source.linkedin_source.linkedin.campaign_group_history": {"fqn": ["linkedin_source", "linkedin", "campaign_group_history"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.campaign_group_history", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "campaign_group_history", "source_name": "linkedin", "source_description": "", "loader": "fivetran", "identifier": "campaign_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a 'version' of a campaign group.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign group belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the campaign group was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "backfilled": {"name": "backfilled", "description": "Flag that denotes whether the campaign group was created organically or to backfill existing campaigns. This is a read-only field set by the system. Default = false", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_start": {"name": "run_schedule_start", "description": "Represents the inclusive (greater than or equal to) date when to start running the associated campaigns under this campaign group. This field is required.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_schedule_end": {"name": "run_schedule_end", "description": "Represents the exclusive (strictly less than) date when to stop running the associated campaigns under this campaign group. If this field is unset, it indicates an open range with no end date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of campaign group. Possible values are: ACTIVE - Denotes that the campaign group is capable of serving ads, subject to run date and budget limitations (as well as any other limitations at the account or campaign level). ARCHIVED - Denotes that the campaign group is presently inactive, and should mostly be hidden in the UI until un-archived. CANCELLED - Denotes that the campaign group has been permanently canceled and cannot be reactivated. Not a settable status. DRAFT - Denotes that the campaign group is in a preliminary state and should temporarily not be served. PAUSED - Denotes that the campaign group meets all requirements to be served, but temporarily should not be. PENDING_DELETION - Denotes that the campaign group has been requested to be deleted that is currently pending. REMOVED - Denoted that the campaign group was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`campaign_group_history`", "created_at": 1660323536.867402}, "source.linkedin_source.linkedin.account_history": {"fqn": ["linkedin_source", "linkedin", "account_history"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.account_history", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "account_history", "source_name": "linkedin", "source_description": "", "loader": "fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a 'version' of an account.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar (default).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notified_on_campaign_optimization": {"name": "notified_on_campaign_optimization", "description": "Boolean (default=false) indicating if the campaign contact is notified about campaign optimization opportunities", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notified_on_creative_approval": {"name": "notified_on_creative_approval", "description": "Boolean (default=false) indicating if the creative contact is notified when a creative has been reviewed and approved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notified_on_creative_rejection": {"name": "notified_on_creative_rejection", "description": "Boolean (default=false) indicating if the creative contact is notified when a creative has been rejected due to content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notified_on_end_of_campaign": {"name": "notified_on_end_of_campaign", "description": "Boolean (default=false) indicating if the campaign contact is notified when an associated campaign has been completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "ACTIVE - Account is active; this is the default state\nCANCELLED - Account has been permanently cancelled\nDRAFT - Account is in draft status, meaning it's not yet fully set up and it is not serving\nPENDING_DELETION - Denotes that the account has been requested to be deleted that is currently pending\nREMOVED - Denotes that the account was deleted, but must remain fetchable due to the existence of performance data.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "BUSINESS - This is the only value allowed when creating accounts through the API.\nENTERPRISE - This value cannot be used to create accounts through the API and is reserved for accounts created by LinkedIn's internal ad operations systems.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`account_history`", "created_at": 1660323536.8675709}, "source.linkedin_source.linkedin.ad_analytics_by_campaign": {"fqn": ["linkedin_source", "linkedin", "ad_analytics_by_campaign"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.ad_analytics_by_campaign", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "ad_analytics_by_campaign", "source_name": "linkedin", "source_description": "", "loader": "fivetran", "identifier": "ad_analytics_by_campaign", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_in_local_currency": {"name": "cost_in_local_currency", "description": "The cost of the ads in the local currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_in_usd": {"name": "cost_in_usd", "description": "The cost of the ads in the USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`ad_analytics_by_campaign`", "created_at": 1660323536.867717}, "source.google_ads_source.google_ads.ad_stats": {"fqn": ["google_ads_source", "google_ads", "ad_stats"], "database": "dbt-package-testing", "schema": "google_ads", "unique_id": "source.google_ads_source.google_ads.ad_stats", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "ad_stats", "source_name": "google_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_stats", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of an ad in Google Ads broken down to the ad network, device type, and ad group criterion.", "columns": {"customer_id": {"name": "customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group": {"name": "ad_group", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the Ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_network_type": {"name": "ad_network_type", "description": "The Google Ad network type used across the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "Account ad performance per unique device where the ads were served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_ad_group_criterion": {"name": "keyword_ad_group_criterion", "description": "The ad group which the keyword criterion resides.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_micros": {"name": "cost_micros", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`google_ads`.`ad_stats`", "created_at": 1660323536.867868}, "source.google_ads_source.google_ads.ad_history": {"fqn": ["google_ads_source", "google_ads", "ad_history"], "database": "dbt-package-testing", "schema": "google_ads", "unique_id": "source.google_ads_source.google_ads.ad_history", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "ad_history", "source_name": "google_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of an ad in Google Ads.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the Ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The display url of the ad that is being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the ad in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the Ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_urls": {"name": "final_urls", "description": "A list of urls that are used for the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`google_ads`.`ad_history`", "created_at": 1660323536.868011}, "source.google_ads_source.google_ads.ad_group_history": {"fqn": ["google_ads_source", "google_ads", "ad_group_history"], "database": "dbt-package-testing", "schema": "google_ads", "unique_id": "source.google_ads_source.google_ads.ad_group_history", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "ad_group_history", "source_name": "google_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of an ad group in Google Ads.", "columns": {"id": {"name": "id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the ad group in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`google_ads`.`ad_group_history`", "created_at": 1660323536.868154}, "source.google_ads_source.google_ads.campaign_history": {"fqn": ["google_ads_source", "google_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "google_ads", "unique_id": "source.google_ads_source.google_ads.campaign_history", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "campaign_history", "source_name": "google_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a campaign in Google Ads.", "columns": {"id": {"name": "id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_network_type": {"name": "ad_network_type", "description": "The Google Ad network type used across the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertising_channel_type": {"name": "advertising_channel_type", "description": "The type of advertising channel being used by the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertising_channel_subtype": {"name": "advertising_channel_subtype", "description": "The advertising channel subtype that is being used by the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "The end date of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "serving_status": {"name": "serving_status", "description": "Status of the ads and how they are currently being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "General status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tracking_url_template": {"name": "tracking_url_template", "description": "The tracking url template being used throughout the campaign ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "Account ad performance per unique device where the ads were served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`google_ads`.`campaign_history`", "created_at": 1660323536.868305}, "source.google_ads_source.google_ads.account_history": {"fqn": ["google_ads_source", "google_ads", "account_history"], "database": "dbt-package-testing", "schema": "google_ads", "unique_id": "source.google_ads_source.google_ads.account_history", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "account_history", "source_name": "google_ads", "source_description": "", "loader": "Fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a historical version of an account in Google Ads.", "columns": {"id": {"name": "id", "description": "The ID of the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency of the spend reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_tagging_enabled": {"name": "auto_tagging_enabled", "description": "Boolean indicating if auto tagging is enabled on the account ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone of the account ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "descriptive_name": {"name": "descriptive_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`google_ads`.`account_history`", "created_at": 1660323536.868445}, "source.google_ads_source.google_ads.ad_group_criterion_history": {"fqn": ["google_ads_source", "google_ads", "ad_group_criterion_history"], "database": "dbt-package-testing", "schema": "google_ads", "unique_id": "source.google_ads_source.google_ads.ad_group_criterion_history", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "ad_group_criterion_history", "source_name": "google_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_group_criterion_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a historical version of an ad group criterion in Google Ads.", "columns": {"id": {"name": "id", "description": "Unique identifier of the ad group criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_campaign_id": {"name": "base_campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of ad group criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The current status of the ad group criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_match_type": {"name": "keyword_match_type", "description": "The match type which dictate how closely the keyword needs to match with the user\u2019s search query so that the ad can be considered for the auction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_text": {"name": "keyword_text", "description": "The text used within the keyword criterion that is being matched against.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`google_ads`.`ad_group_criterion_history`", "created_at": 1660323536.86859}, "source.google_ads_source.google_ads.ad_group_stats": {"fqn": ["google_ads_source", "google_ads", "ad_group_stats"], "database": "dbt-package-testing", "schema": "google_ads", "unique_id": "source.google_ads_source.google_ads.ad_group_stats", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "ad_group_stats", "source_name": "google_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_group_stats", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of an ad group in Google Ads broken down to the ad network and device type.", "columns": {"customer_id": {"name": "customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_network_type": {"name": "ad_network_type", "description": "The Google Ad network type used across the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "Account ad performance per unique device where the ads were served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_micros": {"name": "cost_micros", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`google_ads`.`ad_group_stats`", "created_at": 1660323536.868733}, "source.google_ads_source.google_ads.campaign_stats": {"fqn": ["google_ads_source", "google_ads", "campaign_stats"], "database": "dbt-package-testing", "schema": "google_ads", "unique_id": "source.google_ads_source.google_ads.campaign_stats", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "campaign_stats", "source_name": "google_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_stats", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a campaign in Google Ads broken down to the ad network and device type.", "columns": {"customer_id": {"name": "customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_micros": {"name": "cost_micros", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`google_ads`.`campaign_stats`", "created_at": 1660323536.868876}, "source.google_ads_source.google_ads.keyword_stats": {"fqn": ["google_ads_source", "google_ads", "keyword_stats"], "database": "dbt-package-testing", "schema": "google_ads", "unique_id": "source.google_ads_source.google_ads.keyword_stats", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "keyword_stats", "source_name": "google_ads", "source_description": "", "loader": "Fivetran", "identifier": "keyword_stats", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a keyword in Google Ads.", "columns": {"customer_id": {"name": "customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_id": {"name": "_fivetran_id", "description": "The unique ID of the keyword record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_criterion_criterion_id": {"name": "ad_group_criterion_criterion_id", "description": "Reference to the ad group criterion used for the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_micros": {"name": "cost_micros", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`google_ads`.`keyword_stats`", "created_at": 1660323536.869022}, "source.google_ads_source.google_ads.account_stats": {"fqn": ["google_ads_source", "google_ads", "account_stats"], "database": "dbt-package-testing", "schema": "google_ads", "unique_id": "source.google_ads_source.google_ads.account_stats", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "account_stats", "source_name": "google_ads", "source_description": "", "loader": "Fivetran", "identifier": "account_stats", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of an account in Google Ads broken down to the ad network and device type.", "columns": {"customer_id": {"name": "customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_network_type": {"name": "ad_network_type", "description": "The Google Ad network type used across the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "Account ad performance per unique device where the ads were served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_micros": {"name": "cost_micros", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`google_ads`.`account_stats`", "created_at": 1660323536.869159}, "source.apple_search_ads_source.apple_search_ads.ad_group_history": {"fqn": ["apple_search_ads_source", "apple_search_ads", "ad_group_history"], "database": "dbt-package-testing", "schema": "apple_search_ads_integration_tests", "unique_id": "source.apple_search_ads_source.apple_search_ads.ad_group_history", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "models/src_apple_search_ads.yml", "original_file_path": "models/src_apple_search_ads.yml", "name": "ad_group_history", "source_name": "apple_search_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_group_history_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of an ad group in Apple Search Ads.", "columns": {"modification_time": {"name": "modification_time", "description": "Timestamp of when the ad group object was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Timestamp of designated ad group start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The designated ad group end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Organization ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The current status of the ad group, values include ENABLED and PAUSED.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`apple_search_ads_integration_tests`.`ad_group_history_data`", "created_at": 1660323536.869319}, "source.apple_search_ads_source.apple_search_ads.ad_group_report": {"fqn": ["apple_search_ads_source", "apple_search_ads", "ad_group_report"], "database": "dbt-package-testing", "schema": "apple_search_ads_integration_tests", "unique_id": "source.apple_search_ads_source.apple_search_ads.ad_group_report", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "models/src_apple_search_ads.yml", "original_file_path": "models/src_apple_search_ads.yml", "name": "ad_group_report", "source_name": "apple_search_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_group_report_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of an ad group in Apple Search Ads.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Date for daily report aggregation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of times your ad appeared in App Store search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_spend_amount": {"name": "local_spend_amount", "description": "The sum of costs associated with the number of impressions served; Spend is measured in the currency used in the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_spend_currency": {"name": "local_spend_currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed the respective app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Occurs when a user downloads respective app, deletes it, and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "The number of times ad was tapped by users within the reporting time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`apple_search_ads_integration_tests`.`ad_group_report_data`", "created_at": 1660323536.8694808}, "source.apple_search_ads_source.apple_search_ads.ad_history": {"fqn": ["apple_search_ads_source", "apple_search_ads", "ad_history"], "database": "dbt-package-testing", "schema": "apple_search_ads_integration_tests", "unique_id": "source.apple_search_ads_source.apple_search_ads.ad_history", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "models/src_apple_search_ads.yml", "original_file_path": "models/src_apple_search_ads.yml", "name": "ad_history", "source_name": "apple_search_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_history_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of an ad in Apple Search Ads.", "columns": {"creation_time": {"name": "creation_time", "description": "Timestamp of when ad was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modification_time": {"name": "modification_time", "description": "Timestamp of when the ad object was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "org_id": {"name": "org_id", "description": "Organization ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Ad name associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Ad ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The current status of the ad, values include ENABLED and PAUSED.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`apple_search_ads_integration_tests`.`ad_history_data`", "created_at": 1660323536.869638}, "source.apple_search_ads_source.apple_search_ads.ad_level_report": {"fqn": ["apple_search_ads_source", "apple_search_ads", "ad_level_report"], "database": "dbt-package-testing", "schema": "apple_search_ads_integration_tests", "unique_id": "source.apple_search_ads_source.apple_search_ads.ad_level_report", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "models/src_apple_search_ads.yml", "original_file_path": "models/src_apple_search_ads.yml", "name": "ad_level_report", "source_name": "apple_search_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_report_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of an ad in Apple Search Ads.", "columns": {"date": {"name": "date", "description": "Date for daily report aggregation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "Ad ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of times your ad appeared in App Store search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_spend_amount": {"name": "local_spend_amount", "description": "The sum of costs associated with the number of impressions served; Spend is measured in the currency used in the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_spend_currency": {"name": "local_spend_currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed the respective app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Occurs when a user downloads respective app, deletes it, and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "The number of times ad was tapped by users within the reporting time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`apple_search_ads_integration_tests`.`ad_report_data`", "created_at": 1660323536.869895}, "source.apple_search_ads_source.apple_search_ads.campaign_history": {"fqn": ["apple_search_ads_source", "apple_search_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "apple_search_ads_integration_tests", "unique_id": "source.apple_search_ads_source.apple_search_ads.campaign_history", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "models/src_apple_search_ads.yml", "original_file_path": "models/src_apple_search_ads.yml", "name": "campaign_history", "source_name": "apple_search_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a campaign in Apple Search Ads.", "columns": {"modification_time": {"name": "modification_time", "description": "Timestamp of when the campaign object was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The designated ad group start time (ad group with the earliest start time associated with this campaign).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The designated campaign end time (ad group with the latest start time associated with this campaign).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Campaign name for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Organization ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The current status of the campaign, values include ENABLED and PAUSED.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`apple_search_ads_integration_tests`.`campaign_history_data`", "created_at": 1660323536.870065}, "source.apple_search_ads_source.apple_search_ads.campaign_report": {"fqn": ["apple_search_ads_source", "apple_search_ads", "campaign_report"], "database": "dbt-package-testing", "schema": "apple_search_ads_integration_tests", "unique_id": "source.apple_search_ads_source.apple_search_ads.campaign_report", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "models/src_apple_search_ads.yml", "original_file_path": "models/src_apple_search_ads.yml", "name": "campaign_report", "source_name": "apple_search_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_report_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a campaign in Apple Search Ads.", "columns": {"id": {"name": "id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Date for daily report aggregation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of times your ad appeared in App Store search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_spend_amount": {"name": "local_spend_amount", "description": "The sum of costs associated with the number of impressions served; Spend is measured in the currency used in the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_spend_currency": {"name": "local_spend_currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed the respective app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Occurs when a user downloads respective app, deletes it, and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "The number of times ad was tapped by users within the reporting time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`apple_search_ads_integration_tests`.`campaign_report_data`", "created_at": 1660323536.870226}, "source.apple_search_ads_source.apple_search_ads.keyword_history": {"fqn": ["apple_search_ads_source", "apple_search_ads", "keyword_history"], "database": "dbt-package-testing", "schema": "apple_search_ads_integration_tests", "unique_id": "source.apple_search_ads_source.apple_search_ads.keyword_history", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "models/src_apple_search_ads.yml", "original_file_path": "models/src_apple_search_ads.yml", "name": "keyword_history", "source_name": "apple_search_ads", "source_description": "", "loader": "Fivetran", "identifier": "keyword_history_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a keyword in Apple Search Ads.", "columns": {"modification_time": {"name": "modification_time", "description": "Timestamp of when the keyword object was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Keyword ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount": {"name": "bid_amount", "description": "The bid amount to display your ad for the matching text value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_currency": {"name": "bid_currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "Controls how ads are matched to user searches; EXACT or BROAD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The current status of the keyword, values include ENABLED and PAUSED.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "The word or phrase to match in user searches, to show respective ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`apple_search_ads_integration_tests`.`keyword_history_data`", "created_at": 1660323536.870789}, "source.apple_search_ads_source.apple_search_ads.keyword_report": {"fqn": ["apple_search_ads_source", "apple_search_ads", "keyword_report"], "database": "dbt-package-testing", "schema": "apple_search_ads_integration_tests", "unique_id": "source.apple_search_ads_source.apple_search_ads.keyword_report", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "models/src_apple_search_ads.yml", "original_file_path": "models/src_apple_search_ads.yml", "name": "keyword_report", "source_name": "apple_search_ads", "source_description": "", "loader": "Fivetran", "identifier": "keyword_report_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a keyword in Apple Search Ads.", "columns": {"id": {"name": "id", "description": "Keyword ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Date for daily report aggregation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of times your ad appeared in App Store search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_spend_amount": {"name": "local_spend_amount", "description": "The sum of costs associated with the number of impressions served; Spend is measured in the currency used in the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_spend_currency": {"name": "local_spend_currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed the respective app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Occurs when a user downloads respective app, deletes it, and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "The number of times ad was tapped by users within the reporting time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`apple_search_ads_integration_tests`.`keyword_report_data`", "created_at": 1660323536.870965}, "source.apple_search_ads_source.apple_search_ads.organization": {"fqn": ["apple_search_ads_source", "apple_search_ads", "organization"], "database": "dbt-package-testing", "schema": "apple_search_ads_integration_tests", "unique_id": "source.apple_search_ads_source.apple_search_ads.organization", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "models/src_apple_search_ads.yml", "original_file_path": "models/src_apple_search_ads.yml", "name": "organization", "source_name": "apple_search_ads", "source_description": "", "loader": "Fivetran", "identifier": "organization_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents an organization in Apple Search Ads.", "columns": {"organization_id": {"name": "organization_id", "description": "Organization ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Specified currency for respective organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_model": {"name": "payment_model", "description": "Values include 'LOC', 'PAYG' or <empty string> (payment method hasn't been set).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Name of organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "Organization default timezone; values can be ORTZ or UTC.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`apple_search_ads_integration_tests`.`organization_data`", "created_at": 1660323536.871124}, "source.apple_search_ads_source.apple_search_ads.search_term_report": {"fqn": ["apple_search_ads_source", "apple_search_ads", "search_term_report"], "database": "dbt-package-testing", "schema": "apple_search_ads_integration_tests", "unique_id": "source.apple_search_ads_source.apple_search_ads.search_term_report", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "models/src_apple_search_ads.yml", "original_file_path": "models/src_apple_search_ads.yml", "name": "search_term_report", "source_name": "apple_search_ads", "source_description": "", "loader": "Fivetran", "identifier": "search_term_report_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a search term in Apple Search Ads.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "A Fivetran internal unique id that helps us avoid duplicate rows in primary keyless tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Ad group ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Date for daily report aggregation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount_amount": {"name": "bid_amount_amount", "description": "The bid amount to display your ad for the matching text value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount_currency": {"name": "bid_amount_currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword": {"name": "keyword", "description": "The word or phrase to match in user searches, to show respective ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_display_status": {"name": "keyword_display_status", "description": "The keyword display status can either be ACTIVE or PAUSED.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "Keyword ID associated with the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_spend_amount": {"name": "local_spend_amount", "description": "The sum of costs associated with the number of impressions served; Spend is measured in the currency used in the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_spend_currency": {"name": "local_spend_currency", "description": "This currency value should match the respective organization's currency value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "Controls how ads are matched to user searches; values include EXACT, BROAD or AUTO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_term_source": {"name": "search_term_source", "description": "The search term source can either be TARGETED or AUTO; if this value is AUTO so will match_type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_term_text": {"name": "search_term_text", "description": "The word or phrase to match of user searches.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of times your ad appeared in App Store search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taps": {"name": "taps", "description": "The number of times ad was tapped by users within the reporting time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_downloads": {"name": "new_downloads", "description": "App downloads from new users who have never before installed the respective app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redownloads": {"name": "redownloads", "description": "Occurs when a user downloads respective app, deletes it, and downloads the same app again following a tap on an ad on the App Store, or downloads the same app to an additional device.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": "True and True"}, "patch_path": null, "unrendered_config": {"enabled": "True and True"}, "relation_name": "`dbt-package-testing`.`apple_search_ads_integration_tests`.`search_term_report_data`", "created_at": 1660323536.871307}, "source.pinterest_source.pinterest_ads.pin_promotion_report": {"fqn": ["pinterest_source", "pinterest_ads", "pin_promotion_report"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.pin_promotion_report", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "pin_promotion_report", "source_name": "pinterest_ads", "source_description": "", "loader": "Fivetran", "identifier": "pin_promotion_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a Pinterest Pin promotion.", "columns": {"date": {"name": "date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_1": {"name": "impression_1", "description": "The number of paid pin impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_2": {"name": "impression_2", "description": "The number of earned pin impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_1": {"name": "clickthrough_1", "description": "The number of paid pin clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_2": {"name": "clickthrough_2", "description": "The number of earned outbound clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_in_micro_dollar": {"name": "spend_in_micro_dollar", "description": "The amount of spend in micro dollars that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`pin_promotion_report`", "created_at": 1660323536.8714612}, "source.pinterest_source.pinterest_ads.pin_promotion_history": {"fqn": ["pinterest_source", "pinterest_ads", "pin_promotion_history"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.pin_promotion_history", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "pin_promotion_history", "source_name": "pinterest_ads", "source_description": "", "loader": "Fivetran", "identifier": "pin_promotion_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest Pin promotion.", "columns": {"id": {"name": "id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Pin creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_url": {"name": "destination_url", "description": "Pin destination URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Pin promotion name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_id": {"name": "pin_id", "description": "Original pin ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Pin promotion. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "The creative type. \nOne of \"APP\", \"APP_VIDEO\", \"BOARD\", \"CAROUSEL\", \"CINEMATIC\", \"COMMERCE\", \"MAX_VIDEO\", \"NATIVE_VIDEO\", \"REGULAR\", \n\"SEARCH_PROMINENCE\", \"SEARCH_PROMINENCE_CAROUSEL\", \"SHOPPING\", \"SHOP_THE_PIN\", \"THIRD_PARTY\", or \"VIDEO\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`pin_promotion_history`", "created_at": 1660323536.871607}, "source.pinterest_source.pinterest_ads.campaign_history": {"fqn": ["pinterest_source", "pinterest_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.campaign_history", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "campaign_history", "source_name": "pinterest_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest Campaign.", "columns": {"id": {"name": "id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Campaign creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Campaign name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Campaign. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`campaign_history`", "created_at": 1660323536.871743}, "source.pinterest_source.pinterest_ads.ad_group_history": {"fqn": ["pinterest_source", "pinterest_ads", "ad_group_history"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.ad_group_history", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "ad_group_history", "source_name": "pinterest_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest Ad Group.", "columns": {"id": {"name": "id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Ad group creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Ad group. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Ad group start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "Ad group end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`ad_group_history`", "created_at": 1660323536.871881}, "source.pinterest_source.pinterest_ads.ad_group_report": {"fqn": ["pinterest_source", "pinterest_ads", "ad_group_report"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.ad_group_report", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "ad_group_report", "source_name": "pinterest_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_group_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a Pinterest ad group.", "columns": {"date": {"name": "date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_1": {"name": "impression_1", "description": "The number of paid pin impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_2": {"name": "impression_2", "description": "The number of earned pin impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_1": {"name": "clickthrough_1", "description": "The number of paid pin clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_2": {"name": "clickthrough_2", "description": "The number of earned outbound clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_in_micro_dollar": {"name": "spend_in_micro_dollar", "description": "The amount of spend in micro dollars that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`ad_group_report`", "created_at": 1660323536.87203}, "source.pinterest_source.pinterest_ads.advertiser_history": {"fqn": ["pinterest_source", "pinterest_ads", "advertiser_history"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.advertiser_history", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "advertiser_history", "source_name": "pinterest_ads", "source_description": "", "loader": "Fivetran", "identifier": "advertiser_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest advertiser.", "columns": {"id": {"name": "id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_profile_status": {"name": "billing_profile_status", "description": "Status of the billing profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_type": {"name": "billing_type", "description": "The billing type of the advertiser. Will typically be CREDIT_CARD or INVOICE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country code where the advertiser is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Timestamp of when a record was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency code which the a", "meta": {}, "data_type": null, "quote": null, "tags": []}, "merchant_id": {"name": "merchant_id", "description": "Unique ID of the merchant associated with the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Unique identifier of the owner user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_time": {"name": "updated_time", "description": "Timestamp of when a record was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`advertiser_history`", "created_at": 1660323536.872181}, "source.pinterest_source.pinterest_ads.advertiser_report": {"fqn": ["pinterest_source", "pinterest_ads", "advertiser_report"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.advertiser_report", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "advertiser_report", "source_name": "pinterest_ads", "source_description": "", "loader": "Fivetran", "identifier": "advertiser_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a Pinterest advertiser.", "columns": {"date": {"name": "date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_1": {"name": "impression_1", "description": "The number of paid pin impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_2": {"name": "impression_2", "description": "The number of earned pin impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_1": {"name": "clickthrough_1", "description": "The number of paid pin clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_2": {"name": "clickthrough_2", "description": "The number of earned outbound clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_in_micro_dollar": {"name": "spend_in_micro_dollar", "description": "The amount of spend in micro dollars that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`advertiser_report`", "created_at": 1660323536.872324}, "source.pinterest_source.pinterest_ads.campaign_report": {"fqn": ["pinterest_source", "pinterest_ads", "campaign_report"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.campaign_report", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "campaign_report", "source_name": "pinterest_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a Pinterest campaign.", "columns": {"date": {"name": "date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_1": {"name": "impression_1", "description": "The number of paid pin impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_2": {"name": "impression_2", "description": "The number of earned pin impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_1": {"name": "clickthrough_1", "description": "The number of paid pin clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_2": {"name": "clickthrough_2", "description": "The number of earned outbound clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_in_micro_dollar": {"name": "spend_in_micro_dollar", "description": "The amount of spend in micro dollars that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`campaign_report`", "created_at": 1660323536.872478}, "source.pinterest_source.pinterest_ads.keyword_history": {"fqn": ["pinterest_source", "pinterest_ads", "keyword_history"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.keyword_history", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "keyword_history", "source_name": "pinterest_ads", "source_description": "", "loader": "Fivetran", "identifier": "keyword_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest keyword.", "columns": {"id": {"name": "id", "description": "Unique identifier of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The text value that makes upd the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_id": {"name": "_fivetran_id", "description": "The unique identifier of the record within the Fivetran synced table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived": {"name": "archived", "description": "Boolean indicating if the keyword is archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid": {"name": "bid", "description": "Bid amount set for the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "Type of match the keyword is tied to. Either Exact or Broad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_type": {"name": "parent_type", "description": "Identifier of what grain the parent type is. Ad group or campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`keyword_history`", "created_at": 1660323536.8726249}, "source.pinterest_source.pinterest_ads.keyword_report": {"fqn": ["pinterest_source", "pinterest_ads", "keyword_report"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.keyword_report", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "keyword_report", "source_name": "pinterest_ads", "source_description": "", "loader": "Fivetran", "identifier": "keyword_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a Pinterest key word.", "columns": {"date": {"name": "date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keyword_id": {"name": "keyword_id", "description": "Unique identifier of the keyword.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "Name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_1": {"name": "impression_1", "description": "The number of paid pin impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_2": {"name": "impression_2", "description": "The number of earned pin impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_1": {"name": "clickthrough_1", "description": "The number of paid pin clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_2": {"name": "clickthrough_2", "description": "The number of earned outbound clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_in_micro_dollar": {"name": "spend_in_micro_dollar", "description": "The amount of spend in micro dollars that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`keyword_report`", "created_at": 1660323536.872776}, "source.tiktok_ads_source.tiktok_ads.advertiser": {"fqn": ["tiktok_ads_source", "tiktok_ads", "advertiser"], "database": "dbt-package-testing", "schema": "tiktok_ads", "unique_id": "source.tiktok_ads_source.tiktok_ads.advertiser", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "models/src_tiktok_ads.yml", "original_file_path": "models/src_tiktok_ads.yml", "name": "advertiser", "source_name": "tiktok_ads", "source_description": "", "loader": "fivetran", "identifier": "advertiser", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents data for one advertiser.", "columns": {"id": {"name": "id", "description": "Advertiser ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address": {"name": "address", "description": "Advertiser address information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Account available balance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "Advertiser's company name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contacter": {"name": "contacter", "description": "Contact Person", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The advertiser's country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "create_time": {"name": "create_time", "description": "Advertiser's create time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Type of currency used by advertisers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Brand description, i.e. promotional content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Advertiser contact email, desensitised data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry": {"name": "industry", "description": "Advertiser industry category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "Language used by advertisers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "license_no": {"name": "license_no", "description": "License number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "license_url": {"name": "license_url", "description": "License preview address, the link is valid for an hour by default.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Advertiser name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Contact mobile number, desensitised data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promotion_area": {"name": "promotion_area", "description": "Operation area", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for rejection", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "Advertiser role", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Advertiser status", "meta": {}, "data_type": null, "quote": null, "tags": []}, "telephone": {"name": "telephone", "description": "Fixed phone number, desensitised data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Ad account time zone including GMT offset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`tiktok_ads`.`advertiser`", "created_at": 1660323536.872961}, "source.tiktok_ads_source.tiktok_ads.campaign_history": {"fqn": ["tiktok_ads_source", "tiktok_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "tiktok_ads", "unique_id": "source.tiktok_ads_source.tiktok_ads.campaign_history", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "models/src_tiktok_ads.yml", "original_file_path": "models/src_tiktok_ads.yml", "name": "campaign_history", "source_name": "tiktok_ads", "source_description": "", "loader": "fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a TikTok campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Campaign ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Time the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget": {"name": "budget", "description": "Campaign budget", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_mode": {"name": "budget_mode", "description": "Budget type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Campaign name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "Campaign Type, indicates the campaign is a regular campaign or iOS 14 campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "create_time": {"name": "create_time", "description": "Time at which the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_new_structure": {"name": "is_new_structure", "description": "Whether the campaign is a new structure (for the same campaign, the structure of campaign, adgroups and ads are the same)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective_type": {"name": "objective_type", "description": "Advertising objective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opt_status": {"name": "opt_status", "description": "Operation status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Campaign status", "meta": {}, "data_type": null, "quote": null, "tags": []}, "split_test_variable": {"name": "split_test_variable", "description": "Split Test variables. Optional values; TARGETING, BIDDING_OPTIMIZATION , CREATIVE.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`tiktok_ads`.`campaign_history`", "created_at": 1660323536.873224}, "source.tiktok_ads_source.tiktok_ads.adgroup_history": {"fqn": ["tiktok_ads_source", "tiktok_ads", "adgroup_history"], "database": "dbt-package-testing", "schema": "tiktok_ads", "unique_id": "source.tiktok_ads_source.tiktok_ads.adgroup_history", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "models/src_tiktok_ads.yml", "original_file_path": "models/src_tiktok_ads.yml", "name": "adgroup_history", "source_name": "tiktok_ads", "source_description": "", "loader": "fivetran", "identifier": "adgroup_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a TikTok ad group.", "columns": {"adgroup_id": {"name": "adgroup_id", "description": "Ad group ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Time the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The Ad group's campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_categories": {"name": "action_categories", "description": "IDs of the action categories (behaviors) that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_days": {"name": "action_days", "description": "The number of days of the time period to include action from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adgroup_name": {"name": "adgroup_name", "description": "Ad group name. Character limit is 512 and cannot contain emoji.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "age": {"name": "age", "description": "Age groups you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "android_osv": {"name": "android_osv", "description": "Minimum Android version.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_download_url": {"name": "app_download_url", "description": "App download link", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The Application id of the promoted app", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "App name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_type": {"name": "app_type", "description": "App type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "audience": {"name": "audience", "description": "A list of audience IDs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "audience_type": {"name": "audience_type", "description": "Audience Type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid": {"name": "bid", "description": "CPC, CPM bidding, oCPM learning bidding", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_type": {"name": "bid_type", "description": "Bidding Strategy", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_event": {"name": "billing_event", "description": "Bid method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget": {"name": "budget", "description": "Ad budget. Returns 0.0 when Campaign Budget Optimization (budget_optimize_switch) is on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_mode": {"name": "budget_mode", "description": "Budget mode. This field will be ignored when Campaign Budget Optimization (budget_optimize_switch) is enabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carriers": {"name": "carriers", "description": "Carriers that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Ad group category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_tracking_url": {"name": "click_tracking_url", "description": "Click monitoring URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connection_type": {"name": "connection_type", "description": "Device connection types that you want to target. Default; unlimited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_bid": {"name": "conversion_bid", "description": "oCPM conversion bid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpv_video_duration": {"name": "cpv_video_duration", "description": "Video playback duration, required if optimize_goal is VIDEO_VIEW.  Allowed values; SIX_SECONDS (video playback 6s), TWO_SECONDS (video playback 2s)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_material_mode": {"name": "creative_material_mode", "description": "Creative delivery mode.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dayparting": {"name": "dayparting", "description": "Ad delivery period, the default is always and the format is 48 * 7 character string, represented by 0 or 1. > That is, with half an hour as the minimum granularity, a day (24 hours) is divided by the minimum granularity(30 mins) from Monday to Sunday. Resulting in a 48*7 format.0 represents not to be delivered, 1 represents delivery. no transmission, full transmission 0, full transmission 1 all represent full time delivery", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deep_bid_type": {"name": "deep_bid_type", "description": "Bidding strategy for in-app events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deep_cpabid": {"name": "deep_cpabid", "description": "Deep bid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deep_external_action": {"name": "deep_external_action", "description": "Deep conversion event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "Display name of ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enable_inventory_filter": {"name": "enable_inventory_filter", "description": "Inventory filtering (Unsafe videos will not be displayed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "excluded_audience": {"name": "excluded_audience", "description": "A list of audience ID to be excluded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_action": {"name": "external_action", "description": "Conversion event for the ad group. It is required when the promoted object is an app with tracking urls, or when pixel_id is specified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fallback_type": {"name": "fallback_type", "description": "Fallback Type. If the audience do not have the app installed, you can have them fall back to install the app, or to view a specific web page. Not applicable for Deferred Deeplink. Allowed values; APP_INSTALL, WEBSITE, UNSET. If website is chosen, you need to specify the url via landing_page_url field.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency": {"name": "frequency", "description": "frequency, together with frequency_schedule, controls how often people see your ad (only available for REACH ads).  For example, frequency = 2 frequency_schedule = 3 means \"show ads no more than twice every 3 day\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency_schedule": {"name": "frequency_schedule", "description": "frequency, together with frequency, controls how often people see your ad (only available for REACH ads).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_tracking_url": {"name": "impression_tracking_url", "description": "Display monitoring URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interest_category_v2": {"name": "interest_category_v2", "description": "Interest classification. If the interest is specified, users that do not meet interest target will be excluded during delivery.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ios_osv": {"name": "ios_osv", "description": "Minimum iOS version.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_comment_disable": {"name": "is_comment_disable", "description": "Whether to allow comments on your ads on TikTok, Vigo, Helo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_hfss": {"name": "is_hfss", "description": "Whether the promoted content is HFSS foods (foods that are high in fat, salt, or sugar).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_new_structure": {"name": "is_new_structure", "description": "Whether the campaign is a new structure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "keywords": {"name": "keywords", "description": "Keywords used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_url": {"name": "landing_page_url", "description": "Landing page URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "languages": {"name": "languages", "description": "Codes of the languages that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "IDs of the locations that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "open_url": {"name": "open_url", "description": "The specific location where you want your audience to go if they have your app installed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "open_url_type": {"name": "open_url_type", "description": "The open URL type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "operation_system": {"name": "operation_system", "description": "Device operating systems that you want to target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opt_status": {"name": "opt_status", "description": "Operation status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimize_goal": {"name": "optimize_goal", "description": "Optimization goal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pacing": {"name": "pacing", "description": "You can choose between PACING_MODE_SMOOTH and PACING_MODE_FAST. For PACING_MODE_SMOOTH, the budget is allocated evenly within the scheduled time.  PACING_MODE_FAST would consume budget and produce results as soon as possible. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package": {"name": "package", "description": "Package name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pangle_block_app_list_id": {"name": "pangle_block_app_list_id", "description": "Pangle app block list ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pixel_id": {"name": "pixel_id", "description": "Pixel ID. Only application for landing pages.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "The apps where you want to deliver your ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement_type": {"name": "placement_type", "description": "Placement type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_image": {"name": "profile_image", "description": "Avatar URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedule_end_time": {"name": "schedule_end_time", "description": "Ad delivery end time (UTC+0). Format should be YYYY-MM-DD HH:MM:SS", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedule_start_time": {"name": "schedule_start_time", "description": "Ad delivery start time (UTC+0). Format should be YYYY-MM-DD HH:MM:SS", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedule_type": {"name": "schedule_type", "description": "The schedule type, which can be either SCHEDULE_START_END or SCHEDULE_FROM_NOW.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "skip_learning_phase": {"name": "skip_learning_phase", "description": "Whether to skip the learning stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statistic_type": {"name": "statistic_type", "description": "conversion bid statistic type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Ad group status", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_actions": {"name": "video_actions", "description": "Number of video actions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_download": {"name": "video_download", "description": "Whether users can download your video ads on TikTok(cannot be updated once created).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`tiktok_ads`.`adgroup_history`", "created_at": 1660323536.873533}, "source.tiktok_ads_source.tiktok_ads.ad_history": {"fqn": ["tiktok_ads_source", "tiktok_ads", "ad_history"], "database": "dbt-package-testing", "schema": "tiktok_ads", "unique_id": "source.tiktok_ads_source.tiktok_ads.ad_history", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "models/src_tiktok_ads.yml", "original_file_path": "models/src_tiktok_ads.yml", "name": "ad_history", "source_name": "tiktok_ads", "source_description": "", "loader": "fivetran", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of a TikTok ad.", "columns": {"ad_id": {"name": "ad_id", "description": "Ad ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Time the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adgroup_id": {"name": "adgroup_id", "description": "Ad group ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Advertiser ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Campaign ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Ad Name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_text": {"name": "ad_text", "description": "The ad text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "The display name of app download ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_to_action": {"name": "call_to_action", "description": "Call to action values.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_tracking_url": {"name": "click_tracking_url", "description": "Click monitoring URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "create_time": {"name": "create_time", "description": "Time at which the ad was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "The display name of landing page or pure exposure ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "image_ids": {"name": "image_ids", "description": "A list of image IDs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_tracking_url": {"name": "impression_tracking_url", "description": "Display monitoring URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_aco": {"name": "is_aco", "description": "Whether the ad is an automated ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_creative_authorized": {"name": "is_creative_authorized", "description": "Whether you grant displaying some of your ads in our TikTok For Business Creative Center. Only valid for non-US advertisers, the default value is false.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_new_structure": {"name": "is_new_structure", "description": "Whether the campaign is a new structure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_url": {"name": "landing_page_url", "description": "Landing page URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "open_url": {"name": "open_url", "description": "The specific location where you want your audience to go if they have your app installed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opt_status": {"name": "opt_status", "description": "Operation status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "playable_url": {"name": "playable_url", "description": "Playable material url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_image": {"name": "profile_image", "description": "Avatar URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Ad status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_id": {"name": "video_id", "description": "The video ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`tiktok_ads`.`ad_history`", "created_at": 1660323536.8737128}, "source.tiktok_ads_source.tiktok_ads.ad_report_hourly": {"fqn": ["tiktok_ads_source", "tiktok_ads", "ad_report_hourly"], "database": "dbt-package-testing", "schema": "tiktok_ads", "unique_id": "source.tiktok_ads_source.tiktok_ads.ad_report_hourly", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "models/src_tiktok_ads.yml", "original_file_path": "models/src_tiktok_ads.yml", "name": "ad_report_hourly", "source_name": "tiktok_ads", "source_description": "", "loader": "fivetran", "identifier": "ad_report_hourly", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents data for each ad for each hour.", "columns": {"ad_id": {"name": "ad_id", "description": "Ad id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stat_time_hour": {"name": "stat_time_hour", "description": "Hour of activity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_conversion": {"name": "cost_per_conversion", "description": "The average amount of money you've spent on a conversion.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_conversion": {"name": "real_time_conversion", "description": "The number of times your ad achieved an outcome,  based on the objective and settings you selected. (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpc": {"name": "cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_play_actions": {"name": "video_play_actions", "description": "The number of times your video starts to play. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_rate": {"name": "conversion_rate", "description": "The percentage of results you received out of all the clicks of your ads.   (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result": {"name": "result", "description": "The number of times your ad achieved an outcome, based on the optimization goal  you selected. As one campaign may have a number of different optimization goals,  this statistic is not supported for campaigns. Please go to ad groups or ads to view the results.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of times your ads were on screen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_cost_per_result": {"name": "real_time_cost_per_result", "description": "As a campaign may have different optimization goals, the total number of result   is not supported in campaign section now, please go to the ad group section to view the cost per Result. (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.  As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns.  Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_result": {"name": "real_time_result", "description": "The number of times your ad achieved an outcome, based on the optimization goal you selected.  As a campaign may have different optimization goals, the total number of result is not supported in campaign section now , Please go to the ad group section to view the result. (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_view_p_100": {"name": "video_view_p_100", "description": "The number of times your video was played at 100% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_conversion_rate": {"name": "real_time_conversion_rate", "description": "The percentage of results you received out of all the clicks of your ads. (The total count is based on when the conversion actually happened.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_secondary_goal_result": {"name": "cost_per_secondary_goal_result", "description": "The average cost for each secondary goal result from your adverts. As one campaign may have a number of different secondary goals,  this statistic is not supported for campaigns. Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "secondary_goal_result_rate": {"name": "secondary_goal_result_rate", "description": "The percentage of secondary goal results you achieved out of all of the installs of your adverts. As one campaign may have a number  of different secondary goals, this statistic is not supported for campaigns. Please go to ad groups or ads to view. The total count is calculated based on the time each ad impression occurred.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on your ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_1000_reached": {"name": "cost_per_1000_reached", "description": "The average cost to reach 1,000 unique users. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_cost_per_conversion": {"name": "real_time_cost_per_conversion", "description": "The average amount of money you've spent on a conversion. (The total count is based on when the conversion actually happened.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits_rate": {"name": "profile_visits_rate", "description": "The rate of profile visits per impression the paid ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play": {"name": "average_video_play", "description": "The average time your video was played per single video view, including any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits the ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpm": {"name": "cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctr": {"name": "ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of new followers that were gained within 1 day of a user seeing a paid ad. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result_rate": {"name": "result_rate", "description": "The percentage of results you achieved out of all of the views/clicks on your ads. As one campaign may have a number  of different optimization goals, this statistic is not supported for campaigns. Please go to ad groups or ads to view the result rate.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "secondary_goal_result": {"name": "secondary_goal_result", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected. As one campaign may have a number  of different secondary goals, this statistic is not supported for campaigns. Please go to ad groups or ads to view. (The total count is  calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_result": {"name": "cost_per_result", "description": "The average cost for each result from your ads. As one campaign may have a number of different optimization goals, this statistic  is not supported for campaigns. Please go to ad groups or ads to view the cost per result. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play_per_user": {"name": "average_video_play_per_user", "description": "The average time your video was played per person, including any time spent replaying the video. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_result_rate": {"name": "real_time_result_rate", "description": "As a campaign may have different optimization goals, the total number of result is not supported in campaign section now ,Please go to the ad group section to view the Result Rate. (The total count is based on when the conversion actually happened.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The estimated total amount of money you've spent on your campaign, ad group or ad during its schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`tiktok_ads`.`ad_report_hourly`", "created_at": 1660323536.873914}, "source.tiktok_ads_source.tiktok_ads.campaign_report_hourly": {"fqn": ["tiktok_ads_source", "tiktok_ads", "campaign_report_hourly"], "database": "dbt-package-testing", "schema": "tiktok_ads", "unique_id": "source.tiktok_ads_source.tiktok_ads.campaign_report_hourly", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "models/src_tiktok_ads.yml", "original_file_path": "models/src_tiktok_ads.yml", "name": "campaign_report_hourly", "source_name": "tiktok_ads", "source_description": "", "loader": "fivetran", "identifier": "campaign_report_hourly", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents data for each campaign for each hour.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Campaign id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stat_time_hour": {"name": "stat_time_hour", "description": "Hour of activity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_conversion": {"name": "cost_per_conversion", "description": "The average amount of money you've spent on a conversion.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_conversion": {"name": "real_time_conversion", "description": "The number of times your ad achieved an outcome,  based on the objective and settings you selected. (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpc": {"name": "cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_play_actions": {"name": "video_play_actions", "description": "The number of times your video starts to play. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_rate": {"name": "conversion_rate", "description": "The percentage of results you received out of all the clicks of your ads.   (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result": {"name": "result", "description": "The number of times your ad achieved an outcome, based on the optimization goal  you selected. As one campaign may have a number of different optimization goals,  this statistic is not supported for campaigns. Please go to ad groups or ads to view the results.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of times your ads were on screen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_cost_per_result": {"name": "real_time_cost_per_result", "description": "As a campaign may have different optimization goals, the total number of result  is not supported in campaign section now, please go to the ad group section to view the cost  per Result. (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.  As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns. Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_result": {"name": "real_time_result", "description": "The number of times your ad achieved an outcome, based on the optimization goal you selected.  As a campaign may have different optimization goals, the total number of result is not supported in campaign section now , Please go to the ad group section to view the result. (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_view_p_100": {"name": "video_view_p_100", "description": "The number of times your video was played at 100% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_conversion_rate": {"name": "real_time_conversion_rate", "description": "The percentage of results you received out of all the clicks of your ads. (The total count is based on when the conversion actually happened.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_secondary_goal_result": {"name": "cost_per_secondary_goal_result", "description": "The average cost for each secondary goal result from your adverts. As one campaign may have a number of different secondary goals,  this statistic is not supported for campaigns. Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "secondary_goal_result_rate": {"name": "secondary_goal_result_rate", "description": "The percentage of secondary goal results you achieved out of all of the installs of your adverts. As one campaign may have a number  of different secondary goals, this statistic is not supported for campaigns. Please go to ad groups or ads to view. The total count is calculated based on the time each ad impression occurred.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on your ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_1000_reached": {"name": "cost_per_1000_reached", "description": "The average cost to reach 1,000 unique users. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_cost_per_conversion": {"name": "real_time_cost_per_conversion", "description": "The average amount of money you've spent on a conversion. (The total count is based on when the conversion actually happened.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits_rate": {"name": "profile_visits_rate", "description": "The rate of profile visits per impression the paid ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play": {"name": "average_video_play", "description": "The average time your video was played per single video view, including any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits the ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpm": {"name": "cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctr": {"name": "ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of new followers that were gained within 1 day of a user seeing a paid ad. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result_rate": {"name": "result_rate", "description": "The percentage of results you achieved out of all of the views/clicks on your ads. As one campaign may have a number  of different optimization goals, this statistic is not supported for campaigns. Please go to ad groups or ads to view the result rate.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "secondary_goal_result": {"name": "secondary_goal_result", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected. As one campaign may have a number  of different secondary goals, this statistic is not supported for campaigns. Please go to ad groups or ads to view. (The total count is  calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_result": {"name": "cost_per_result", "description": "The average cost for each result from your ads. As one campaign may have a number of different optimization goals, this statistic  is not supported for campaigns. Please go to ad groups or ads to view the cost per result. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play_per_user": {"name": "average_video_play_per_user", "description": "The average time your video was played per person, including any time spent replaying the video. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_result_rate": {"name": "real_time_result_rate", "description": "As a campaign may have different optimization goals, the total number of result is not supported in campaign section now ,Please go to the ad group section to  view the Result Rate. (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The estimated total amount of money you've spent on your campaign, ad group or ad during its schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`tiktok_ads`.`campaign_report_hourly`", "created_at": 1660323536.874112}, "source.tiktok_ads_source.tiktok_ads.adgroup_report_hourly": {"fqn": ["tiktok_ads_source", "tiktok_ads", "adgroup_report_hourly"], "database": "dbt-package-testing", "schema": "tiktok_ads", "unique_id": "source.tiktok_ads_source.tiktok_ads.adgroup_report_hourly", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "models/src_tiktok_ads.yml", "original_file_path": "models/src_tiktok_ads.yml", "name": "adgroup_report_hourly", "source_name": "tiktok_ads", "source_description": "", "loader": "fivetran", "identifier": "adgroup_report_hourly", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents data for each ad group for each hour.", "columns": {"adgroup_id": {"name": "adgroup_id", "description": "Ad group id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stat_time_hour": {"name": "stat_time_hour", "description": "Hour of activity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_conversion": {"name": "cost_per_conversion", "description": "The average amount of money you've spent on a conversion.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_conversion": {"name": "real_time_conversion", "description": "The number of times your ad achieved an outcome,  based on the objective and settings you selected. (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpc": {"name": "cpc", "description": "The average amount of money you've spent on a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_play_actions": {"name": "video_play_actions", "description": "The number of times your video starts to play. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_rate": {"name": "conversion_rate", "description": "The percentage of results you received out of all the clicks of your ads. (The total count is calculated based on the time each ad impression occurred.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_75": {"name": "video_views_p_75", "description": "The number of times your video was played at 75% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result": {"name": "result", "description": "The number of times your ad achieved an outcome, based on the optimization goal  you selected. As one campaign may have a number of different optimization goals,  this statistic is not supported for campaigns. Please go to ad groups or ads to view the results.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_50": {"name": "video_views_p_50", "description": "The number of times your video was played at 50% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of times your ads were on screen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_cost_per_result": {"name": "real_time_cost_per_result", "description": "As a campaign may have different optimization goals, the total number of result  is not supported in campaign section now, please go to the ad group section to view the cost  per Result. (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion": {"name": "conversion", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected.  As one campaign may have a number of different secondary goals, this statistic is not supported for campaigns.  Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_result": {"name": "real_time_result", "description": "The number of times your ad achieved an outcome, based on the optimization goal you selected.  As a campaign may have different optimization goals, the total number of result is not supported in campaign section now , Please go to the ad group section to view the result. (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_view_p_100": {"name": "video_view_p_100", "description": "The number of times your video was played at 100% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_conversion_rate": {"name": "real_time_conversion_rate", "description": "The percentage of results you received out of all the clicks of your ads. (The total count is based on when the conversion actually happened.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_secondary_goal_result": {"name": "cost_per_secondary_goal_result", "description": "The average cost for each secondary goal result from your adverts. As one campaign may have a number of different secondary goals,  this statistic is not supported for campaigns. Please go to ad groups or ads to view. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "secondary_goal_result_rate": {"name": "secondary_goal_result_rate", "description": "The percentage of secondary goal results you achieved out of all of the installs of your adverts. As one campaign may have a number  of different secondary goals, this statistic is not supported for campaigns. Please go to ad groups or ads to view. The total count is calculated based on the time each ad impression occurred.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on your ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_1000_reached": {"name": "cost_per_1000_reached", "description": "The average cost to reach 1,000 unique users. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_p_25": {"name": "video_views_p_25", "description": "The number of times your video was played at 25% of its length. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of unique users who saw your ads at least once. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_cost_per_conversion": {"name": "real_time_cost_per_conversion", "description": "The average amount of money you've spent on a conversion. (The total count is based on when the conversion actually happened.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits_rate": {"name": "profile_visits_rate", "description": "The rate of profile visits per impression the paid ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play": {"name": "average_video_play", "description": "The average time your video was played per single video view, including any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_visits": {"name": "profile_visits", "description": "The number of profile visits the ad drove during the campaign. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpm": {"name": "cpm", "description": "The average amount of money you've spent per 1,000 impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctr": {"name": "ctr", "description": "The percentage of times people saw your ad and performed a click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_2_s": {"name": "video_watched_2_s", "description": "The number of times your video played for at least 2 seconds. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "The number of new followers that were gained within 1 day of a user seeing a paid ad. This metric is only for Boosted TikToks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result_rate": {"name": "result_rate", "description": "The percentage of results you achieved out of all of the views/clicks on your ads. As one campaign may have a number  of different optimization goals, this statistic is not supported for campaigns. Please go to ad groups or ads to view the result rate.  (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_watched_6_s": {"name": "video_watched_6_s", "description": "The number of times your video played for at least 6 seconds, or completely played. Replays will not be counted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "secondary_goal_result": {"name": "secondary_goal_result", "description": "The number of times your ad achieved an outcome, based on the secondary goal you selected. As one campaign may have a number  of different secondary goals, this statistic is not supported for campaigns. Please go to ad groups or ads to view. (The total count is  calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_per_result": {"name": "cost_per_result", "description": "The average cost for each result from your ads. As one campaign may have a number of different optimization goals, this statistic  is not supported for campaigns. Please go to ad groups or ads to view the cost per result. (The total count is calculated based on the time each ad impression occurred.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_video_play_per_user": {"name": "average_video_play_per_user", "description": "The average time your video was played per person, including any time spent replaying the video. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "real_time_result_rate": {"name": "real_time_result_rate", "description": "As a campaign may have different optimization goals, the total number of result is not supported in campaign section now ,Please go to the ad group section to view the Result Rate.  (The total count is based on when the conversion actually happened.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The estimated total amount of money you've spent on your campaign, ad group or ad during its schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes your video creative received within 1 day of a user seeing a paid ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`tiktok_ads`.`adgroup_report_hourly`", "created_at": 1660323536.874309}, "source.facebook_ads_source.facebook_ads.account_history": {"fqn": ["facebook_ads_source", "facebook_ads", "account_history"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.account_history", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "account_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad account.", "columns": {"id": {"name": "id", "description": "The ID of the ad account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_status": {"name": "account_status", "description": "Current status of account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_country_code": {"name": "business_country_code", "description": "Country code of business associated to account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The time account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency associated with account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone_name": {"name": "timezone_name", "description": "Timezone associated with account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`account_history`", "created_at": 1660323536.874548}, "source.facebook_ads_source.facebook_ads.ad_history": {"fqn": ["facebook_ads_source", "facebook_ads", "ad_history"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.ad_history", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "ad_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad.", "columns": {"id": {"name": "id", "description": "The ID of this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "ID of the ad set that contains the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the ad creative to be used by this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_time": {"name": "updated_time", "description": "The timestamp of the last update of a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`ad_history`", "created_at": 1660323536.874718}, "source.facebook_ads_source.facebook_ads.ad_set_history": {"fqn": ["facebook_ads_source", "facebook_ads", "ad_set_history"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.ad_set_history", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "ad_set_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_set_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad set.", "columns": {"id": {"name": "id", "description": "The ID of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad set belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_time": {"name": "updated_time", "description": "The timestamp of the last update of a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Timestamp of designated ad set start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "Timestamp of designated ad set end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_strategy": {"name": "bid_strategy", "description": "Bid strategy values are - 'LOWEST_COST_WITHOUT_CAP', 'LOWEST_COST_WITH_BID_CAP', 'COST_CAP', 'LOWEST_COST_WITH_MIN_ROAS'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget": {"name": "daily_budget", "description": "Daily budget of ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_remaining": {"name": "budget_remaining", "description": "Remaining budget of ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status values are - 'ACTIVE', 'PAUSED', 'DELETED', 'ARCHIVED'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`ad_set_history`", "created_at": 1660323536.874892}, "source.facebook_ads_source.facebook_ads.basic_ad": {"fqn": ["facebook_ads_source", "facebook_ads", "basic_ad"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.basic_ad", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "basic_ad", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "basic_ad", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the daily performance of an ad in Facebook.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Name of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "Name of the ad set the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the reported performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inline_link_clicks": {"name": "inline_link_clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "The number of people who saw any content from your Page or about your Page. This metric is estimated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency": {"name": "frequency", "description": "The average number of times each person saw your ad; it is calculated as impressions divided by reach.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`basic_ad`", "created_at": 1660323536.875063}, "source.facebook_ads_source.facebook_ads.campaign_history": {"fqn": ["facebook_ads_source", "facebook_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.campaign_history", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "campaign_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook campaign.", "columns": {"id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_time": {"name": "updated_time", "description": "The timestamp of the last update of a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The time the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Timestamp of designated campaign start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stop_time": {"name": "stop_time", "description": "Timestamp of designated campaign end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget": {"name": "daily_budget", "description": "Daily budget of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_remaining": {"name": "budget_remaining", "description": "Remaining budget of campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifetime_budget": {"name": "lifetime_budget", "description": "Lifetime budget of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status values are - 'ACTIVE', 'PAUSED', 'DELETED', 'ARCHIVED'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`campaign_history`", "created_at": 1660323536.8752341}, "source.facebook_ads_source.facebook_ads.creative_history": {"fqn": ["facebook_ads_source", "facebook_ads", "creative_history"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.creative_history", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "creative_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "creative_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook creative.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique record identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_link": {"name": "page_link", "description": "URL destination of Facebook ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_page_link": {"name": "template_page_link", "description": "URL destination of Facebook dynamic ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID for an ad creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Ad account ID for the account this ad creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of this ad creative as seen in the ad account's library.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_tags": {"name": "url_tags", "description": "A set of query string parameters which will replace or be appended to urls clicked from page post ads, message of the post, and canvas app install creatives only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_feed_spec_link_urls": {"name": "asset_feed_spec_link_urls", "description": "Link to the asset feed spec", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_child_attachments": {"name": "object_story_link_data_child_attachments", "description": "Link of the object story child attachments", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_caption": {"name": "object_story_link_data_caption", "description": "Link of the object story caption", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_description": {"name": "object_story_link_data_description", "description": "Link of the object story description", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_link": {"name": "object_story_link_data_link", "description": "Link of the object story link", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_message": {"name": "object_story_link_data_message", "description": "Link of the object story message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ios": {"name": "template_app_link_spec_ios", "description": "Link of the object story spec for ios", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ipad": {"name": "template_app_link_spec_ipad", "description": "Link of the template app spec for ipad", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_android": {"name": "template_app_link_spec_android", "description": "Link of the template app for android", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_iphone": {"name": "template_app_link_spec_iphone", "description": "Link of the template app for iphone", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`creative_history`", "created_at": 1660323536.875419}, "source.snapchat_ads_source.snapchat_ads.ad_account_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "ad_account_history"], "database": "dbt-package-testing", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.ad_account_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "ad_account_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a historic version of an ad account in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser": {"name": "advertiser", "description": "Name of advertiser", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency used by account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Account timezone", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`snapchat_ads`.`ad_account_history`", "created_at": 1660323536.8755689}, "source.snapchat_ads_source.snapchat_ads.ad_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "ad_history"], "database": "dbt-package-testing", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.ad_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "ad_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a historic version of an ad in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_id": {"name": "ad_squad_id", "description": "The ID of the related ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`snapchat_ads`.`ad_history`", "created_at": 1660323536.8757088}, "source.snapchat_ads_source.snapchat_ads.ad_hourly_report": {"fqn": ["snapchat_ads_source", "snapchat_ads", "ad_hourly_report"], "database": "dbt-package-testing", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.ad_hourly_report", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "ad_hourly_report", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_hourly_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents an hourly performance summary for an ad in Snapchat.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad that the report relates to in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The hour that the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_1": {"name": "attachment_quartile_1", "description": "Number of times your Long Form Video was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_2": {"name": "attachment_quartile_2", "description": "Number of times your Long Form Video was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_3": {"name": "attachment_quartile_3", "description": "Number of times your Long Form Video was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_total_view_time_millis": {"name": "attachment_total_view_time_millis", "description": "Total time Snapchatters spent on the attachment (HH:MM:SS)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_view_completion": {"name": "attachment_view_completion", "description": "The number of times your Long Form Video was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_1": {"name": "quartile_1", "description": "The number of times your video ad was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_2": {"name": "quartile_2", "description": "The number of times your video ad was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_3": {"name": "quartile_3", "description": "The number of times your video ad was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of times a lens/filter was saved to Memories", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "Number of times a lens/filter was shared in a Chat or Story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "screen_time_millis": {"name": "screen_time_millis", "description": "The number of milli seconds spent watching your ad across all paid impressions. Screen time starts recording as soon as the media is fully rendered on the device and the autoplay video starts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "The number of times your video was watched at least 2 seconds or swiped up, whichever comes first", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_completion": {"name": "view_completion", "description": "The number of times your video ad was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_time_millis": {"name": "view_time_millis", "description": "The number of milli seconds spent watching your ad across all users reached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend in microdollars for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes for an ad in the hour of the record. Swipes are when your ad was swiped up on or the CTA was tapped to view the attachment below.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`snapchat_ads`.`ad_hourly_report`", "created_at": 1660323536.875874}, "source.snapchat_ads_source.snapchat_ads.ad_squad_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "ad_squad_history"], "database": "dbt-package-testing", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.ad_squad_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "ad_squad_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_squad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a historic version of an ad squad in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`snapchat_ads`.`ad_squad_history`", "created_at": 1660323536.876009}, "source.snapchat_ads_source.snapchat_ads.ad_squad_hourly_report": {"fqn": ["snapchat_ads_source", "snapchat_ads", "ad_squad_hourly_report"], "database": "dbt-package-testing", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.ad_squad_hourly_report", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "ad_squad_hourly_report", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_squad_hourly_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents an hourly performance summary for each ad squad.", "columns": {"ad_squad_id": {"name": "ad_squad_id", "description": "ID of the ad squad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The hour that the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_1": {"name": "attachment_quartile_1", "description": "Number of times your Long Form Video was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_2": {"name": "attachment_quartile_2", "description": "Number of times your Long Form Video was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_3": {"name": "attachment_quartile_3", "description": "Number of times your Long Form Video was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_total_view_time_millis": {"name": "attachment_total_view_time_millis", "description": "Total time Snapchatters spent on the attachment (HH:MM:SS)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_view_completion": {"name": "attachment_view_completion", "description": "The number of times your Long Form Video was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_1": {"name": "quartile_1", "description": "The number of times your video ad was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_2": {"name": "quartile_2", "description": "The number of times your video ad was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_3": {"name": "quartile_3", "description": "The number of times your video ad was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of times a lens/filter was saved to Memories", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "Number of times a lens/filter was shared in a Chat or Story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "screen_time_millis": {"name": "screen_time_millis", "description": "The number of milli seconds spent watching your ad across all paid impressions. Screen time starts recording as soon as the media is fully rendered on the device and the autoplay video starts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "The number of times your video was watched at least 2 seconds or swiped up, whichever comes first", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_completion": {"name": "view_completion", "description": "The number of times your video ad was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_time_millis": {"name": "view_time_millis", "description": "The number of milli seconds spent watching your ad across all users reached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend in microdollars for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes for an ad in the hour of the record. Swipes are when your ad was swiped up on or the CTA was tapped to view the attachment below.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`snapchat_ads`.`ad_squad_hourly_report`", "created_at": 1660323536.876171}, "source.snapchat_ads_source.snapchat_ads.campaign_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.campaign_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "campaign_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a historic version of a campaign in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the related ad account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`snapchat_ads`.`campaign_history`", "created_at": 1660323536.8763049}, "source.snapchat_ads_source.snapchat_ads.campaign_hourly_report": {"fqn": ["snapchat_ads_source", "snapchat_ads", "campaign_hourly_report"], "database": "dbt-package-testing", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.campaign_hourly_report", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "campaign_hourly_report", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_hourly_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents an hourly performance summary for each campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "ID of campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The hour that the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_1": {"name": "attachment_quartile_1", "description": "Number of times your Long Form Video was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_2": {"name": "attachment_quartile_2", "description": "Number of times your Long Form Video was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_quartile_3": {"name": "attachment_quartile_3", "description": "Number of times your Long Form Video was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_total_view_time_millis": {"name": "attachment_total_view_time_millis", "description": "Total time Snapchatters spent on the attachment (HH:MM:SS)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_view_completion": {"name": "attachment_view_completion", "description": "The number of times your Long Form Video was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_1": {"name": "quartile_1", "description": "The number of times your video ad was viewed to 25%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_2": {"name": "quartile_2", "description": "The number of times your video ad was viewed to 50%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quartile_3": {"name": "quartile_3", "description": "The number of times your video ad was viewed to 75%", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saves": {"name": "saves", "description": "Number of times a lens/filter was saved to Memories", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "Number of times a lens/filter was shared in a Chat or Story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "screen_time_millis": {"name": "screen_time_millis", "description": "The number of milli seconds spent watching your ad across all paid impressions. Screen time starts recording as soon as the media is fully rendered on the device and the autoplay video starts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "The number of times your video was watched at least 2 seconds or swiped up, whichever comes first", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_completion": {"name": "view_completion", "description": "The number of times your video ad was viewed to completion (97% )", "meta": {}, "data_type": null, "quote": null, "tags": []}, "view_time_millis": {"name": "view_time_millis", "description": "The number of milli seconds spent watching your ad across all users reached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend in microdollars for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes for an ad in the hour of the record. Swipes are when your ad was swiped up on or the CTA was tapped to view the attachment below.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`snapchat_ads`.`campaign_hourly_report`", "created_at": 1660323536.876605}, "source.snapchat_ads_source.snapchat_ads.creative_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "creative_history"], "database": "dbt-package-testing", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.creative_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "creative_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "creative_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a historic version of a creative in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the related ad account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "web_view_url": {"name": "web_view_url", "description": "The URL of the creative if the creative is of type 'web view'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`snapchat_ads`.`creative_history`", "created_at": 1660323536.876768}, "source.snapchat_ads_source.snapchat_ads.creative_url_tag_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "creative_url_tag_history"], "database": "dbt-package-testing", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.creative_url_tag_history", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "creative_url_tag_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "creative_url_tag_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record in this table represents a URL parameter key-value pair for a creative in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Created at timestamp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "The URL parameter key, i.e. UTM_SOURCE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The URL parameter value, i.e. Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`snapchat_ads`.`creative_url_tag_history`", "created_at": 1660323536.877033}, "source.twitter_ads_source.twitter_ads.account_history": {"fqn": ["twitter_ads_source", "twitter_ads", "account_history"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.account_history", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "account_history", "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of each account. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone_switch_at": {"name": "timezone_switch_at", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salt": {"name": "salt", "description": "The random encryption key used to has data.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`account_history`", "created_at": 1660323536.8772259}, "source.twitter_ads_source.twitter_ads.campaign_history": {"fqn": ["twitter_ads_source", "twitter_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.campaign_history", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "campaign_history", "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of each campaign. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currently all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount_local_micro": {"name": "daily_budget_amount_local_micro", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_in_days": {"name": "duration_in_days", "description": "The time period within which the frequency_cap is achieved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The time the campaign will end", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "servable": {"name": "servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "standard_delivery": {"name": "standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding_instrument_id": {"name": "funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`campaign_history`", "created_at": 1660323536.877408}, "source.twitter_ads_source.twitter_ads.line_item_history": {"fqn": ["twitter_ads_source", "twitter_ads", "line_item_history"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.line_item_history", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "line_item_history", "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "line_item_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of each line item. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automatically_select_bid": {"name": "automatically_select_bid", "description": "Whether automatically optimize bidding is enabled based on daily budget and campaign flight dates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount_local_micro": {"name": "bid_amount_local_micro", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_cpa_local_micro": {"name": "target_cpa_local_micro", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`line_item_history`", "created_at": 1660323536.877586}, "source.twitter_ads_source.twitter_ads.promoted_tweet_history": {"fqn": ["twitter_ads_source", "twitter_ads", "promoted_tweet_history"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.promoted_tweet_history", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "promoted_tweet_history", "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "promoted_tweet_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of each promoted tweet. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`promoted_tweet_history`", "created_at": 1660323536.877734}, "source.twitter_ads_source.twitter_ads.tweet_url": {"fqn": ["twitter_ads_source", "twitter_ads", "tweet_url"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.tweet_url", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "tweet_url", "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "tweet_url", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a URL used in a tweet.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the URL within the tweet (ie if there are multiple URLs in the tweet).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "indices": {"name": "indices", "description": "The start and end point of where the URL is placed in the tweet text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The 't.co' shortened URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`tweet_url`", "created_at": 1660323536.877871}, "source.twitter_ads_source.twitter_ads.promoted_tweet_report": {"fqn": ["twitter_ads_source", "twitter_ads", "promoted_tweet_report"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.promoted_tweet_report", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "promoted_tweet_report", "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "promoted_tweet_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the performance of a promoted tweet on a given day, in its defined placement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the related promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`promoted_tweet_report`", "created_at": 1660323536.8780181}, "source.twitter_ads_source.twitter_ads.tweet": {"fqn": ["twitter_ads_source", "twitter_ads", "tweet"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.tweet", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "tweet", "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "tweet", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a tweet, promoted or not.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier of the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "If provided, the non-public title of the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_text": {"name": "full_text", "description": "Full text of the tweet's content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lang": {"name": "lang", "description": "Two-letter language code of the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`tweet`", "created_at": 1660323536.878155}, "source.twitter_ads_source.twitter_ads.campaign_report": {"fqn": ["twitter_ads_source", "twitter_ads", "campaign_report"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.campaign_report", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "campaign_report", "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "campaign_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the performance of an ad campaign on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the campaign on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the campaign on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the campaign on that day. This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the ad campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the campaign on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`campaign_report`", "created_at": 1660323536.878297}, "source.twitter_ads_source.twitter_ads.line_item_report": {"fqn": ["twitter_ads_source", "twitter_ads", "line_item_report"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.line_item_report", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "line_item_report", "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "line_item_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the performance of a line item (ad group) on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the line item on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the line item on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the line item on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the line item on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`line_item_report`", "created_at": 1660323536.878437}, "source.twitter_ads_source.twitter_ads.line_item_keywords_report": {"fqn": ["twitter_ads_source", "twitter_ads", "line_item_keywords_report"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.line_item_keywords_report", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "line_item_keywords_report", "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "line_item_keywords_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the performance of a line item (ad group) and keyword combination on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the line item + keyword on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the line item + keyword on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the line item + keyword on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the line item + keyword on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "segment": {"name": "segment", "description": "The keyword whose performance is being tracked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`line_item_keywords_report`", "created_at": 1660323536.878599}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.388169}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.388591}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.3891299}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.394403}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4030561}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.403785}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.404486}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.405134}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.406404}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4068851}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4075131}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4077811}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.408042}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.408438}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.408746}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.409046}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.409204}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.409568}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4099588}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.41033}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4108841}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4112089}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.411526}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.412332}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.413104}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.414434}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.41478}, "macro.dbt_bigquery.bigquery__upload_file": {"unique_id": "macro.dbt_bigquery.bigquery__upload_file", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4153411}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.416022}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.416349}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4175448}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4186828}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.42}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.424112}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.426528}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.429718}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.430613}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4330502}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4347389}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.440282}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.441182}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.441504}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4417799}, "macro.dbt_bigquery.bigquery__except": {"unique_id": "macro.dbt_bigquery.bigquery__except", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4421508}, "macro.dbt_bigquery.bigquery__dateadd": {"unique_id": "macro.dbt_bigquery.bigquery__dateadd", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.442743}, "macro.dbt_bigquery.bigquery__intersect": {"unique_id": "macro.dbt_bigquery.bigquery__intersect", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.443109}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4436412}, "macro.dbt_bigquery.bigquery__right": {"unique_id": "macro.dbt_bigquery.bigquery__right", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.444236}, "macro.dbt_bigquery.bigquery__listagg": {"unique_id": "macro.dbt_bigquery.bigquery__listagg", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4451358}, "macro.dbt_bigquery.bigquery__datediff": {"unique_id": "macro.dbt_bigquery.bigquery__datediff", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4462368}, "macro.dbt_bigquery.bigquery__safe_cast": {"unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.44674}, "macro.dbt_bigquery.bigquery__hash": {"unique_id": "macro.dbt_bigquery.bigquery__hash", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.447232}, "macro.dbt_bigquery.bigquery__position": {"unique_id": "macro.dbt_bigquery.bigquery__position", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.447752}, "macro.dbt_bigquery.bigquery__bool_or": {"unique_id": "macro.dbt_bigquery.bigquery__bool_or", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4481852}, "macro.dbt_bigquery.bigquery__split_part": {"unique_id": "macro.dbt_bigquery.bigquery__split_part", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4493701}, "macro.dbt_bigquery.bigquery__date_trunc": {"unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.449889}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.451207}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.451801}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.452288}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4543722}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.454769}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.455073}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4553668}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4556649}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.456488}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.457101}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.457723}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4586282}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.459171}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4649558}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.465301}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.465759}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.466055}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.466263}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4677708}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.46811}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.468457}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4712}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.473838}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.479605}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.480188}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.480535}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.480739}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4810429}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4812858}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.481699}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.483396}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.483781}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.484303}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.485176}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.495651}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.4995682}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.50052}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.501151}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.501971}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.502739}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5043042}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.505408}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.506644}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.514354}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.517312}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5178728}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.519373}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.519901}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.521229}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.522551}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5305889}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.538038}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5404649}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.542891}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.544329}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.549083}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.54998}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.550373}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.550808}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.551647}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.556416}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.557137}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.557581}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.56049}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.561316}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5616488}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.562021}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.56257}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.568702}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5760262}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.577903}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.578371}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.579396}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.579777}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5800488}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5803351}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5805728}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.580905}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.581142}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5820649}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.582453}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5850618}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.585925}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.586385}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5874329}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5879512}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.588532}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.589407}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.589934}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.590734}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.591459}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.592087}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.5933068}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.595415}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.596587}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.597176}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.600163}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.602745}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.60424}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.604706}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.605313}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6054761}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6062772}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.606612}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.607235}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.60749}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.608124}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6083431}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6091158}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.609459}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.610032}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.610207}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.610931}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6112168}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6119308}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6122189}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.613407}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.614351}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6151402}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.615485}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.616199}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.616493}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6171489}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.617485}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.618133}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.618452}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.619067}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6192791}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.619963}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.620254}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.62097}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.621207}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.622763}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.623086}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6234329}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.623747}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.624179}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6244931}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.624825}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.625184}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6255171}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.62583}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6261609}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.626461}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.627121}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6273332}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6281018}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.628624}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6289222}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6301508}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.630497}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6309671}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.631653}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.63192}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.632734}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.633112}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6334379}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6339169}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6349068}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.635197}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.635531}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.636357}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6418161}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.642169}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6426282}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.643237}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.643735}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.644381}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.644743}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6451662}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.645531}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.645864}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.646283}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.646854}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6473558}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.648557}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.649007}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6492958}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.649683}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.650641}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.650958}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6514199}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.652262}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.65501}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.655263}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6556659}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.655901}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.656634}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.657024}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.657253}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6577}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6580758}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.658529}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.658907}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.659372}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.660825}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6612248}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.661709}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.662157}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.664373}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.665766}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6661088}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.666547}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6668959}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.667457}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.668409}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.671283}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.671826}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.672218}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.672519}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.672862}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.673345}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.673724}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.674282}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6746309}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.674937}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.677422}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.67782}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.678397}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.678741}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.679359}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.67978}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6808808}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.68135}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6827781}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6837509}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.684221}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.684865}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6853719}, "macro.microsoft_ads_source.get_ad_group_history_columns": {"unique_id": "macro.microsoft_ads_source.get_ad_group_history_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_ad_group_history_columns.sql", "original_file_path": "macros/get_ad_group_history_columns.sql", "name": "get_ad_group_history_columns", "macro_sql": "{% macro get_ad_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"start_date\", \"datatype\": \"date\"},\n    {\"name\": \"end_date\", \"datatype\": \"date\"},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6869938}, "macro.microsoft_ads_source.get_campaign_daily_report_columns": {"unique_id": "macro.microsoft_ads_source.get_campaign_daily_report_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_campaign_daily_report_columns.sql", "original_file_path": "macros/get_campaign_daily_report_columns.sql", "name": "get_campaign_daily_report_columns", "macro_sql": "{% macro get_campaign_daily_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_distribution\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bid_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"delivered_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_os\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"network\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"top_vs_other\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('microsoft_ads__campaign_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.690026}, "macro.microsoft_ads_source.get_ad_group_daily_report_columns": {"unique_id": "macro.microsoft_ads_source.get_ad_group_daily_report_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_ad_group_daily_report_columns.sql", "original_file_path": "macros/get_ad_group_daily_report_columns.sql", "name": "get_ad_group_daily_report_columns", "macro_sql": "{% macro get_ad_group_daily_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_distribution\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"delivered_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_os\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"network\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"top_vs_other\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('microsoft_ads__ad_group_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.693534}, "macro.microsoft_ads_source.get_account_daily_report_columns": {"unique_id": "macro.microsoft_ads_source.get_account_daily_report_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_account_daily_report_columns.sql", "original_file_path": "macros/get_account_daily_report_columns.sql", "name": "get_account_daily_report_columns", "macro_sql": "{% macro get_account_daily_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_distribution\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bid_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"delivered_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_os\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"network\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"top_vs_other\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6963232}, "macro.microsoft_ads_source.get_campaign_history_columns": {"unique_id": "macro.microsoft_ads_source.get_campaign_history_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"time_zone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.6980438}, "macro.microsoft_ads_source.get_account_history_columns": {"unique_id": "macro.microsoft_ads_source.get_account_history_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_account_history_columns.sql", "original_file_path": "macros/get_account_history_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"time_zone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency_code\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.699436}, "macro.microsoft_ads_source.get_ad_history_columns": {"unique_id": "macro.microsoft_ads_source.get_ad_history_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_ad_history_columns.sql", "original_file_path": "macros/get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"title_part_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"final_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7012322}, "macro.microsoft_ads_source.get_ad_daily_report_columns": {"unique_id": "macro.microsoft_ads_source.get_ad_daily_report_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_ad_daily_report_columns.sql", "original_file_path": "macros/get_ad_daily_report_columns.sql", "name": "get_ad_daily_report_columns", "macro_sql": "{% macro get_ad_daily_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_distribution\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"delivered_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_os\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"network\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"top_vs_other\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('microsoft_ads__ad_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7049}, "macro.microsoft_ads_source.get_keyword_daily_report_columns": {"unique_id": "macro.microsoft_ads_source.get_keyword_daily_report_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_keyword_daily_report_columns.sql", "original_file_path": "macros/get_keyword_daily_report_columns.sql", "name": "get_keyword_daily_report_columns", "macro_sql": "{% macro get_keyword_daily_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_distribution\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"delivered_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_os\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"keyword_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"network\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"top_vs_other\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('microsoft_ads__keyword_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.708862}, "macro.microsoft_ads_source.get_keyword_history_columns": {"unique_id": "macro.microsoft_ads_source.get_keyword_history_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_keyword_history_columns.sql", "original_file_path": "macros/get_keyword_history_columns.sql", "name": "get_keyword_history_columns", "macro_sql": "{% macro get_keyword_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.710481}, "macro.microsoft_ads_source.get_search_daily_report_columns": {"unique_id": "macro.microsoft_ads_source.get_search_daily_report_columns", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "macros/get_search_daily_report_columns.sql", "original_file_path": "macros/get_search_daily_report_columns.sql", "name": "get_search_daily_report_columns", "macro_sql": "{% macro get_search_daily_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"delivered_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_os\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"keyword_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"network\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"search_query\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"top_vs_other\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('microsoft_ads__search_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.714376}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.715001}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.715156}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.715306}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.716049}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.716374}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7169878}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.717238}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7184908}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.718648}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.718797}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7190368}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7192042}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.719525}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.71968}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.71983}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.71998}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.720312}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.720464}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7206101}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.720927}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.721079}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.721237}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.721539}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.721688}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7218292}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7221491}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.722302}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7224472}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7234108}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.724268}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.724562}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.725282}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.725566}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.725776}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7264519}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.726665}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7268732}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7279649}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.728299}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7286289}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7289531}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.729342}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.729952}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.730108}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.730262}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7310069}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.731292}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7315671}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.731837}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7328918}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.733173}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.73349}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.733804}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.737621}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7384589}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.73902}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.739799}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.741632}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.745803}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7461472}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.746482}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.749822}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7502248}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.751034}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.751321}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7515829}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7518442}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.752534}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.752821}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.753087}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.753796}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.754085}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7543502}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7553291}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.755807}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7560132}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7567182}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.756934}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.757171}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.75795}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7582238}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.758492}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.759103}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7593129}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.76036}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7605891}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7607412}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.760892}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.761224}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.76146}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.761767}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.762003}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.762288}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.764597}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7656598}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.766606}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.766994}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7678149}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7680829}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.768345}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.768607}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7693388}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.76955}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.769757}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.769962}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.771036}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.771582}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.77189}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.772688}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.773049}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.775531}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.775872}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7763321}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.777002}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.777788}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7785091}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.779277}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.779547}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.779819}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7808828}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.781366}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7816541}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.78194}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7822359}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7838569}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.784693}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7849758}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.785354}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.7857358}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.794915}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.795975}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.796614}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.797707}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8077419}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.808578}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.809518}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8105211}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.811792}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.812545}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.813177}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.814207}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8146482}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.815486}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8160782}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.817311}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8179798}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.818851}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.819499}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.820239}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8205912}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.821784}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.822819}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8238971}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.824685}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8256252}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8259609}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.826711}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.827057}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.828224}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.82952}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8306189}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.831298}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.832288}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8328729}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.833768}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8349419}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.836189}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.837491}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8384068}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.838741}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.840062}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.841797}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.846731}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.849808}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.850482}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.850813}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.851496}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8518882}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8525388}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8528829}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8539069}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8551848}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.856375}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.856843}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.85757}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.858301}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.859149}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.860415}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.862102}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.863582}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.864425}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.864815}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.865866}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8671591}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.868824}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.869729}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.870292}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.871648}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8735921}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.87656}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.880606}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.884876}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.890667}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8913941}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.891901}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.896252}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.896683}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.897079}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.897463}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8977978}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8981571}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.8992891}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.901129}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.902004}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.902591}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.903359}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.904012}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.906523}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.907094}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9086652}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.909677}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.911633}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9146209}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.916585}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9183118}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.919254}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.920807}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.921649}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.922806}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.923729}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.923903}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9240682}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9242508}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.926042}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.926611}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9277499}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9294431}, "macro.linkedin_source.get_creative_history_columns": {"unique_id": "macro.linkedin_source.get_creative_history_columns", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_creative_history_columns.sql", "original_file_path": "macros/get_creative_history_columns.sql", "name": "get_creative_history_columns", "macro_sql": "{% macro get_creative_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"call_to_action_label_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"call_to_action_target\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"click_uri\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"follow_company_call_to_action\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"follow_company_organization_logo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"follow_company_organization_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"jobs_company_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"jobs_logo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"jobs_organization\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"reference\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"review_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_in_mail_content\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_activity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_activity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_direct_sponsored_content\", \"datatype\": \"boolean\"},\n    {\"name\": \"sponsored_update_carousel_share\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_content_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_content_share_media_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_content_title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_direct_sponsored_content\", \"datatype\": \"boolean\"},\n    {\"name\": \"sponsored_update_share\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_content_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_content_share_media_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_content_title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_video_media_asset\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_video_user_generated_content_post\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_call_to_action\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_custom_background\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_forum_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_headline\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_logo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_show_member_profile_photo\", \"datatype\": \"boolean\"},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"text_ad_text\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"text_ad_title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9393122}, "macro.linkedin_source.get_campaign_group_history_columns": {"unique_id": "macro.linkedin_source.get_campaign_group_history_columns", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_campaign_group_history_columns.sql", "original_file_path": "macros/get_campaign_group_history_columns.sql", "name": "get_campaign_group_history_columns", "macro_sql": "{% macro get_campaign_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"backfilled\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"run_schedule_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"run_schedule_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.941716}, "macro.linkedin_source.get_ad_analytics_by_campaign_columns": {"unique_id": "macro.linkedin_source.get_ad_analytics_by_campaign_columns", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_ad_analytics_by_campaign_columns.sql", "original_file_path": "macros/get_ad_analytics_by_campaign_columns.sql", "name": "get_ad_analytics_by_campaign_columns", "macro_sql": "{% macro get_ad_analytics_by_campaign_columns() %}\n\n{% set columns = [\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost_in_local_currency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"cost_in_usd\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"day\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('linkedin_ads__campaign_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.943562}, "macro.linkedin_source.get_campaign_history_columns": {"unique_id": "macro.linkedin_source.get_campaign_history_columns", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"associated_entity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"audience_expansion_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"campaign_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_selection\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"daily_budget_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"daily_budget_currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"format\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"locale_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"locale_language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"objective_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"offsite_delivery_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"optimization_target_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"run_schedule_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"run_schedule_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unit_cost_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"unit_cost_currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9489439}, "macro.linkedin_source.get_ad_analytics_by_creative_columns": {"unique_id": "macro.linkedin_source.get_ad_analytics_by_creative_columns", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_ad_analytics_by_creative_columns.sql", "original_file_path": "macros/get_ad_analytics_by_creative_columns.sql", "name": "get_ad_analytics_by_creative_columns", "macro_sql": "{% macro get_ad_analytics_by_creative_columns() %}\n\n{% set columns = [\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost_in_local_currency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"cost_in_usd\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"day\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('linkedin_ads__creative_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.950756}, "macro.linkedin_source.get_account_history_columns": {"unique_id": "macro.linkedin_source.get_account_history_columns", "package_name": "linkedin_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_account_history_columns.sql", "original_file_path": "macros/get_account_history_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"notified_on_campaign_optimization\", \"datatype\": \"boolean\"},\n    {\"name\": \"notified_on_creative_approval\", \"datatype\": \"boolean\"},\n    {\"name\": \"notified_on_creative_rejection\", \"datatype\": \"boolean\"},\n    {\"name\": \"notified_on_end_of_campaign\", \"datatype\": \"boolean\"},\n    {\"name\": \"reference\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.953697}, "macro.spark_utils.get_tables": {"unique_id": "macro.spark_utils.get_tables", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.962142}, "macro.spark_utils.get_delta_tables": {"unique_id": "macro.spark_utils.get_delta_tables", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.963507}, "macro.spark_utils.get_statistic_columns": {"unique_id": "macro.spark_utils.get_statistic_columns", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9652429}, "macro.spark_utils.spark_optimize_delta_tables": {"unique_id": "macro.spark_utils.spark_optimize_delta_tables", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.966687}, "macro.spark_utils.spark_vacuum_delta_tables": {"unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9681191}, "macro.spark_utils.spark_analyze_tables": {"unique_id": "macro.spark_utils.spark_analyze_tables", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.97001}, "macro.spark_utils.spark__concat": {"unique_id": "macro.spark_utils.spark__concat", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "name": "spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.970525}, "macro.spark_utils.spark__type_numeric": {"unique_id": "macro.spark_utils.spark__type_numeric", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "name": "spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.970897}, "macro.spark_utils.spark__dateadd": {"unique_id": "macro.spark_utils.spark__dateadd", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "name": "spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.975957}, "macro.spark_utils.spark__datediff": {"unique_id": "macro.spark_utils.spark__datediff", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "name": "spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.988286}, "macro.spark_utils.spark__current_timestamp": {"unique_id": "macro.spark_utils.spark__current_timestamp", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "name": "spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9887}, "macro.spark_utils.spark__current_timestamp_in_utc": {"unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "name": "spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.988856}, "macro.spark_utils.spark__split_part": {"unique_id": "macro.spark_utils.spark__split_part", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "name": "spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.990081}, "macro.spark_utils.spark__get_relations_by_pattern": {"unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.993181}, "macro.spark_utils.spark__get_relations_by_prefix": {"unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9938219}, "macro.spark_utils.spark__get_tables_by_pattern": {"unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.994367}, "macro.spark_utils.spark__get_tables_by_prefix": {"unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.994903}, "macro.spark_utils.assert_not_null": {"unique_id": "macro.spark_utils.assert_not_null", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "name": "assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.995647}, "macro.spark_utils.default__assert_not_null": {"unique_id": "macro.spark_utils.default__assert_not_null", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "name": "default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9960608}, "macro.spark_utils.spark__convert_timezone": {"unique_id": "macro.spark_utils.spark__convert_timezone", "package_name": "spark_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.99662}, "macro.facebook_ads.get_url_tags_query": {"unique_id": "macro.facebook_ads.get_url_tags_query", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "macros/get_url_tag_query.sql", "original_file_path": "macros/get_url_tag_query.sql", "name": "get_url_tags_query", "macro_sql": "{% macro get_url_tags_query() %}\n  {{ return(adapter.dispatch('get_url_tags_query') ()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.facebook_ads.bigquery__get_url_tags_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.998559}, "macro.facebook_ads.bigquery__get_url_tags_query": {"unique_id": "macro.facebook_ads.bigquery__get_url_tags_query", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "macros/get_url_tag_query.sql", "original_file_path": "macros/get_url_tag_query.sql", "name": "bigquery__get_url_tags_query", "macro_sql": "{% macro bigquery__get_url_tags_query() %}\n\n  cleaned_json as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          json_extract_array(replace(trim(url_tags, '\"'),'\\\\','')) as cleaned_url_tags\n      from required_fields\n  ), \n\n  unnested as (\n\n      select \n        _fivetran_id, \n        creative_id, \n        url_tag_element\n      from cleaned_json\n      left join unnest(cleaned_url_tags) as url_tag_element\n      where cleaned_url_tags is not null\n  ), \n\n  fields as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          json_extract_scalar(url_tag_element, '$.key') as key,\n          json_extract_scalar(url_tag_element, '$.value') as value,\n          json_extract_scalar(url_tag_element, '$.type') as type\n      from unnested\n  )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.998789}, "macro.facebook_ads.postgres__get_url_tags_query": {"unique_id": "macro.facebook_ads.postgres__get_url_tags_query", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "macros/get_url_tag_query.sql", "original_file_path": "macros/get_url_tag_query.sql", "name": "postgres__get_url_tags_query", "macro_sql": "{% macro postgres__get_url_tags_query() %}\n\n  cleaned_json as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          replace(trim(url_tags::text, '\"'),'\\\\','')::json as cleaned_url_tags\n      from required_fields\n  ), \n\n  unnested as (\n\n      select \n        _fivetran_id, \n        creative_id, \n        url_tag_element\n      from cleaned_json\n      left join lateral json_array_elements(cleaned_url_tags) as url_tag_element on True\n      where cleaned_url_tags is not null\n  ), \n\n  fields as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          url_tag_element->>'key' as key,\n          url_tag_element->>'value' as value,\n          url_tag_element->>'type' as type\n      from unnested\n  )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.999004}, "macro.facebook_ads.redshift__get_url_tags_query": {"unique_id": "macro.facebook_ads.redshift__get_url_tags_query", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "macros/get_url_tag_query.sql", "original_file_path": "macros/get_url_tag_query.sql", "name": "redshift__get_url_tags_query", "macro_sql": "{% macro redshift__get_url_tags_query() %}\n\n  numbers as (\n\n      {{ dbt_utils.generate_series(upper_bound=1000) }}\n\n  ), \n\n  flattened_url_tags as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          json_extract_array_element_text(required_fields.url_tags, numbers.generated_number::int - 1, true) as element\n      from required_fields\n      inner join numbers\n          on json_array_length(required_fields.url_tags) >= numbers.generated_number\n  ), \n\n  fields as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          json_extract_path_text(element,'key') as key,\n          json_extract_path_text(element,'value') as value,\n          json_extract_path_text(element,'type') as type\n      from flattened_url_tags\n  )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9993432}, "macro.facebook_ads.snowflake__get_url_tags_query": {"unique_id": "macro.facebook_ads.snowflake__get_url_tags_query", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "macros/get_url_tag_query.sql", "original_file_path": "macros/get_url_tag_query.sql", "name": "snowflake__get_url_tags_query", "macro_sql": "{% macro snowflake__get_url_tags_query() %}\n\n  cleaned_fields as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          parse_json(url_tags) as url_tags\n      from required_fields\n      where url_tags is not null\n  ), \n\n  fields as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          url_tags.value:key::string as key,\n          url_tags.value:value::string as value,\n          url_tags.value:type::string as type\n      from cleaned_fields,\n      lateral flatten( input => url_tags ) as url_tags\n  )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.999539}, "macro.facebook_ads.spark__get_url_tags_query": {"unique_id": "macro.facebook_ads.spark__get_url_tags_query", "package_name": "facebook_ads", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "macros/get_url_tag_query.sql", "original_file_path": "macros/get_url_tag_query.sql", "name": "spark__get_url_tags_query", "macro_sql": "{% macro spark__get_url_tags_query() %}\n\n  cleaned_fields as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          explode(from_json(url_tags, 'array<struct<key:STRING, value:STRING, type:STRING>>')) as url_tags\n      from required_fields\n      where url_tags is not null\n  ), \n\n  fields as (\n\n      select\n          _fivetran_id,\n          creative_id,\n          url_tags.key as key,\n          url_tags.value as value,\n          url_tags.type as type\n      from cleaned_fields\n  )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323528.9997282}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.012465}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.017044}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0217211}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0235991}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.025053}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0263748}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0290298}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.030236}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.051917}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.053029}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.053937}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.055081}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.055882}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.05757}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.058143}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.05873}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.059294}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.059896}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.060758}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.061105}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.06145}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.061713}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0626109}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.063833}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.064199}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.064898}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.065521}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.066776}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.067164}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.067513}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.067858}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.068203}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0693471}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.069979}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0706491}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.071446}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.072067}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.072715}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.073579}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.073926}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.074249}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.074684}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.077012}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0775611}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.078115}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.079071}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0798562}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.080724}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.081404}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.081683}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.081941}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.08272}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0832589}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0836108}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.084168}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.087056}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.087611}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0883698}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.089033}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0901172}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0909061}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.09183}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.092232}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0925}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.092766}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.093573}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.094531}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.0949152}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.095296}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.09568}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.096066}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.096711}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.09761}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.097976}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.09828}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.10031}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.100996}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.101311}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1016462}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.102407}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1027808}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1035972}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1046588}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.105043}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1053388}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.10562}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.105914}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.107132}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.107415}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.107799}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.10818}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.108821}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.109428}, "macro.google_ads_source.get_ad_group_history_columns": {"unique_id": "macro.google_ads_source.get_ad_group_history_columns", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_ad_group_history_columns.sql", "original_file_path": "macros/get_ad_group_history_columns.sql", "name": "get_ad_group_history_columns", "macro_sql": "{% macro get_ad_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.111507}, "macro.google_ads_source.get_ad_group_stats_columns": {"unique_id": "macro.google_ads_source.get_ad_group_stats_columns", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_ad_group_stats_columns.sql", "original_file_path": "macros/get_ad_group_stats_columns.sql", "name": "get_ad_group_stats_columns", "macro_sql": "{% macro get_ad_group_stats_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_network_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost_micros\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.114843}, "macro.google_ads_source.get_campaign_stats_columns": {"unique_id": "macro.google_ads_source.get_campaign_stats_columns", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_campaign_stats_columns.sql", "original_file_path": "macros/get_campaign_stats_columns.sql", "name": "get_campaign_stats_columns", "macro_sql": "{% macro get_campaign_stats_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_network_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost_micros\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1171572}, "macro.google_ads_source.get_campaign_history_columns": {"unique_id": "macro.google_ads_source.get_campaign_history_columns", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"advertising_channel_subtype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertising_channel_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"end_date\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"serving_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_date\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tracking_url_template\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.119838}, "macro.google_ads_source.get_ad_stats_columns": {"unique_id": "macro.google_ads_source.get_ad_stats_columns", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_ad_stats_columns.sql", "original_file_path": "macros/get_ad_stats_columns.sql", "name": "get_ad_stats_columns", "macro_sql": "{% macro get_ad_stats_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_network_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost_micros\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"keyword_ad_group_criterion\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.124089}, "macro.google_ads_source.get_account_history_columns": {"unique_id": "macro.google_ads_source.get_account_history_columns", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_account_history_columns.sql", "original_file_path": "macros/get_account_history_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"auto_tagging_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"descriptive_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"time_zone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.126028}, "macro.google_ads_source.get_ad_history_columns": {"unique_id": "macro.google_ads_source.get_ad_history_columns", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_ad_history_columns.sql", "original_file_path": "macros/get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"display_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"final_urls\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.128143}, "macro.google_ads_source.get_ad_group_criterion_history_columns": {"unique_id": "macro.google_ads_source.get_ad_group_criterion_history_columns", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_ad_group_criterion_history_columns.sql", "original_file_path": "macros/get_ad_group_criterion_history_columns.sql", "name": "get_ad_group_criterion_history_columns", "macro_sql": "{% macro get_ad_group_criterion_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"base_campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"keyword_match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"keyword_text\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.130267}, "macro.google_ads_source.get_keyword_stats_columns": {"unique_id": "macro.google_ads_source.get_keyword_stats_columns", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_keyword_stats_columns.sql", "original_file_path": "macros/get_keyword_stats_columns.sql", "name": "get_keyword_stats_columns", "macro_sql": "{% macro get_keyword_stats_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_criterion_criterion_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_network_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost_micros\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.132916}, "macro.google_ads_source.get_account_stats_columns": {"unique_id": "macro.google_ads_source.get_account_stats_columns", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_account_stats_columns.sql", "original_file_path": "macros/get_account_stats_columns.sql", "name": "get_account_stats_columns", "macro_sql": "{% macro get_account_stats_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_network_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost_micros\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.135061}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.136008}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1376011}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.137938}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.138274}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.138756}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.139061}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1393971}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.140411}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.14177}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.143541}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.144119}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.144597}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1450639}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.145531}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.146044}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1465669}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.147271}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.147477}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.147677}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.147875}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.148706}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.149899}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.151146}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1520588}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.152322}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.152577}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.152836}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.153096}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.157512}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.157835}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1582458}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.158713}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.161899}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.163334}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.163604}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.16413}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1646662}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.16492}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.165167}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1654131}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.166361}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt_utils.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.167443}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1684108}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.168809}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.169239}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1698618}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1715178}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.178429}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.179096}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.179926}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.18258}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.183618}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1847}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.184999}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.185298}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.185632}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.185927}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1862211}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.187457}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.189622}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1908538}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1911738}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.191481}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.191792}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1920981}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1924312}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1930299}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.193235}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.193435}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.1948092}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.196816}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.200026}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.202662}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.203286}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.20349}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.203688}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.204575}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.205441}, "macro.ad_reporting.union_ctes": {"unique_id": "macro.ad_reporting.union_ctes", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "macros/union_ctes.sql", "original_file_path": "macros/union_ctes.sql", "name": "union_ctes", "macro_sql": "{% macro union_ctes(ctes=[]) %}\n\n{% for cte in ctes %}\nselect * from {{ cte }}\n\n{% if not loop.last -%}\n    union all\n{% endif -%}\n\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.2061372}, "macro.ad_reporting.field_name_conversion": {"unique_id": "macro.ad_reporting.field_name_conversion", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "macros/field_name_conversion.sql", "original_file_path": "macros/field_name_conversion.sql", "name": "field_name_conversion", "macro_sql": "{% macro field_name_conversion(platform=None, report_type=None, field_mapping=None, relation=None) %}\n\n{%- set consistent_fields = ['spend', 'impressions', 'clicks'] -%}\n{%- set account_fields = ['account_id', 'account_name'] -%}\n{%- set campaign_fields = ['campaign_id', 'campaign_name'] -%}\n{%- set ad_group_fields = ['ad_group_id', 'ad_group_name'] -%}\n{%- set ad_fields = ['ad_id', 'ad_name'] -%}\n{%- set url_fields = ['base_url', 'url_host', 'url_path', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_content', 'utm_term'] -%}\n{%- set keyword_fields = ['keyword_id','keyword_text','keyword_match_type'] -%}\n{%- set search_fields = ['keyword_id', 'keyword_text', 'search_match_type', 'search_query'] -%}\n\n{%- set fields = field_mapping.keys() -%}\n\n{%- set final_fields_superset={} -%}\n\n{#- Add the consistent_fields and account_fields to all reports regardless of type -#}\n{%- if report_type -%}\n    {%- for consistent_field in consistent_fields -%}\n        {%- do final_fields_superset.update({consistent_field: consistent_field}) -%}\n    {%- endfor -%}\n    {%- for account_field in account_fields -%}\n        {%- do final_fields_superset.update({account_field: account_field}) -%}\n    {%- endfor -%}\n{%- endif -%}\n\n{#- For campaign level reports and lower, add campaign_fields -#}\n{%- if report_type in ['campaign', 'ad_group', 'ad', 'url', 'keyword', 'search'] -%}\n    {%- for campaign_field in campaign_fields -%}\n        {%- do final_fields_superset.update({campaign_field: campaign_field}) -%}\n    {%- endfor -%}\n{%- endif -%}\n\n{#- For ad_group level reports, equivalent and lower, add ad_group_fields -#}\n{%- if report_type in ['ad_group', 'ad', 'url', 'keyword', 'search'] -%}\n    {%- for ad_group_field in ad_group_fields -%}\n        {%- do final_fields_superset.update({ad_group_field: ad_group_field}) -%}\n    {%- endfor -%}\n{%- endif -%}\n\n{#- For ad level reports, add ad_fields -#}\n{%- if report_type == 'ad' -%}\n    {%- for ad_field in ad_fields -%}\n        {%- do final_fields_superset.update({ad_field: ad_field})-%}\n    {%- endfor -%}\n{%- endif -%}\n\n{#- For url level reports, add url_fields -#}\n{%- if report_type == 'url' -%}\n    {%- for url_field in url_fields -%}\n        {%- do final_fields_superset.update({url_field: url_field})-%}\n    {%- endfor -%}\n{%- endif -%}\n\n{#- For keyword level reports, add keyword_fields -#}\n{%- if report_type == 'keyword' -%}\n    {%- for keyword_field in keyword_fields -%}\n        {%- do final_fields_superset.update({keyword_field: keyword_field})-%}\n    {%- endfor -%}\n{%- endif -%}\n\n{#- For search level reports, add search_fields -#}\n{%- if report_type == 'search' -%}\n    {%- for search_field in search_fields -%}\n        {%- do final_fields_superset.update({search_field: search_field})-%}\n    {%- endfor -%}\n{%- endif -%}\n\n{%- for field in fields -%}\n    {%- do final_fields_superset.update({field:field_mapping[field]}) -%}\n{%- endfor -%}\n\nselect \n    cast(date_day as DATE) as date_day,\n    cast( '{{ platform }}' as {{ dbt_utils.type_string() }}) as platform,\n\n    {% for field in final_fields_superset.keys()|sort() -%}\n    {% if field in ['clicks', 'impressions'] -%}\n    cast({{ final_fields_superset[field] }} as {{ dbt_utils.type_int() }}) as {{ field }}\n\n    {% elif field == 'spend' -%}\n    cast({{ final_fields_superset[field] }} as {{- dbt_utils.type_float() }}) as {{ field }}\n\n    {% elif '_id' in field or '_name' in field or 'url' in field or 'utm' in field or field in ['keyword_match_type', 'keyword_text', 'search_match_type', 'search_query'] -%}\n    cast({{ final_fields_superset[field] }} as {{- dbt_utils.type_string() }}) as {{ field }} \n    {% endif -%}\n    {%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}\nfrom {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.21419}, "macro.apple_search_ads_source.get_ad_group_history_columns": {"unique_id": "macro.apple_search_ads_source.get_ad_group_history_columns", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "macros/get_ad_group_history_columns.sql", "original_file_path": "macros/get_ad_group_history_columns.sql", "name": "get_ad_group_history_columns", "macro_sql": "{% macro get_ad_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"automated_keywords_opt_in\", \"datatype\": \"boolean\"},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cpa_goal_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"cpa_goal_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"default_cpc_bid_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"default_cpc_bid_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"modification_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"organization_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"serving_state_reasons\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"serving_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"storefronts\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.217875}, "macro.apple_search_ads_source.get_ad_level_report_columns": {"unique_id": "macro.apple_search_ads_source.get_ad_level_report_columns", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "macros/get_ad_level_report_columns.sql", "original_file_path": "macros/get_ad_level_report_columns.sql", "name": "get_ad_level_report_columns", "macro_sql": "{% macro get_ad_level_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"local_spend_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"local_spend_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"new_downloads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"redownloads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"taps\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('apple_search_ads__ad_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.220306}, "macro.apple_search_ads_source.get_search_term_report_columns": {"unique_id": "macro.apple_search_ads_source.get_search_term_report_columns", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "macros/get_search_term_report_columns.sql", "original_file_path": "macros/get_search_term_report_columns.sql", "name": "get_search_term_report_columns", "macro_sql": "{% macro get_search_term_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_group_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bid_amount_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"bid_amount_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"keyword\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"keyword_display_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"keyword_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"local_spend_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"local_spend_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"new_downloads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"redownloads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"search_term_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"search_term_text\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taps\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('apple_search_ads__search_term_passthrough_metrics')) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.224826}, "macro.apple_search_ads_source.get_keyword_report_columns": {"unique_id": "macro.apple_search_ads_source.get_keyword_report_columns", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "macros/get_keyword_report_columns.sql", "original_file_path": "macros/get_keyword_report_columns.sql", "name": "get_keyword_report_columns", "macro_sql": "{% macro get_keyword_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"local_spend_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"local_spend_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"new_downloads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"redownloads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"taps\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('apple_search_ads__keyword_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.226891}, "macro.apple_search_ads_source.get_campaign_report_columns": {"unique_id": "macro.apple_search_ads_source.get_campaign_report_columns", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "macros/get_campaign_report_columns.sql", "original_file_path": "macros/get_campaign_report_columns.sql", "name": "get_campaign_report_columns", "macro_sql": "{% macro get_campaign_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"local_spend_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"local_spend_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"new_downloads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"redownloads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"taps\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('apple_search_ads__campaign_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.228959}, "macro.apple_search_ads_source.get_campaign_history_columns": {"unique_id": "macro.apple_search_ads_source.get_campaign_history_columns", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"adam_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"budget_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"budget_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"budget_orders\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"daily_budget_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"daily_budget_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"loc_invoice_detail_buyer_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"loc_invoice_detail_buyer_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"loc_invoice_detail_client_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"loc_invoice_detail_order_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"modification_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"organization_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"payment_model\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"serving_state_reasons\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"serving_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.233988}, "macro.apple_search_ads_source.get_ad_history_columns": {"unique_id": "macro.apple_search_ads_source.get_ad_history_columns", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "macros/get_ad_history_columns.sql", "original_file_path": "macros/get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"creation_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"creative_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"modification_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"org_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"serving_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.236922}, "macro.apple_search_ads_source.get_ad_group_report_columns": {"unique_id": "macro.apple_search_ads_source.get_ad_group_report_columns", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "macros/get_ad_group_report_columns.sql", "original_file_path": "macros/get_ad_group_report_columns.sql", "name": "get_ad_group_report_columns", "macro_sql": "{% macro get_ad_group_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"local_spend_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"local_spend_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"new_downloads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"redownloads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"taps\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('apple_search_ads__ad_group_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.2390342}, "macro.apple_search_ads_source.get_organization_columns": {"unique_id": "macro.apple_search_ads_source.get_organization_columns", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "macros/get_organization_columns.sql", "original_file_path": "macros/get_organization_columns.sql", "name": "get_organization_columns", "macro_sql": "{% macro get_organization_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_model\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"role_names\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"time_zone\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.240889}, "macro.apple_search_ads_source.get_keyword_history_columns": {"unique_id": "macro.apple_search_ads_source.get_keyword_history_columns", "package_name": "apple_search_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/apple_search_ads_source", "path": "macros/get_keyword_history_columns.sql", "original_file_path": "macros/get_keyword_history_columns.sql", "name": "get_keyword_history_columns", "macro_sql": "{% macro get_keyword_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"bid_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"modification_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"text\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.24333}, "macro.pinterest_source.get_ad_group_history_columns": {"unique_id": "macro.pinterest_source.get_ad_group_history_columns", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_ad_group_history_columns.sql", "original_file_path": "macros/get_ad_group_history_columns.sql", "name": "get_ad_group_history_columns", "macro_sql": "{% macro get_ad_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.245298}, "macro.pinterest_source.get_pin_promotion_history_columns": {"unique_id": "macro.pinterest_source.get_pin_promotion_history_columns", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_pin_promotion_history_columns.sql", "original_file_path": "macros/get_pin_promotion_history_columns.sql", "name": "get_pin_promotion_history_columns", "macro_sql": "{% macro get_pin_promotion_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"android_deep_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"click_tracking_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"destination_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ios_deep_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_pin_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_removable\", \"datatype\": \"boolean\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pin_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"review_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"view_tracking_url\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.2489119}, "macro.pinterest_source.get_keyword_report_columns": {"unique_id": "macro.pinterest_source.get_keyword_report_columns", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_keyword_report_columns.sql", "original_file_path": "macros/get_keyword_report_columns.sql", "name": "get_keyword_report_columns", "macro_sql": "{% macro get_keyword_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clickthrough_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clickthrough_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impression_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impression_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"keyword_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pin_promotion_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend_in_micro_dollar\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.25198}, "macro.pinterest_source.get_pin_promotion_report_columns": {"unique_id": "macro.pinterest_source.get_pin_promotion_report_columns", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_pin_promotion_report_columns.sql", "original_file_path": "macros/get_pin_promotion_report_columns.sql", "name": "get_pin_promotion_report_columns", "macro_sql": "{% macro get_pin_promotion_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clickthrough_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"clickthrough_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impression_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impression_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"pin_promotion_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend_in_micro_dollar\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.254512}, "macro.pinterest_source.get_campaign_report_columns": {"unique_id": "macro.pinterest_source.get_campaign_report_columns", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_campaign_report_columns.sql", "original_file_path": "macros/get_campaign_report_columns.sql", "name": "get_campaign_report_columns", "macro_sql": "{% macro get_campaign_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clickthrough_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clickthrough_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impression_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impression_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend_in_micro_dollar\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.257021}, "macro.pinterest_source.get_campaign_history_columns": {"unique_id": "macro.pinterest_source.get_campaign_history_columns", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.258641}, "macro.pinterest_source.get_advertiser_history_columns": {"unique_id": "macro.pinterest_source.get_advertiser_history_columns", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_advertiser_history_columns.sql", "original_file_path": "macros/get_advertiser_history_columns.sql", "name": "get_advertiser_history_columns", "macro_sql": "{% macro get_advertiser_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"billing_profile_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"merchant_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"owner_user_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.261297}, "macro.pinterest_source.get_ad_group_report_columns": {"unique_id": "macro.pinterest_source.get_ad_group_report_columns", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_ad_group_report_columns.sql", "original_file_path": "macros/get_ad_group_report_columns.sql", "name": "get_ad_group_report_columns", "macro_sql": "{% macro get_ad_group_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clickthrough_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clickthrough_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impression_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impression_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend_in_micro_dollar\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.263951}, "macro.pinterest_source.get_keyword_history_columns": {"unique_id": "macro.pinterest_source.get_keyword_history_columns", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_keyword_history_columns.sql", "original_file_path": "macros/get_keyword_history_columns.sql", "name": "get_keyword_history_columns", "macro_sql": "{% macro get_keyword_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"archived\", \"datatype\": \"boolean\"},\n    {\"name\": \"bid\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"match_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.2663958}, "macro.pinterest_source.get_advertiser_report_columns": {"unique_id": "macro.pinterest_source.get_advertiser_report_columns", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_advertiser_report_columns.sql", "original_file_path": "macros/get_advertiser_report_columns.sql", "name": "get_advertiser_report_columns", "macro_sql": "{% macro get_advertiser_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clickthrough_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clickthrough_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impression_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impression_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend_in_micro_dollar\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.268399}, "macro.tiktok_ads_source.get_ad_group_history_columns": {"unique_id": "macro.tiktok_ads_source.get_ad_group_history_columns", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "macros/get_ad_group_history_columns.sql", "original_file_path": "macros/get_ad_group_history_columns.sql", "name": "get_ad_group_history_columns", "macro_sql": "{% macro get_ad_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"action_days\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"adgroup_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"adgroup_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"audience_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"budget\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"category\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"display_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"frequency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"frequency_schedule\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"gender\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"landing_page_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"interest_category_v_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"action_categories\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"age\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"languages\", \"datatype\": dbt_utils.type_string()}\n\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.272167}, "macro.tiktok_ads_source.get_ad_group_report_hourly_columns": {"unique_id": "macro.tiktok_ads_source.get_ad_group_report_hourly_columns", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "macros/get_ad_group_report_hourly_columns.sql", "original_file_path": "macros/get_ad_group_report_hourly_columns.sql", "name": "get_ad_group_report_hourly_columns", "macro_sql": "{% macro get_ad_group_report_hourly_columns() %}\n\n{% set columns = [\n    {\"name\": \"adgroup_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"average_video_play\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"average_video_play_per_user\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cost_per_conversion\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpc\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpm\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"ctr\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"follows\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"likes\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"profile_visits\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"reach\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"shares\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"stat_time_hour\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"video_play_actions\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views_p_25\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views_p_50\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views_p_75\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_watched_2_s\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_watched_6_s\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('tiktok_ads__ad_group_hourly_passthrough_metrics')) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_numeric", "macro.dbt_utils.type_float", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.2776031}, "macro.tiktok_ads_source.get_advertiser_columns": {"unique_id": "macro.tiktok_ads_source.get_advertiser_columns", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "macros/get_advertiser_columns.sql", "original_file_path": "macros/get_advertiser_columns.sql", "name": "get_advertiser_columns", "macro_sql": "{% macro get_advertiser_columns() %}\n\n{% set columns = [\n    {\"name\": \"address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"contacter\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"industry\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"phone_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"telephone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.280865}, "macro.tiktok_ads_source.get_campaign_history_columns": {"unique_id": "macro.tiktok_ads_source.get_campaign_history_columns", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"campaign_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"split_test_variable\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.282465}, "macro.tiktok_ads_source.get_campaign_report_hourly_columns": {"unique_id": "macro.tiktok_ads_source.get_campaign_report_hourly_columns", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "macros/get_campaign_report_hourly_columns.sql", "original_file_path": "macros/get_campaign_report_hourly_columns.sql", "name": "get_campaign_report_hourly_columns", "macro_sql": "{% macro get_campaign_report_hourly_columns() %}\n\n{% set columns = [\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"average_video_play\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"average_video_play_per_user\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cost_per_conversion\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpc\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpm\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"ctr\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"follows\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"likes\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"profile_visits\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"reach\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"shares\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"stat_time_hour\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"video_play_actions\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views_p_25\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views_p_50\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views_p_75\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_watched_2_s\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_watched_6_s\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('tiktok_ads__campaign_hourly_passthrough_metrics')) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_numeric", "macro.dbt_utils.type_float", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.2879841}, "macro.tiktok_ads_source.get_ad_history_columns": {"unique_id": "macro.tiktok_ads_source.get_ad_history_columns", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "macros/get_ad_history_columns.sql", "original_file_path": "macros/get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"ad_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"adgroup_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"call_to_action\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"click_tracking_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impression_tracking_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"landing_page_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.29036}, "macro.tiktok_ads_source.get_ad_report_hourly_columns": {"unique_id": "macro.tiktok_ads_source.get_ad_report_hourly_columns", "package_name": "tiktok_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/tiktok_ads_source", "path": "macros/get_ad_report_hourly_columns.sql", "original_file_path": "macros/get_ad_report_hourly_columns.sql", "name": "get_ad_report_hourly_columns", "macro_sql": "{% macro get_ad_report_hourly_columns() %}\n\n{% set columns = [\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"average_video_play\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"average_video_play_per_user\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cost_per_conversion\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpc\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpm\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"ctr\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"follows\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"likes\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"profile_visits\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"reach\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"shares\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"stat_time_hour\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"video_play_actions\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views_p_25\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views_p_50\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views_p_75\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_watched_2_s\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_watched_6_s\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('tiktok_ads__ad_hourly_passthrough_metrics')) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_numeric", "macro.dbt_utils.type_float", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.2957}, "macro.facebook_ads_source.get_ad_set_history_columns": {"unique_id": "macro.facebook_ads_source.get_ad_set_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_ad_set_history_columns.sql", "original_file_path": "macros/get_ad_set_history_columns.sql", "name": "get_ad_set_history_columns", "macro_sql": "{% macro get_ad_set_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"bid_strategy\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"budget_remaining\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.2981892}, "macro.facebook_ads_source.get_creative_history_columns": {"unique_id": "macro.facebook_ads_source.get_creative_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_creative_history_columns.sql", "original_file_path": "macros/get_creative_history_columns.sql", "name": "get_creative_history_columns", "macro_sql": "{% macro get_creative_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"page_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_page_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url_tags\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"asset_feed_spec_link_urls\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_child_attachments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_caption\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_android\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_ios\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_ipad\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_iphone\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.302038}, "macro.facebook_ads_source.get_campaign_history_columns": {"unique_id": "macro.facebook_ads_source.get_campaign_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"stop_time\", \"datatype\": dbt_utils.type_timestamp()},    \n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lifetime_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"budget_remaining\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3045251}, "macro.facebook_ads_source.get_basic_ad_columns": {"unique_id": "macro.facebook_ads_source.get_basic_ad_columns", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_basic_ad_columns.sql", "original_file_path": "macros/get_basic_ad_columns.sql", "name": "get_basic_ad_columns", "macro_sql": "{% macro get_basic_ad_columns() %}\n\n{% set columns = [\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"adset_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"inline_link_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"reach\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"frequency\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('facebook_ads__basic_ad_passthrough_metrics')) }}\n\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.306978}, "macro.facebook_ads_source.get_account_history_columns": {"unique_id": "macro.facebook_ads_source.get_account_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_account_history_columns.sql", "original_file_path": "macros/get_account_history_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone_name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.309115}, "macro.facebook_ads_source.get_ad_history_columns": {"unique_id": "macro.facebook_ads_source.get_ad_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_ad_history_columns.sql", "original_file_path": "macros/get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3108768}, "macro.snapchat_ads_source.get_campaign_hourly_report_columns": {"unique_id": "macro.snapchat_ads_source.get_campaign_hourly_report_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_campaign_hourly_report_columns.sql", "original_file_path": "macros/get_campaign_hourly_report_columns.sql", "name": "get_campaign_hourly_report_columns", "macro_sql": "{% macro get_campaign_hourly_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"attachment_quartile_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attachment_quartile_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attachment_quartile_3\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attachment_total_view_time_millis\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attachment_view_completion\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"quartile_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"quartile_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"quartile_3\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"saves\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"screen_time_millis\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"shares\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"swipes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_views\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"view_completion\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"view_time_millis\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('snapchat_ads__campaign_hourly_report_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.315084}, "macro.snapchat_ads_source.get_ad_squad_history_columns": {"unique_id": "macro.snapchat_ads_source.get_ad_squad_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_ad_squad_history_columns.sql", "original_file_path": "macros/get_ad_squad_history_columns.sql", "name": "get_ad_squad_history_columns", "macro_sql": "{% macro get_ad_squad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.31672}, "macro.snapchat_ads_source.get_creative_history_columns": {"unique_id": "macro.snapchat_ads_source.get_creative_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_creative_history_columns.sql", "original_file_path": "macros/get_creative_history_columns.sql", "name": "get_creative_history_columns", "macro_sql": "{% macro get_creative_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"web_view_url\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.31852}, "macro.snapchat_ads_source.get_ad_hourly_report_columns": {"unique_id": "macro.snapchat_ads_source.get_ad_hourly_report_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_ad_hourly_report_columns.sql", "original_file_path": "macros/get_ad_hourly_report_columns.sql", "name": "get_ad_hourly_report_columns", "macro_sql": "{% macro get_ad_hourly_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"attachment_quartile_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_quartile_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_quartile_3\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_total_view_time_millis\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_view_completion\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quartile_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quartile_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quartile_3\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"saves\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"screen_time_millis\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"shares\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"swipes\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"view_completion\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"view_time_millis\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('snapchat_ads__ad_hourly_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3227232}, "macro.snapchat_ads_source.get_ad_squad_hourly_report_columns": {"unique_id": "macro.snapchat_ads_source.get_ad_squad_hourly_report_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_ad_squad_hourly_report_columns.sql", "original_file_path": "macros/get_ad_squad_hourly_report_columns.sql", "name": "get_ad_squad_hourly_report_columns", "macro_sql": "{% macro get_ad_squad_hourly_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"ad_squad_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"attachment_quartile_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attachment_quartile_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attachment_quartile_3\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attachment_total_view_time_millis\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attachment_view_completion\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"quartile_1\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"quartile_2\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"quartile_3\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"saves\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"screen_time_millis\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"shares\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"swipes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_views\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"view_completion\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"view_time_millis\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('snapchat_ads__ad_squad_hourly_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.326838}, "macro.snapchat_ads_source.get_campaign_history_columns": {"unique_id": "macro.snapchat_ads_source.get_campaign_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3284638}, "macro.snapchat_ads_source.get_creative_url_tag_history_columns": {"unique_id": "macro.snapchat_ads_source.get_creative_url_tag_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_creative_url_tag_history_columns.sql", "original_file_path": "macros/get_creative_url_tag_history_columns.sql", "name": "get_creative_url_tag_history_columns", "macro_sql": "{% macro get_creative_url_tag_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"key\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3297431}, "macro.snapchat_ads_source.get_ad_history_columns": {"unique_id": "macro.snapchat_ads_source.get_ad_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_ad_history_columns.sql", "original_file_path": "macros/get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_squad_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3315132}, "macro.snapchat_ads_source.get_ad_account_history_columns": {"unique_id": "macro.snapchat_ads_source.get_ad_account_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_ad_account_history_columns.sql", "original_file_path": "macros/get_ad_account_history_columns.sql", "name": "get_ad_account_history_columns", "macro_sql": "{% macro get_ad_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"advertiser\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.333686}, "macro.twitter_ads_source.get_tweet_columns": {"unique_id": "macro.twitter_ads_source.get_tweet_columns", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/get_tweet_columns.sql", "original_file_path": "macros/get_tweet_columns.sql", "name": "get_tweet_columns", "macro_sql": "{% macro get_tweet_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"card_uri\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"coordinates_coordinates\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"coordinates_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"favorite_count\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"favorited\", \"datatype\": \"boolean\"},\n    {\"name\": \"followers\", \"datatype\": \"boolean\"},\n    {\"name\": \"full_text\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"geo_coordinates\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"geo_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"in_reply_to_screen_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"in_reply_to_status_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"in_reply_to_user_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lang\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"media_key\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"retweet_count\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"retweeted\", \"datatype\": \"boolean\"},\n    {\"name\": \"source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"truncated\", \"datatype\": \"boolean\"},\n    {\"name\": \"tweet_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.338816}, "macro.twitter_ads_source.get_line_item_keywords_report_columns": {"unique_id": "macro.twitter_ads_source.get_line_item_keywords_report_columns", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/get_line_item_keywords_report_columns.sql", "original_file_path": "macros/get_line_item_keywords_report_columns.sql", "name": "get_line_item_keywords_report_columns", "macro_sql": "{% macro get_line_item_keywords_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"line_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"segment\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__line_item_keywords_report_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.341352}, "macro.twitter_ads_source.get_line_item_report_columns": {"unique_id": "macro.twitter_ads_source.get_line_item_report_columns", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/get_line_item_report_columns.sql", "original_file_path": "macros/get_line_item_report_columns.sql", "name": "get_line_item_report_columns", "macro_sql": "{% macro get_line_item_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"line_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt_utils.type_int()},\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__line_item_report_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3437068}, "macro.twitter_ads_source.get_campaign_report_columns": {"unique_id": "macro.twitter_ads_source.get_campaign_report_columns", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/get_campaign_report_columns.sql", "original_file_path": "macros/get_campaign_report_columns.sql", "name": "get_campaign_report_columns", "macro_sql": "{% macro get_campaign_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"placement\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__campaign_report_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.346016}, "macro.twitter_ads_source.get_account_history_columns": {"unique_id": "macro.twitter_ads_source.get_account_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"approval_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"industry_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"salt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone_switch_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.352472}, "macro.twitter_ads_source.get_campaign_history_columns": {"unique_id": "macro.twitter_ads_source.get_campaign_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"daily_budget_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"duration_in_days\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"entity_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"frequency_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"funding_instrument_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"servable\", \"datatype\": \"boolean\"},\n    {\"name\": \"standard_delivery\", \"datatype\": \"boolean\"},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"total_budget_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.355637}, "macro.twitter_ads_source.get_line_item_history_columns": {"unique_id": "macro.twitter_ads_source.get_line_item_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_line_item_history_columns", "macro_sql": "{% macro get_line_item_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"advertiser_domain\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_user_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"automatically_select_bid\", \"datatype\": \"boolean\"},\n    {\"name\": \"bid_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bid_unit\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"charge_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"entity_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"objective\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"optimization\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"primary_web_event_tag\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"product_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"target_cpa_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"total_budget_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.359786}, "macro.twitter_ads_source.get_promoted_tweet_history_columns": {"unique_id": "macro.twitter_ads_source.get_promoted_tweet_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_promoted_tweet_history_columns", "macro_sql": "{% macro get_promoted_tweet_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"approval_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"entity_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"line_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tweet_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3615732}, "macro.twitter_ads_source.get_tweet_url_columns": {"unique_id": "macro.twitter_ads_source.get_tweet_url_columns", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_tweet_url_columns", "macro_sql": "{% macro get_tweet_url_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"display_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expanded_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"indices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tweet_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.362994}, "macro.twitter_ads_source.get_promoted_tweet_report_columns": {"unique_id": "macro.twitter_ads_source.get_promoted_tweet_report_columns", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_promoted_tweet_report_columns", "macro_sql": "{% macro get_promoted_tweet_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"placement\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_tweet_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__promoted_tweet_report_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.364852}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.365699}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3658571}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.366008}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.366157}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.366478}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.366633}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.366784}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.366934}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.368076}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.368463}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.368839}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.369138}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.369432}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.37011}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.370324}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.370532}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3707361}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.37143}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.371583}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3717299}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.372}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.372162}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.372307}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.37291}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.374421}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.374814}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.37522}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.377116}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.37863}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.380281}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.380849}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.382049}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.390049}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.391188}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.39209}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.394619}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.395242}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.395455}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.396536}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.3984451}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.399654}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.400743}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.40225}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4034371}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.405316}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.407281}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4091551}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.409801}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.410887}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.412811}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.41404}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.416291}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.417145}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.419392}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4227982}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_utils.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.424236}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.426461}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4281678}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.428757}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4302652}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.430994}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.433254}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.434135}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.43667}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4376261}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4386759}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.43952}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.441366}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.443253}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.444957}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4479392}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.448888}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4495091}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4509382}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.453215}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4552362}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4558249}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.456695}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4576378}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.459127}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.460685}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.46233}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4639082}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.465534}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4672482}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4699368}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.471785}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4734988}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.474742}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4762769}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.478575}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.47936}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.480875}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.482352}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.483619}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4853098}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.486859}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.494047}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.4995599}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.500585}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.50269}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.5043058}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.5053692}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.5083342}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.510984}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.515954}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.5176241}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.518833}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.5201762}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1660323529.522754}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "microsoft_ads_source.account_id": {"unique_id": "microsoft_ads_source.account_id", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_id", "block_contents": "The ID of the account."}, "microsoft_ads_source.account_name": {"unique_id": "microsoft_ads_source.account_name", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_name", "block_contents": "The name of the account."}, "microsoft_ads_source.account_timezone": {"unique_id": "microsoft_ads_source.account_timezone", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_timezone", "block_contents": "The time zone associated with this account."}, "microsoft_ads_source.ad_distribution": {"unique_id": "microsoft_ads_source.ad_distribution", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_distribution", "block_contents": "The distribution medium associated with this record."}, "microsoft_ads_source.ad_id": {"unique_id": "microsoft_ads_source.ad_id", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_id", "block_contents": "The ID of the corresponding ad."}, "microsoft_ads_source.ad_group_status": {"unique_id": "microsoft_ads_source.ad_group_status", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_status", "block_contents": "The status of this ad group; see the following [documentation](https://help.ads.microsoft.com/apex/index/3/en/53094) for more information on values and definitions."}, "microsoft_ads_source.ad_name": {"unique_id": "microsoft_ads_source.ad_name", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_name", "block_contents": "The name of the corresponding ad; `title_part_1` is used as the ad name as a proxy as one is not provided by the data source."}, "microsoft_ads_source.ad_group_id": {"unique_id": "microsoft_ads_source.ad_group_id", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_id", "block_contents": "The ID of the corresponding ad group."}, "microsoft_ads_source.ad_group_name": {"unique_id": "microsoft_ads_source.ad_group_name", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_name", "block_contents": "The name of the corresponding ad group."}, "microsoft_ads_source.ad_status": {"unique_id": "microsoft_ads_source.ad_status", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_status", "block_contents": "The status of this ad; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/adstatus?view=bingads-13) for more information on values and definitions."}, "microsoft_ads_source.ad_type": {"unique_id": "microsoft_ads_source.ad_type", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_type", "block_contents": "The ad type associated with this record; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/adtype?view=bingads-13) for more information on values and definitions."}, "microsoft_ads_source.bid_match_type": {"unique_id": "microsoft_ads_source.bid_match_type", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "bid_match_type", "block_contents": "The bid match type associated with this record; values include 'Broad', 'Exact', 'Phrase'."}, "microsoft_ads_source.campaign_id": {"unique_id": "microsoft_ads_source.campaign_id", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_id", "block_contents": "The ID of the campaign."}, "microsoft_ads_source.campaign_name": {"unique_id": "microsoft_ads_source.campaign_name", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_name", "block_contents": "The name of the campaign."}, "microsoft_ads_source.campaign_status": {"unique_id": "microsoft_ads_source.campaign_status", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_status", "block_contents": "The status of this campaign; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/campaignstatus?view=bingads-13) for more information on values and definitions."}, "microsoft_ads_source.campaign_timezone": {"unique_id": "microsoft_ads_source.campaign_timezone", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_timezone", "block_contents": "The time zone associated with this campaign."}, "microsoft_ads_source.campaign_type": {"unique_id": "microsoft_ads_source.campaign_type", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_type", "block_contents": "The campaign type associated with this record; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/campaigntype?view=bingads-13) for more information on values and definitions."}, "microsoft_ads_source.clicks": {"unique_id": "microsoft_ads_source.clicks", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "clicks", "block_contents": "The number of clicks that occurred by the grain of the report."}, "microsoft_ads_source.currency_code": {"unique_id": "microsoft_ads_source.currency_code", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "currency_code", "block_contents": "The currency code associated with spend and, if applicable, other metrics associated with currency."}, "microsoft_ads_source.date_day": {"unique_id": "microsoft_ads_source.date_day", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "date_day", "block_contents": "The date of the performance report."}, "microsoft_ads_source.delivered_match_type": {"unique_id": "microsoft_ads_source.delivered_match_type", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "delivered_match_type", "block_contents": "The delivered match type associated with this record; values include 'Broad', 'Exact', 'Phrase'."}, "microsoft_ads_source.device_os": {"unique_id": "microsoft_ads_source.device_os", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "device_os", "block_contents": "The device operating system associated with this record; values include but may not be limited to 'Windows', 'iOS', 'Android', 'Other', 'BlackBerry' and 'Unknown'."}, "microsoft_ads_source.device_type": {"unique_id": "microsoft_ads_source.device_type", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "device_type", "block_contents": "The device type associated with this record; values include but may not be limited to 'Computer', 'Smartphone', 'Tablet' and 'Unknown'."}, "microsoft_ads_source.end_date": {"unique_id": "microsoft_ads_source.end_date", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "end_date", "block_contents": "The date in which this ad group will no longer run."}, "microsoft_ads_source.final_url": {"unique_id": "microsoft_ads_source.final_url", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "final_url", "block_contents": "The full URL that the ad links to."}, "microsoft_ads_source.impressions": {"unique_id": "microsoft_ads_source.impressions", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "impressions", "block_contents": "The number of impressions that occurred by the grain of the report."}, "microsoft_ads_source.is_most_recent_record": {"unique_id": "microsoft_ads_source.is_most_recent_record", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether a record is the most recent version of that record."}, "microsoft_ads_source.keyword_id": {"unique_id": "microsoft_ads_source.keyword_id", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "keyword_id", "block_contents": "The ID of the keyword."}, "microsoft_ads_source.keyword_name": {"unique_id": "microsoft_ads_source.keyword_name", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "keyword_name", "block_contents": "The keyword(s) associated with this record."}, "microsoft_ads_source.keyword_status": {"unique_id": "microsoft_ads_source.keyword_status", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "keyword_status", "block_contents": "The status of this keyword; see the following [documentation](https://docs.microsoft.com/en-us/advertising/campaign-management-service/keywordstatus?view=bingads-13) for more information on values and definitions."}, "microsoft_ads_source.language": {"unique_id": "microsoft_ads_source.language", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "language", "block_contents": "The language that the associated ad was viewed in."}, "microsoft_ads_source.match_type": {"unique_id": "microsoft_ads_source.match_type", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "match_type", "block_contents": "The match type associated with this record; values contain but may not be limited to 'Broad', 'Exact', 'Phrase'. Please refer to Microsoft Ad's [documentation](https://help.ads.microsoft.com/#apex/ads/en/50822/1)."}, "microsoft_ads_source.modified_at": {"unique_id": "microsoft_ads_source.modified_at", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "modified_at", "block_contents": "The time each version of the object was last modified, i.e. when that version of the object was 'created'."}, "microsoft_ads_source.network": {"unique_id": "microsoft_ads_source.network", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "network", "block_contents": "The network associated with this record."}, "microsoft_ads_source.search_query": {"unique_id": "microsoft_ads_source.search_query", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "search_query", "block_contents": "The search query string associated with this record."}, "microsoft_ads_source.spend": {"unique_id": "microsoft_ads_source.spend", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "spend", "block_contents": "The amount of spend that occurred by the grain of the report."}, "microsoft_ads_source.start_date": {"unique_id": "microsoft_ads_source.start_date", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "start_date", "block_contents": "The date in which an ad group starts running."}, "microsoft_ads_source.time_zone": {"unique_id": "microsoft_ads_source.time_zone", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "time_zone", "block_contents": "The time zone associated with this record."}, "microsoft_ads_source.top_vs_other": {"unique_id": "microsoft_ads_source.top_vs_other", "package_name": "microsoft_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "top_vs_other", "block_contents": "The position of the ad associated with this record. For more information, refer to Microsoft [documentation](https://help.ads.microsoft.com/apex/index/22/en/14009)."}, "google_ads_source._fivetran_id": {"unique_id": "google_ads_source._fivetran_id", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_id", "block_contents": "Unique ID used by Fivetran to sync and dedupe data."}, "google_ads_source._fivetran_synced": {"unique_id": "google_ads_source._fivetran_synced", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "Timestamp of when a record was last synced."}, "google_ads_source.account_descriptive_name": {"unique_id": "google_ads_source.account_descriptive_name", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_descriptive_name", "block_contents": "The descriptive name of the Customer account."}, "google_ads_source.ad_group_id": {"unique_id": "google_ads_source.ad_group_id", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_id", "block_contents": "The ID of the AdGroup."}, "google_ads_source.ad_group_name": {"unique_id": "google_ads_source.ad_group_name", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_name", "block_contents": "The name of the AdGroup."}, "google_ads_source.ad_group_status": {"unique_id": "google_ads_source.ad_group_status", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_status", "block_contents": "Status of the ad group."}, "google_ads_source.campaign_id": {"unique_id": "google_ads_source.campaign_id", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_id", "block_contents": "The ID of the Campaign."}, "google_ads_source.ad_id": {"unique_id": "google_ads_source.ad_id", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_id", "block_contents": "The ID of the Ad."}, "google_ads_source.account_id": {"unique_id": "google_ads_source.account_id", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_id", "block_contents": "The ID of the Account."}, "google_ads_source.ad_status": {"unique_id": "google_ads_source.ad_status", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_status", "block_contents": "Status of the Ad."}, "google_ads_source.campaign_name": {"unique_id": "google_ads_source.campaign_name", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_name", "block_contents": "The name of the Campaign."}, "google_ads_source.campaign_status": {"unique_id": "google_ads_source.campaign_status", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_status", "block_contents": "Status of the Campaign."}, "google_ads_source.clicks": {"unique_id": "google_ads_source.clicks", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "clicks", "block_contents": "The number of clicks."}, "google_ads_source.cost": {"unique_id": "google_ads_source.cost", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "cost", "block_contents": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period."}, "google_ads_source.date": {"unique_id": "google_ads_source.date", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "date", "block_contents": "The date being reported on."}, "google_ads_source.effective_final_url": {"unique_id": "google_ads_source.effective_final_url", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "effective_final_url", "block_contents": "Effective final URL of the impressions."}, "google_ads_source.external_customer_id": {"unique_id": "google_ads_source.external_customer_id", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "external_customer_id", "block_contents": "The Customer ID."}, "google_ads_source.impressions": {"unique_id": "google_ads_source.impressions", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "impressions", "block_contents": "Count of how often your ad has appeared on a search results page or website on the Google Network."}, "google_ads_source.criteria_id": {"unique_id": "google_ads_source.criteria_id", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria_id", "block_contents": "The Criterion ID."}, "google_ads_source.gcl_id": {"unique_id": "google_ads_source.gcl_id", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "gcl_id", "block_contents": "The Google Click ID."}, "google_ads_source.criteria": {"unique_id": "google_ads_source.criteria", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria", "block_contents": "Descriptive string for the Criterion."}, "google_ads_source.criteria_destination_url": {"unique_id": "google_ads_source.criteria_destination_url", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria_destination_url", "block_contents": "Destination URL of the criterion that triggered ads."}, "google_ads_source.criteria_type": {"unique_id": "google_ads_source.criteria_type", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria_type", "block_contents": "The type of the Criterion."}, "google_ads_source.base_url": {"unique_id": "google_ads_source.base_url", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "base_url", "block_contents": "The base URL of the ad, extracted from the `final_urls`."}, "google_ads_source.url_host": {"unique_id": "google_ads_source.url_host", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url_host", "block_contents": "The URL host of the ad, extracted from the `final_urls`."}, "google_ads_source.url_path": {"unique_id": "google_ads_source.url_path", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url_path", "block_contents": "The URL path of the ad, extracted from the `final_urls`."}, "google_ads_source.utm_source": {"unique_id": "google_ads_source.utm_source", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_source", "block_contents": "The utm_source parameter of the ad, extracted from the `final_urls`."}, "google_ads_source.utm_medium": {"unique_id": "google_ads_source.utm_medium", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_medium", "block_contents": "The utm_medium parameter of the ad, extracted from the `final_urls`."}, "google_ads_source.utm_campaign": {"unique_id": "google_ads_source.utm_campaign", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_campaign", "block_contents": "The utm_campaign parameter of the ad, extracted from the `final_urls`."}, "google_ads_source.utm_content": {"unique_id": "google_ads_source.utm_content", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_content", "block_contents": "The utm_content parameter of the ad, extracted from the `final_urls`."}, "google_ads_source.utm_term": {"unique_id": "google_ads_source.utm_term", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_term", "block_contents": "The utm_term parameter of the ad, extracted from the `final_urls`."}, "google_ads_source.updated_at": {"unique_id": "google_ads_source.updated_at", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "updated_at", "block_contents": "Timestamp of when the record was last updated in Google Ads."}, "google_ads_source.ad_type": {"unique_id": "google_ads_source.ad_type", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_type", "block_contents": "The type of the ad in Google Ads."}, "google_ads_source.ad_group_type": {"unique_id": "google_ads_source.ad_group_type", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_type", "block_contents": "The type of the ad group in Google Ads."}, "google_ads_source.is_most_recent_record": {"unique_id": "google_ads_source.is_most_recent_record", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether the record is the most recent version of the object."}, "google_ads_source.ad_network_type": {"unique_id": "google_ads_source.ad_network_type", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_network_type", "block_contents": "The Google Ad network type used across the account."}, "google_ads_source.device": {"unique_id": "google_ads_source.device", "package_name": "google_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "device", "block_contents": "Account ad performance per unique device where the ads were served."}, "ad_reporting.account_id": {"unique_id": "ad_reporting.account_id", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_id", "block_contents": "The ID representing the account."}, "ad_reporting.account_name": {"unique_id": "ad_reporting.account_name", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_name", "block_contents": "The name of the account, if present in the source data."}, "ad_reporting.ad_group_id": {"unique_id": "ad_reporting.ad_group_id", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_id", "block_contents": "The ID representing the ad group, if present in the source data."}, "ad_reporting.ad_group_name": {"unique_id": "ad_reporting.ad_group_name", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_name", "block_contents": "The name of the ad group, if present in the source data."}, "ad_reporting.ad_id": {"unique_id": "ad_reporting.ad_id", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_id", "block_contents": "The ID representing the ad, if present in the source data."}, "ad_reporting.ad_name": {"unique_id": "ad_reporting.ad_name", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_name", "block_contents": "The name of the ad, if present in the source data."}, "ad_reporting.base_url": {"unique_id": "ad_reporting.base_url", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "base_url", "block_contents": "The base url of the ad."}, "ad_reporting.campaign_id": {"unique_id": "ad_reporting.campaign_id", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_id", "block_contents": "The ID representing the campaign, if present in the source data."}, "ad_reporting.campaign_name": {"unique_id": "ad_reporting.campaign_name", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_name", "block_contents": "The name of the campaign, if present in the source data."}, "ad_reporting.clicks": {"unique_id": "ad_reporting.clicks", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "clicks", "block_contents": "The count of clicks."}, "ad_reporting.date_day": {"unique_id": "ad_reporting.date_day", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "date_day", "block_contents": "The date of the report."}, "ad_reporting.impressions": {"unique_id": "ad_reporting.impressions", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "impressions", "block_contents": "The count of impressions."}, "ad_reporting.keyword_id": {"unique_id": "ad_reporting.keyword_id", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "keyword_id", "block_contents": "The ID representing the keyword, if present in the source data."}, "ad_reporting.keyword_match_type": {"unique_id": "ad_reporting.keyword_match_type", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "keyword_match_type", "block_contents": "The keyword match type associated with this record."}, "ad_reporting.keyword_text": {"unique_id": "ad_reporting.keyword_text", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "keyword_text", "block_contents": "The keyword text."}, "ad_reporting.platform": {"unique_id": "ad_reporting.platform", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "platform", "block_contents": "The ad platform associated with this record."}, "ad_reporting.search_match_type": {"unique_id": "ad_reporting.search_match_type", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "search_match_type", "block_contents": "The search match type associated with this record."}, "ad_reporting.search_query": {"unique_id": "ad_reporting.search_query", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "search_query", "block_contents": "The search query text."}, "ad_reporting.spend": {"unique_id": "ad_reporting.spend", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "spend", "block_contents": "The cost of the ads."}, "ad_reporting.url_host": {"unique_id": "ad_reporting.url_host", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url_host", "block_contents": "The URL host of the ad."}, "ad_reporting.url_path": {"unique_id": "ad_reporting.url_path", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url_path", "block_contents": "The URL path of the ad."}, "ad_reporting.utm_campaign": {"unique_id": "ad_reporting.utm_campaign", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_campaign", "block_contents": "The utm_campaign parameter of the ad."}, "ad_reporting.utm_content": {"unique_id": "ad_reporting.utm_content", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_content", "block_contents": "The utm_content parameter of the ad."}, "ad_reporting.utm_medium": {"unique_id": "ad_reporting.utm_medium", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_medium", "block_contents": "The utm_medium parameter of the ad."}, "ad_reporting.utm_source": {"unique_id": "ad_reporting.utm_source", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_source", "block_contents": "The utm_source parameter of the ad."}, "ad_reporting.utm_term": {"unique_id": "ad_reporting.utm_term", "package_name": "ad_reporting", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_term", "block_contents": "The utm_term parameter of the ad."}, "pinterest_source._fivetran_synced": {"unique_id": "pinterest_source._fivetran_synced", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "Timestamp of when a record was last synced."}, "pinterest_source.is_most_recent_record": {"unique_id": "pinterest_source.is_most_recent_record", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether the record is the most recent version of the object."}, "pinterest_source.date_day": {"unique_id": "pinterest_source.date_day", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "date_day", "block_contents": "The performance date of the record."}, "pinterest_source.ad_group_id": {"unique_id": "pinterest_source.ad_group_id", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_id", "block_contents": "The ID of the related Ad group."}, "pinterest_source.pin_promotion_id": {"unique_id": "pinterest_source.pin_promotion_id", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "pin_promotion_id", "block_contents": "The ID of the related Pin promotion."}, "pinterest_source.campaign_id": {"unique_id": "pinterest_source.campaign_id", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_id", "block_contents": "The ID of the related Campaign."}, "pinterest_source.advertiser_id": {"unique_id": "pinterest_source.advertiser_id", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "advertiser_id", "block_contents": "The ID of the related Advertiser."}, "pinterest_source.impressions": {"unique_id": "pinterest_source.impressions", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "impressions", "block_contents": "The number of paid and earned impressions that occurred on the day of the record."}, "pinterest_source.clicks": {"unique_id": "pinterest_source.clicks", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "clicks", "block_contents": "The number of paid and earned clicks that occurred on the day of the record."}, "pinterest_source.spend": {"unique_id": "pinterest_source.spend", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "spend", "block_contents": "The amount of spend that occurred on the day of the record."}, "pinterest_source.updated_at": {"unique_id": "pinterest_source.updated_at", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "updated_at", "block_contents": "Timestamp of when a record was last updated."}, "pinterest_source.created_at": {"unique_id": "pinterest_source.created_at", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "created_at", "block_contents": "Timestamp of when a record was created."}, "pinterest_source.spend_in_micro_dollar": {"unique_id": "pinterest_source.spend_in_micro_dollar", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "spend_in_micro_dollar", "block_contents": "The amount of spend in micro dollars that occurred on the day of the record."}, "pinterest_source.clickthrough_1": {"unique_id": "pinterest_source.clickthrough_1", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "clickthrough_1", "block_contents": "The number of paid pin clicks that occurred on the day of the record."}, "pinterest_source.clickthrough_2": {"unique_id": "pinterest_source.clickthrough_2", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "clickthrough_2", "block_contents": "The number of earned outbound clicks that occurred on the day of the record."}, "pinterest_source.impression_1": {"unique_id": "pinterest_source.impression_1", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "impression_1", "block_contents": "The number of paid pin impressions that occurred on the day of the record."}, "pinterest_source.impression_2": {"unique_id": "pinterest_source.impression_2", "package_name": "pinterest_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "impression_2", "block_contents": "The number of earned pin impressions that occurred on the day of the record."}, "facebook_ads_source._fivetran_synced": {"unique_id": "facebook_ads_source._fivetran_synced", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "facebook_ads_source.is_most_recent_record": {"unique_id": "facebook_ads_source.is_most_recent_record", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it."}, "facebook_ads_source.updated_time": {"unique_id": "facebook_ads_source.updated_time", "package_name": "facebook_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "updated_time", "block_contents": "The timestamp of the last update of a record."}, "snapchat_ads_source._fivetran_synced": {"unique_id": "snapchat_ads_source._fivetran_synced", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "snapchat_ads_source.is_most_recent_record": {"unique_id": "snapchat_ads_source.is_most_recent_record", "package_name": "snapchat_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether a record is the most recent version of that record."}, "twitter_ads_source._fivetran_synced": {"unique_id": "twitter_ads_source._fivetran_synced", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "twitter_ads_source.created_at": {"unique_id": "twitter_ads_source.created_at", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "created_at", "block_contents": "The timestamp the account was created."}, "twitter_ads_source.updated_at": {"unique_id": "twitter_ads_source.updated_at", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "updated_at", "block_contents": "The timestamp the account was last updated."}, "twitter_ads_source.deleted": {"unique_id": "twitter_ads_source.deleted", "package_name": "twitter_ads_source", "root_path": "/Users/sheri.nguyen/dbt-packages/ad_reporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "deleted", "block_contents": "Whether the record has been deleted or not."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.ad_reporting_integration_tests.twitter_line_item_history_data": [], "seed.ad_reporting_integration_tests.apple_ad_group_history_data": [], "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data": [], "seed.ad_reporting_integration_tests.linkedin_account_history_data": [], "seed.ad_reporting_integration_tests.apple_campaign_history_data": [], "seed.ad_reporting_integration_tests.linkedin_campaign_history_data": [], "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data": [], "seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data": [], "seed.ad_reporting_integration_tests.twitter_campaign_history_data": [], "seed.ad_reporting_integration_tests.apple_keyword_history_data": [], "seed.ad_reporting_integration_tests.linkedin_creative_history_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data": [], "seed.ad_reporting_integration_tests.tiktok_ad_history_data": [], "seed.ad_reporting_integration_tests.pin_promotion_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data": [], "seed.ad_reporting_integration_tests.tiktok_adgroup_report_hourly_data": [], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data": [], "seed.ad_reporting_integration_tests.tiktok_campaign_history_data": [], "seed.ad_reporting_integration_tests.tiktok_advertiser_data": [], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data": [], "seed.ad_reporting_integration_tests.apple_ad_report_data": [], "seed.ad_reporting_integration_tests.google_ads_ad_stats_data": [], "seed.ad_reporting_integration_tests.ad_group_history_data": [], "seed.ad_reporting_integration_tests.google_ads_account_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data": [], "seed.ad_reporting_integration_tests.twitter_tweet_url_data": [], "seed.ad_reporting_integration_tests.campaign_history_data": [], "seed.ad_reporting_integration_tests.google_ads_campaign_history_data": [], "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data": [], "seed.ad_reporting_integration_tests.snapchat_ad_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_account_history_data": [], "seed.ad_reporting_integration_tests.google_ads_ad_group_history_data": [], "seed.ad_reporting_integration_tests.snapchat_campaign_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data": [], "seed.ad_reporting_integration_tests.tiktok_ad_report_hourly_data": [], "seed.ad_reporting_integration_tests.google_ads_click_performance_data": [], "seed.ad_reporting_integration_tests.twitter_account_history_data": [], "seed.ad_reporting_integration_tests.snapchat_creative_history_data": [], "seed.ad_reporting_integration_tests.apple_keyword_report_data": [], "seed.ad_reporting_integration_tests.google_ads_ad_history_data": [], "seed.ad_reporting_integration_tests.apple_search_term_report_data": [], "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data": [], "seed.ad_reporting_integration_tests.apple_ad_group_report_data": [], "seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data": [], "seed.ad_reporting_integration_tests.snapchat_ad_account_history_data": [], "seed.ad_reporting_integration_tests.apple_campaign_report_data": [], "seed.ad_reporting_integration_tests.pin_promotion_report_data": [], "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data": [], "seed.ad_reporting_integration_tests.apple_organization_data": [], "seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data": [], "seed.ad_reporting_integration_tests.tiktok_campaign_report_hourly_data": [], "seed.ad_reporting_integration_tests.apple_ad_history_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data": [], "seed.ad_reporting_integration_tests.tiktok_adgroup_history_data": [], "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__keyword_history": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp", "model.microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__ad_history": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history_tmp", "model.microsoft_ads_source.stg_microsoft_ads__ad_history_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp", "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__account_history": ["model.microsoft_ads_source.stg_microsoft_ads__account_history_tmp", "model.microsoft_ads_source.stg_microsoft_ads__account_history_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_history": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp": ["source.microsoft_ads_source.microsoft_ads.search_query_performance_daily_report"], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp": ["source.microsoft_ads_source.microsoft_ads.campaign_performance_daily_report"], "model.microsoft_ads_source.stg_microsoft_ads__ad_history_tmp": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data"], "model.microsoft_ads_source.stg_microsoft_ads__account_history_tmp": ["seed.ad_reporting_integration_tests.microsoft_ads_account_history_data"], "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data"], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp": ["source.microsoft_ads_source.microsoft_ads.ad_group_performance_daily_report"], "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp": ["source.microsoft_ads_source.microsoft_ads.keyword_performance_daily_report"], "model.microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp": ["source.microsoft_ads_source.microsoft_ads.keyword_history"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data"], "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp": ["source.microsoft_ads_source.microsoft_ads.account_performance_daily_report"], "model.tiktok_ads.tiktok_ads__ad_group_report": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history", "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__advertiser", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history"], "model.tiktok_ads.tiktok_ads__url_report": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history", "model.tiktok_ads_source.stg_tiktok_ads__ad_history", "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__advertiser", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history"], "model.tiktok_ads.tiktok_ads__campaign_report": ["model.tiktok_ads_source.stg_tiktok_ads__advertiser", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history", "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly"], "model.tiktok_ads.tiktok_ads__ad_report": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history", "model.tiktok_ads_source.stg_tiktok_ads__ad_history", "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__advertiser", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history"], "model.tiktok_ads.tiktok_ads__advertiser_report": ["model.tiktok_ads_source.stg_tiktok_ads__ad_history", "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__advertiser"], "model.twitter_ads.twitter_ads__account_report": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"], "model.twitter_ads.twitter_ads__campaign_report": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__campaign_report"], "model.twitter_ads.twitter_ads__url_report": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__tweet", "model.twitter_ads_source.stg_twitter_ads__tweet_url"], "model.twitter_ads.twitter_ads__promoted_tweet_report": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__tweet"], "model.twitter_ads.twitter_ads__line_item_report": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__line_item_report"], "model.twitter_ads.twitter_ads__keyword_report": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"], "model.pinterest.pinterest_ads__url_report": ["model.pinterest_source.stg_pinterest_ads__ad_group_history", "model.pinterest_source.stg_pinterest_ads__advertiser_history", "model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "model.pinterest.pinterest_ads__campaign_report": ["model.pinterest_source.stg_pinterest_ads__advertiser_history", "model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__campaign_report"], "model.pinterest.pinterest_ads__keyword_report": ["model.pinterest_source.stg_pinterest_ads__ad_group_history", "model.pinterest_source.stg_pinterest_ads__advertiser_history", "model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__keyword_history", "model.pinterest_source.stg_pinterest_ads__keyword_report"], "model.pinterest.pinterest_ads__advertiser_report": ["model.pinterest_source.stg_pinterest_ads__advertiser_history", "model.pinterest_source.stg_pinterest_ads__advertiser_report"], "model.pinterest.pinterest_ads__pin_promotion_report": ["model.pinterest_source.stg_pinterest_ads__ad_group_history", "model.pinterest_source.stg_pinterest_ads__advertiser_history", "model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "model.pinterest.pinterest_ads__ad_group_report": ["model.pinterest_source.stg_pinterest_ads__ad_group_history", "model.pinterest_source.stg_pinterest_ads__ad_group_report", "model.pinterest_source.stg_pinterest_ads__advertiser_history", "model.pinterest_source.stg_pinterest_ads__campaign_history"], "model.google_ads.google_ads__keyword_report": ["model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__ad_group_criterion_history", "model.google_ads_source.stg_google_ads__ad_group_history", "model.google_ads_source.stg_google_ads__campaign_history", "model.google_ads_source.stg_google_ads__keyword_stats"], "model.google_ads.google_ads__campaign_report": ["model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__campaign_history", "model.google_ads_source.stg_google_ads__campaign_stats"], "model.google_ads.google_ads__url_report": ["model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__ad_group_history", "model.google_ads_source.stg_google_ads__ad_history", "model.google_ads_source.stg_google_ads__ad_stats", "model.google_ads_source.stg_google_ads__campaign_history"], "model.google_ads.google_ads__ad_report": ["model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__ad_group_history", "model.google_ads_source.stg_google_ads__ad_history", "model.google_ads_source.stg_google_ads__ad_stats", "model.google_ads_source.stg_google_ads__campaign_history"], "model.google_ads.google_ads__ad_group_report": ["model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__ad_group_history", "model.google_ads_source.stg_google_ads__ad_group_stats", "model.google_ads_source.stg_google_ads__campaign_history"], "model.google_ads.google_ads__account_report": ["model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__account_stats"], "model.linkedin_source.stg_linkedin_ads__creative_history": ["model.linkedin_source.stg_linkedin_ads__creative_history_tmp", "model.linkedin_source.stg_linkedin_ads__creative_history_tmp"], "model.linkedin_source.stg_linkedin_ads__campaign_history": ["model.linkedin_source.stg_linkedin_ads__campaign_history_tmp", "model.linkedin_source.stg_linkedin_ads__campaign_history_tmp"], "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp"], "model.linkedin_source.stg_linkedin_ads__campaign_group_history": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history_tmp", "model.linkedin_source.stg_linkedin_ads__campaign_group_history_tmp"], "model.linkedin_source.stg_linkedin_ads__account_history": ["model.linkedin_source.stg_linkedin_ads__account_history_tmp", "model.linkedin_source.stg_linkedin_ads__account_history_tmp"], "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative_tmp", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative_tmp"], "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative_tmp": ["seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data"], "model.linkedin_source.stg_linkedin_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_campaign_history_data"], "model.linkedin_source.stg_linkedin_ads__account_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_account_history_data"], "model.linkedin_source.stg_linkedin_ads__campaign_group_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data"], "model.linkedin_source.stg_linkedin_ads__creative_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_creative_history_data"], "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp": ["source.linkedin_source.linkedin.ad_analytics_by_campaign"], "model.facebook_ads.facebook_ads__url_report": ["model.facebook_ads.int_facebook_ads__creative_history", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__campaign_history"], "model.facebook_ads.facebook_ads__url_tags": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads.facebook_ads__campaign_report": ["model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__campaign_history"], "model.facebook_ads.facebook_ads__account_report": ["model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__basic_ad"], "model.facebook_ads.facebook_ads__ad_report": ["model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__campaign_history"], "model.facebook_ads.facebook_ads__ad_set_report": ["model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__campaign_history"], "model.facebook_ads.int_facebook_ads__creative_history": ["model.facebook_ads.facebook_ads__url_tags", "model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.snapchat_ads.snapchat_ads__ad_report": ["model.snapchat_ads.snapchat_ads__creative_history_prep", "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report"], "model.snapchat_ads.snapchat_ads__url_report": ["model.snapchat_ads.snapchat_ads__creative_history_prep", "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history"], "model.snapchat_ads.snapchat_ads__account_report": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history"], "model.snapchat_ads.snapchat_ads__ad_squad_report": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history"], "model.snapchat_ads.snapchat_ads__campaign_report": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history", "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report"], "model.snapchat_ads.snapchat_ads__creative_history_prep": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history", "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history"], "model.google_ads_source.stg_google_ads__ad_group_stats": ["model.google_ads_source.stg_google_ads__ad_group_stats_tmp", "model.google_ads_source.stg_google_ads__ad_group_stats_tmp"], "model.google_ads_source.stg_google_ads__account_stats": ["model.google_ads_source.stg_google_ads__account_stats_tmp", "model.google_ads_source.stg_google_ads__account_stats_tmp"], "model.google_ads_source.stg_google_ads__ad_group_history": ["model.google_ads_source.stg_google_ads__ad_group_history_tmp", "model.google_ads_source.stg_google_ads__ad_group_history_tmp"], "model.google_ads_source.stg_google_ads__ad_history": ["model.google_ads_source.stg_google_ads__ad_history_tmp", "model.google_ads_source.stg_google_ads__ad_history_tmp"], "model.google_ads_source.stg_google_ads__keyword_stats": ["model.google_ads_source.stg_google_ads__keyword_stats_tmp", "model.google_ads_source.stg_google_ads__keyword_stats_tmp"], "model.google_ads_source.stg_google_ads__ad_stats": ["model.google_ads_source.stg_google_ads__ad_stats_tmp", "model.google_ads_source.stg_google_ads__ad_stats_tmp"], "model.google_ads_source.stg_google_ads__ad_group_criterion_history": ["model.google_ads_source.stg_google_ads__ad_group_criterion_history_tmp", "model.google_ads_source.stg_google_ads__ad_group_criterion_history_tmp"], "model.google_ads_source.stg_google_ads__campaign_stats": ["model.google_ads_source.stg_google_ads__campaign_stats_tmp", "model.google_ads_source.stg_google_ads__campaign_stats_tmp"], "model.google_ads_source.stg_google_ads__campaign_history": ["model.google_ads_source.stg_google_ads__campaign_history_tmp", "model.google_ads_source.stg_google_ads__campaign_history_tmp"], "model.google_ads_source.stg_google_ads__account_history": ["model.google_ads_source.stg_google_ads__account_history_tmp", "model.google_ads_source.stg_google_ads__account_history_tmp"], "model.google_ads_source.stg_google_ads__account_stats_tmp": ["source.google_ads_source.google_ads.account_stats"], "model.google_ads_source.stg_google_ads__ad_group_history_tmp": ["source.google_ads_source.google_ads.ad_group_history"], "model.google_ads_source.stg_google_ads__campaign_stats_tmp": ["source.google_ads_source.google_ads.campaign_stats"], "model.google_ads_source.stg_google_ads__ad_stats_tmp": ["source.google_ads_source.google_ads.ad_stats"], "model.google_ads_source.stg_google_ads__campaign_history_tmp": ["source.google_ads_source.google_ads.campaign_history"], "model.google_ads_source.stg_google_ads__ad_group_criterion_history_tmp": ["source.google_ads_source.google_ads.ad_group_criterion_history"], "model.google_ads_source.stg_google_ads__ad_group_stats_tmp": ["source.google_ads_source.google_ads.ad_group_stats"], "model.google_ads_source.stg_google_ads__keyword_stats_tmp": ["source.google_ads_source.google_ads.keyword_stats"], "model.google_ads_source.stg_google_ads__ad_history_tmp": ["source.google_ads_source.google_ads.ad_history"], "model.google_ads_source.stg_google_ads__account_history_tmp": ["source.google_ads_source.google_ads.account_history"], "model.apple_search_ads.apple_search_ads__ad_report": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history", "model.apple_search_ads_source.stg_apple_search_ads__ad_history", "model.apple_search_ads_source.stg_apple_search_ads__ad_report", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__organization"], "model.apple_search_ads.apple_search_ads__ad_group_report": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history", "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__organization"], "model.apple_search_ads.apple_search_ads__keyword_report": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__keyword_history", "model.apple_search_ads_source.stg_apple_search_ads__keyword_report", "model.apple_search_ads_source.stg_apple_search_ads__organization"], "model.apple_search_ads.apple_search_ads__search_term_report": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__organization", "model.apple_search_ads_source.stg_apple_search_ads__search_term_report"], "model.apple_search_ads.apple_search_ads__campaign_report": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__campaign_report", "model.apple_search_ads_source.stg_apple_search_ads__organization"], "model.apple_search_ads.apple_search_ads__organization_report": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__campaign_report", "model.apple_search_ads_source.stg_apple_search_ads__organization"], "model.ad_reporting.ad_reporting__campaign_report": ["model.ad_reporting.int_ad_reporting__campaign_report"], "model.ad_reporting.ad_reporting__account_report": ["model.ad_reporting.int_ad_reporting__account_report"], "model.ad_reporting.ad_reporting__ad_group_report": ["model.ad_reporting.int_ad_reporting__ad_group_report"], "model.ad_reporting.ad_reporting__search_report": ["model.ad_reporting.int_ad_reporting__search_report"], "model.ad_reporting.ad_reporting__ad_report": ["model.ad_reporting.int_ad_reporting__ad_report"], "model.ad_reporting.ad_reporting__url_report": ["model.ad_reporting.int_ad_reporting__url_report"], "model.ad_reporting.ad_reporting__keyword_report": ["model.ad_reporting.int_ad_reporting__keyword_report"], "model.ad_reporting.int_ad_reporting__campaign_report": ["model.apple_search_ads.apple_search_ads__campaign_report", "model.facebook_ads.facebook_ads__campaign_report", "model.google_ads.google_ads__campaign_report", "model.linkedin.linkedin_ads__campaign_group_report", "model.microsoft_ads.microsoft_ads__campaign_report", "model.pinterest.pinterest_ads__campaign_report", "model.snapchat_ads.snapchat_ads__campaign_report", "model.tiktok_ads.tiktok_ads__campaign_report", "model.twitter_ads.twitter_ads__campaign_report"], "model.ad_reporting.int_ad_reporting__keyword_report": ["model.apple_search_ads.apple_search_ads__keyword_report", "model.google_ads.google_ads__keyword_report", "model.microsoft_ads.microsoft_ads__keyword_report", "model.pinterest.pinterest_ads__keyword_report", "model.twitter_ads.twitter_ads__keyword_report"], "model.ad_reporting.int_ad_reporting__ad_report": ["model.apple_search_ads.apple_search_ads__ad_report", "model.facebook_ads.facebook_ads__ad_report", "model.google_ads.google_ads__ad_report", "model.linkedin.linkedin_ads__creative_report", "model.microsoft_ads.microsoft_ads__ad_report", "model.pinterest.pinterest_ads__pin_promotion_report", "model.snapchat_ads.snapchat_ads__ad_report", "model.tiktok_ads.tiktok_ads__ad_report", "model.twitter_ads.twitter_ads__promoted_tweet_report"], "model.ad_reporting.int_ad_reporting__account_report": ["model.apple_search_ads.apple_search_ads__organization_report", "model.facebook_ads.facebook_ads__account_report", "model.google_ads.google_ads__account_report", "model.linkedin.linkedin_ads__account_report", "model.microsoft_ads.microsoft_ads__account_report", "model.pinterest.pinterest_ads__advertiser_report", "model.snapchat_ads.snapchat_ads__account_report", "model.tiktok_ads.tiktok_ads__advertiser_report", "model.twitter_ads.twitter_ads__account_report"], "model.ad_reporting.int_ad_reporting__url_report": ["model.facebook_ads.facebook_ads__url_report", "model.google_ads.google_ads__url_report", "model.microsoft_ads.microsoft_ads__url_report", "model.pinterest.pinterest_ads__url_report", "model.snapchat_ads.snapchat_ads__url_report", "model.tiktok_ads.tiktok_ads__url_report"], "model.ad_reporting.int_ad_reporting__search_report": ["model.apple_search_ads.apple_search_ads__search_term_report", "model.microsoft_ads.microsoft_ads__search_report"], "model.ad_reporting.int_ad_reporting__ad_group_report": ["model.apple_search_ads.apple_search_ads__ad_group_report", "model.facebook_ads.facebook_ads__ad_set_report", "model.google_ads.google_ads__ad_group_report", "model.linkedin.linkedin_ads__campaign_report", "model.microsoft_ads.microsoft_ads__ad_group_report", "model.pinterest.pinterest_ads__ad_group_report", "model.snapchat_ads.snapchat_ads__ad_squad_report", "model.tiktok_ads.tiktok_ads__ad_group_report", "model.twitter_ads.twitter_ads__line_item_report"], "model.apple_search_ads_source.stg_apple_search_ads__campaign_history": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp"], "model.apple_search_ads_source.stg_apple_search_ads__ad_report": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report_tmp", "model.apple_search_ads_source.stg_apple_search_ads__ad_report_tmp"], "model.apple_search_ads_source.stg_apple_search_ads__campaign_report": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp", "model.apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp"], "model.apple_search_ads_source.stg_apple_search_ads__organization": ["model.apple_search_ads_source.stg_apple_search_ads__organization_tmp", "model.apple_search_ads_source.stg_apple_search_ads__organization_tmp"], "model.apple_search_ads_source.stg_apple_search_ads__keyword_report": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp", "model.apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp"], "model.apple_search_ads_source.stg_apple_search_ads__keyword_history": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp", "model.apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp"], "model.apple_search_ads_source.stg_apple_search_ads__search_term_report": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp", "model.apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp"], "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp", "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp"], "model.apple_search_ads_source.stg_apple_search_ads__ad_history": ["model.apple_search_ads_source.stg_apple_search_ads__ad_history_tmp", "model.apple_search_ads_source.stg_apple_search_ads__ad_history_tmp"], "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp", "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp"], "model.apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp": ["source.apple_search_ads_source.apple_search_ads.search_term_report"], "model.apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp": ["source.apple_search_ads_source.apple_search_ads.campaign_history"], "model.apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp": ["source.apple_search_ads_source.apple_search_ads.keyword_history"], "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp": ["source.apple_search_ads_source.apple_search_ads.ad_group_history"], "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp": ["source.apple_search_ads_source.apple_search_ads.ad_group_report"], "model.apple_search_ads_source.stg_apple_search_ads__ad_history_tmp": ["source.apple_search_ads_source.apple_search_ads.ad_history"], "model.apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp": ["source.apple_search_ads_source.apple_search_ads.campaign_report"], "model.apple_search_ads_source.stg_apple_search_ads__organization_tmp": ["source.apple_search_ads_source.apple_search_ads.organization"], "model.apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp": ["source.apple_search_ads_source.apple_search_ads.keyword_report"], "model.apple_search_ads_source.stg_apple_search_ads__ad_report_tmp": ["source.apple_search_ads_source.apple_search_ads.ad_level_report"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp"], "model.pinterest_source.stg_pinterest_ads__keyword_report": ["model.pinterest_source.stg_pinterest_ads__keyword_report_tmp", "model.pinterest_source.stg_pinterest_ads__keyword_report_tmp"], "model.pinterest_source.stg_pinterest_ads__ad_group_report": ["model.pinterest_source.stg_pinterest_ads__ad_group_report_tmp", "model.pinterest_source.stg_pinterest_ads__ad_group_report_tmp"], "model.pinterest_source.stg_pinterest_ads__campaign_history": ["model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp"], "model.pinterest_source.stg_pinterest_ads__advertiser_report": ["model.pinterest_source.stg_pinterest_ads__advertiser_report_tmp", "model.pinterest_source.stg_pinterest_ads__advertiser_report_tmp"], "model.pinterest_source.stg_pinterest_ads__advertiser_history": ["model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp", "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp"], "model.pinterest_source.stg_pinterest_ads__campaign_report": ["model.pinterest_source.stg_pinterest_ads__campaign_report_tmp", "model.pinterest_source.stg_pinterest_ads__campaign_report_tmp"], "model.pinterest_source.stg_pinterest_ads__keyword_history": ["model.pinterest_source.stg_pinterest_ads__keyword_history_tmp", "model.pinterest_source.stg_pinterest_ads__keyword_history_tmp"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp"], "model.pinterest_source.stg_pinterest_ads__ad_group_history": ["model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp"], "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp": ["source.pinterest_source.pinterest_ads.advertiser_history"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp": ["seed.ad_reporting_integration_tests.pin_promotion_report_data"], "model.pinterest_source.stg_pinterest_ads__campaign_report_tmp": ["source.pinterest_source.pinterest_ads.campaign_report"], "model.pinterest_source.stg_pinterest_ads__advertiser_report_tmp": ["source.pinterest_source.pinterest_ads.advertiser_report"], "model.pinterest_source.stg_pinterest_ads__keyword_report_tmp": ["source.pinterest_source.pinterest_ads.keyword_report"], "model.pinterest_source.stg_pinterest_ads__ad_group_report_tmp": ["source.pinterest_source.pinterest_ads.ad_group_report"], "model.pinterest_source.stg_pinterest_ads__keyword_history_tmp": ["source.pinterest_source.pinterest_ads.keyword_history"], "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.campaign_history_data"], "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp": ["seed.ad_reporting_integration_tests.ad_group_history_data"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp": ["seed.ad_reporting_integration_tests.pin_promotion_history_data"], "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly_tmp", "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly_tmp"], "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly_tmp", "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly_tmp"], "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history_tmp", "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history_tmp"], "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly_tmp", "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly_tmp"], "model.tiktok_ads_source.stg_tiktok_ads__advertiser": ["model.tiktok_ads_source.stg_tiktok_ads__advertiser_tmp", "model.tiktok_ads_source.stg_tiktok_ads__advertiser_tmp"], "model.tiktok_ads_source.stg_tiktok_ads__ad_history": ["model.tiktok_ads_source.stg_tiktok_ads__ad_history_tmp", "model.tiktok_ads_source.stg_tiktok_ads__ad_history_tmp"], "model.tiktok_ads_source.stg_tiktok_ads__campaign_history": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_history_tmp", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history_tmp"], "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly_tmp": ["seed.ad_reporting_integration_tests.tiktok_ad_report_hourly_data"], "model.tiktok_ads_source.stg_tiktok_ads__ad_history_tmp": ["seed.ad_reporting_integration_tests.tiktok_ad_history_data"], "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history_tmp": ["seed.ad_reporting_integration_tests.tiktok_adgroup_history_data"], "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly_tmp": ["seed.ad_reporting_integration_tests.tiktok_campaign_report_hourly_data"], "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly_tmp": ["seed.ad_reporting_integration_tests.tiktok_adgroup_report_hourly_data"], "model.tiktok_ads_source.stg_tiktok_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.tiktok_campaign_history_data"], "model.tiktok_ads_source.stg_tiktok_ads__advertiser_tmp": ["seed.ad_reporting_integration_tests.tiktok_advertiser_data"], "model.facebook_ads_source.stg_facebook_ads__basic_ad": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"], "model.facebook_ads_source.stg_facebook_ads__creative_history": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__campaign_history": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__account_history": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "model.facebook_ads_source.stg_facebook_ads__account_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_history": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data"], "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data"], "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_ad_history_data"], "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data"], "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_creative_history_data"], "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_account_history_data"], "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp"], "model.snapchat_ads_source.stg_snapchat_ads__ad_history": ["model.snapchat_ads_source.stg_snapchat_ads__ad_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__ad_history_tmp"], "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp"], "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp", "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp"], "model.snapchat_ads_source.stg_snapchat_ads__creative_history": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__creative_history_tmp"], "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history": ["model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp"], "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp"], "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp", "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp"], "model.snapchat_ads_source.stg_snapchat_ads__campaign_history": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp"], "model.snapchat_ads_source.stg_snapchat_ads__creative_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_creative_history_data"], "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_ad_account_history_data"], "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp": ["seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data"], "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data"], "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp": ["source.snapchat_ads_source.snapchat_ads.ad_squad_hourly_report"], "model.snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_campaign_history_data"], "model.snapchat_ads_source.stg_snapchat_ads__ad_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_ad_history_data"], "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data"], "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp": ["source.snapchat_ads_source.snapchat_ads.campaign_hourly_report"], "model.microsoft_ads.microsoft_ads__ad_report": ["model.microsoft_ads_source.stg_microsoft_ads__account_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "model.microsoft_ads.microsoft_ads__ad_group_report": ["model.microsoft_ads_source.stg_microsoft_ads__account_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "model.microsoft_ads.microsoft_ads__keyword_report": ["model.microsoft_ads_source.stg_microsoft_ads__account_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__keyword_history"], "model.microsoft_ads.microsoft_ads__url_report": ["model.microsoft_ads_source.stg_microsoft_ads__account_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report"], "model.microsoft_ads.microsoft_ads__account_report": ["model.microsoft_ads_source.stg_microsoft_ads__account_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__account_history"], "model.microsoft_ads.microsoft_ads__search_report": ["model.microsoft_ads_source.stg_microsoft_ads__account_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__keyword_history", "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report"], "model.microsoft_ads.microsoft_ads__campaign_report": ["model.microsoft_ads_source.stg_microsoft_ads__account_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp"], "model.twitter_ads_source.stg_twitter_ads__campaign_report": ["model.twitter_ads_source.stg_twitter_ads__campaign_report_tmp", "model.twitter_ads_source.stg_twitter_ads__campaign_report_tmp"], "model.twitter_ads_source.stg_twitter_ads__line_item_history": ["model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__line_item_report": ["model.twitter_ads_source.stg_twitter_ads__line_item_report_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_report_tmp"], "model.twitter_ads_source.stg_twitter_ads__campaign_history": ["model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp"], "model.twitter_ads_source.stg_twitter_ads__tweet": ["model.twitter_ads_source.stg_twitter_ads__tweet_tmp", "model.twitter_ads_source.stg_twitter_ads__tweet_tmp"], "model.twitter_ads_source.stg_twitter_ads__account_history": ["model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "model.twitter_ads_source.stg_twitter_ads__account_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__tweet_url": ["model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp": ["seed.ad_reporting_integration_tests.twitter_tweet_url_data"], "model.twitter_ads_source.stg_twitter_ads__tweet_tmp": ["source.twitter_ads_source.twitter_ads.tweet"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data"], "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp": ["seed.ad_reporting_integration_tests.twitter_line_item_history_data"], "model.twitter_ads_source.stg_twitter_ads__campaign_report_tmp": ["source.twitter_ads_source.twitter_ads.campaign_report"], "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.twitter_campaign_history_data"], "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp": ["source.twitter_ads_source.twitter_ads.line_item_keywords_report"], "model.twitter_ads_source.stg_twitter_ads__line_item_report_tmp": ["source.twitter_ads_source.twitter_ads.line_item_report"], "model.twitter_ads_source.stg_twitter_ads__account_history_tmp": ["seed.ad_reporting_integration_tests.twitter_account_history_data"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data"], "model.linkedin.linkedin_ads__campaign_group_report": ["model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign", "model.linkedin_source.stg_linkedin_ads__campaign_group_history", "model.linkedin_source.stg_linkedin_ads__campaign_history"], "model.linkedin.linkedin_ads__creative_report": ["model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative", "model.linkedin_source.stg_linkedin_ads__campaign_group_history", "model.linkedin_source.stg_linkedin_ads__campaign_history", "model.linkedin_source.stg_linkedin_ads__creative_history"], "model.linkedin.linkedin_ads__campaign_report": ["model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign", "model.linkedin_source.stg_linkedin_ads__campaign_group_history", "model.linkedin_source.stg_linkedin_ads__campaign_history"], "model.linkedin.linkedin_ads__account_report": ["model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign", "model.linkedin_source.stg_linkedin_ads__campaign_history"], "model.linkedin.linkedin_ads__url_report": ["model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative", "model.linkedin_source.stg_linkedin_ads__campaign_group_history", "model.linkedin_source.stg_linkedin_ads__campaign_history", "model.linkedin_source.stg_linkedin_ads__creative_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_id.cc273ee54e": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_history_account_id__modified_at.5975327479": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_daily_report_account_id.b17f45fe79": ["model.microsoft_ads_source.stg_microsoft_ads__account_daily_report"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_daily_report_date_day__account_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.85ae65d69a": ["model.microsoft_ads_source.stg_microsoft_ads__account_daily_report"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_id.c8353342b7": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_history_ad_group_id__modified_at.12004c9de0": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_daily_report_ad_group_id.3e03e6eff7": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_daily_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.8792b4adf4": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_id.6d02c26574": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_history_ad_id__modified_at.1f05b4ee6f": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_daily_report_ad_id.1ed6689aa8": ["model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.80e8146841": ["model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_id.ee080a2122": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_history_campaign_id__modified_at.d2a9279427": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_daily_report_campaign_id.8ac0418e84": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_daily_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.f6a43acb95": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__keyword_history_keyword_id.19164a6209": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_history"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_history_keyword_id__modified_at.e1c525286c": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__keyword_daily_report_keyword_id.e16b8c5047": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.c6f46d202a": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__search_daily_report_search_query.57f687adcc": ["model.microsoft_ads_source.stg_microsoft_ads__search_daily_report"], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__search_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network__language__bid_match_type__delivered_match_type__top_vs_other.03cf031d0c": ["model.microsoft_ads_source.stg_microsoft_ads__search_daily_report"], "test.tiktok_ads.not_null_tiktok_ads__advertiser_report_date_day.1276998c99": ["model.tiktok_ads.tiktok_ads__advertiser_report"], "test.tiktok_ads.not_null_tiktok_ads__advertiser_report_advertiser_id.f956c568ce": ["model.tiktok_ads.tiktok_ads__advertiser_report"], "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__advertiser_report_advertiser_id__date_day.d298bb3cf9": ["model.tiktok_ads.tiktok_ads__advertiser_report"], "test.tiktok_ads.not_null_tiktok_ads__ad_report_date_day.d61ee4a5ed": ["model.tiktok_ads.tiktok_ads__ad_report"], "test.tiktok_ads.not_null_tiktok_ads__ad_report_ad_id.2d8166e707": ["model.tiktok_ads.tiktok_ads__ad_report"], "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__ad_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day.3a887710fb": ["model.tiktok_ads.tiktok_ads__ad_report"], "test.tiktok_ads.not_null_tiktok_ads__ad_group_report_date_day.e39164964e": ["model.tiktok_ads.tiktok_ads__ad_group_report"], "test.tiktok_ads.not_null_tiktok_ads__ad_group_report_ad_group_id.17fb8710f4": ["model.tiktok_ads.tiktok_ads__ad_group_report"], "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__ad_group_report_ad_group_id__campaign_id__advertiser_id__date_day.ecd611f27e": ["model.tiktok_ads.tiktok_ads__ad_group_report"], "test.tiktok_ads.not_null_tiktok_ads__campaign_report_date_day.3807b0e836": ["model.tiktok_ads.tiktok_ads__campaign_report"], "test.tiktok_ads.not_null_tiktok_ads__campaign_report_campaign_id.8a2b0c8ef8": ["model.tiktok_ads.tiktok_ads__campaign_report"], "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__campaign_report_campaign_id__advertiser_id__date_day.03c4f86b19": ["model.tiktok_ads.tiktok_ads__campaign_report"], "test.tiktok_ads.not_null_tiktok_ads__url_report_date_day.d593573eff": ["model.tiktok_ads.tiktok_ads__url_report"], "test.tiktok_ads.not_null_tiktok_ads__url_report_ad_id.6c41067bd0": ["model.tiktok_ads.tiktok_ads__url_report"], "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__url_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day.cf95489e47": ["model.tiktok_ads.tiktok_ads__url_report"], "test.twitter_ads.not_null_twitter_ads__campaign_report_campaign_id.03b1c451b8": ["model.twitter_ads.twitter_ads__campaign_report"], "test.twitter_ads.not_null_twitter_ads__campaign_report_date_day.2b30b279b0": ["model.twitter_ads.twitter_ads__campaign_report"], "test.twitter_ads.not_null_twitter_ads__campaign_report_placement.c66d252e82": ["model.twitter_ads.twitter_ads__campaign_report"], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__campaign_report_date_day__campaign_id__placement__account_id.2b09fa5421": ["model.twitter_ads.twitter_ads__campaign_report"], "test.twitter_ads.not_null_twitter_ads__line_item_report_date_day.86c934e8ce": ["model.twitter_ads.twitter_ads__line_item_report"], "test.twitter_ads.not_null_twitter_ads__line_item_report_line_item_id.0462d58211": ["model.twitter_ads.twitter_ads__line_item_report"], "test.twitter_ads.not_null_twitter_ads__line_item_report_placement.f103369312": ["model.twitter_ads.twitter_ads__line_item_report"], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__line_item_report_date_day__line_item_id__placement__campaign_id__account_id.0e972e010a": ["model.twitter_ads.twitter_ads__line_item_report"], "test.twitter_ads.not_null_twitter_ads__account_report_date_day.84896c5846": ["model.twitter_ads.twitter_ads__account_report"], "test.twitter_ads.not_null_twitter_ads__account_report_placement.157dcb6194": ["model.twitter_ads.twitter_ads__account_report"], "test.twitter_ads.not_null_twitter_ads__account_report_account_id.90d5808908": ["model.twitter_ads.twitter_ads__account_report"], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__account_report_date_day__account_id__placement.a29cf85a4f": ["model.twitter_ads.twitter_ads__account_report"], "test.twitter_ads.not_null_twitter_ads__keyword_report_date_day.e0ce90c1ec": ["model.twitter_ads.twitter_ads__keyword_report"], "test.twitter_ads.not_null_twitter_ads__keyword_report_line_item_id.4982336b04": ["model.twitter_ads.twitter_ads__keyword_report"], "test.twitter_ads.not_null_twitter_ads__keyword_report_keyword.7f254683d7": ["model.twitter_ads.twitter_ads__keyword_report"], "test.twitter_ads.not_null_twitter_ads__keyword_report_placement.1cf3231796": ["model.twitter_ads.twitter_ads__keyword_report"], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__keyword_report_date_day__line_item_id__keyword__placement__account_id__campaign_id.66e2c0d578": ["model.twitter_ads.twitter_ads__keyword_report"], "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_placement.d89c9b27e5": ["model.twitter_ads.twitter_ads__promoted_tweet_report"], "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.5df08e154e": ["model.twitter_ads.twitter_ads__promoted_tweet_report"], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id.a46b1b4082": ["model.twitter_ads.twitter_ads__promoted_tweet_report"], "test.twitter_ads.not_null_twitter_ads__url_report_date_day.33fcb7e04b": ["model.twitter_ads.twitter_ads__url_report"], "test.twitter_ads.not_null_twitter_ads__url_report_placement.92ca3b192e": ["model.twitter_ads.twitter_ads__url_report"], "test.twitter_ads.not_null_twitter_ads__url_report_promoted_tweet_id.d690f99143": ["model.twitter_ads.twitter_ads__url_report"], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__url_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id.30b826d8ff": ["model.twitter_ads.twitter_ads__url_report"], "test.pinterest.not_null_pinterest_ads__url_report_date_day.b09048037e": ["model.pinterest.pinterest_ads__url_report"], "test.pinterest.not_null_pinterest_ads__url_report_pin_promotion_id.0da711ad6a": ["model.pinterest.pinterest_ads__url_report"], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__url_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day.bd87b032c8": ["model.pinterest.pinterest_ads__url_report"], "test.pinterest.not_null_pinterest_ads__ad_group_report_date_day.ed7c27b8a7": ["model.pinterest.pinterest_ads__ad_group_report"], "test.pinterest.not_null_pinterest_ads__ad_group_report_ad_group_id.134f9ac6c2": ["model.pinterest.pinterest_ads__ad_group_report"], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__ad_group_report_ad_group_id__advertiser_id__campaign_id__date_day.d207b7d69d": ["model.pinterest.pinterest_ads__ad_group_report"], "test.pinterest.not_null_pinterest_ads__campaign_report_date_day.10ac8272bf": ["model.pinterest.pinterest_ads__campaign_report"], "test.pinterest.not_null_pinterest_ads__campaign_report_campaign_id.8001ea60f2": ["model.pinterest.pinterest_ads__campaign_report"], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__campaign_report_campaign_id__advertiser_id__date_day.b5752d5279": ["model.pinterest.pinterest_ads__campaign_report"], "test.pinterest.not_null_pinterest_ads__advertiser_report_date_day.aedeceeeca": ["model.pinterest.pinterest_ads__advertiser_report"], "test.pinterest.not_null_pinterest_ads__advertiser_report_advertiser_id.13380f0672": ["model.pinterest.pinterest_ads__advertiser_report"], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__advertiser_report_advertiser_id__date_day.990badbc11": ["model.pinterest.pinterest_ads__advertiser_report"], "test.pinterest.not_null_pinterest_ads__keyword_report_date_day.23130e9fba": ["model.pinterest.pinterest_ads__keyword_report"], "test.pinterest.not_null_pinterest_ads__keyword_report_keyword_id.0d73460198": ["model.pinterest.pinterest_ads__keyword_report"], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__keyword_report_keyword_id__ad_group_id__campaign_id__advertiser_id__date_day.b7517b039d": ["model.pinterest.pinterest_ads__keyword_report"], "test.pinterest.not_null_pinterest_ads__pin_promotion_report_date_day.3128d28cfd": ["model.pinterest.pinterest_ads__pin_promotion_report"], "test.pinterest.not_null_pinterest_ads__pin_promotion_report_pin_promotion_id.2540e0a561": ["model.pinterest.pinterest_ads__pin_promotion_report"], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__pin_promotion_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day.1db3ffb1b3": ["model.pinterest.pinterest_ads__pin_promotion_report"], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__url_report_ad_id__ad_group_id__date_day.a59b8e007f": ["model.google_ads.google_ads__url_report"], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__account_report_account_id__date_day.c52089771e": ["model.google_ads.google_ads__account_report"], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__ad_group_report_ad_group_id__date_day.7c8e1c1a2f": ["model.google_ads.google_ads__ad_group_report"], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__ad_report_ad_id__ad_group_id__date_day.fe37ea1a7b": ["model.google_ads.google_ads__ad_report"], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__campaign_report_campaign_id__advertising_channel_type__advertising_channel_subtype__date_day.f735cda469": ["model.google_ads.google_ads__campaign_report"], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__keyword_report_ad_group_id__criterion_id__date_day.214ff3497d": ["model.google_ads.google_ads__keyword_report"], "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_creative_creative_id.062abfe14b": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative"], "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_creative_date_day.cb81bc4766": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative"], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_creative_date_day__creative_id.973a01e410": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative"], "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_campaign_campaign_id.d6ae242f1a": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign"], "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_campaign_date_day.ef97bed766": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign"], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_campaign_date_day__campaign_id.b03f3dc81d": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign"], "test.linkedin_source.not_null_stg_linkedin_ads__creative_history_creative_id.4d51d55474": ["model.linkedin_source.stg_linkedin_ads__creative_history"], "test.linkedin_source.not_null_stg_linkedin_ads__creative_history_version_tag.d3f8e73227": ["model.linkedin_source.stg_linkedin_ads__creative_history"], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__creative_history_version_tag__creative_id.cc02e6aa66": ["model.linkedin_source.stg_linkedin_ads__creative_history"], "test.linkedin_source.not_null_stg_linkedin_ads__campaign_history_campaign_id.b026971ca2": ["model.linkedin_source.stg_linkedin_ads__campaign_history"], "test.linkedin_source.not_null_stg_linkedin_ads__campaign_history_version_tag.64954cc469": ["model.linkedin_source.stg_linkedin_ads__campaign_history"], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_history_version_tag__campaign_id.2d20780793": ["model.linkedin_source.stg_linkedin_ads__campaign_history"], "test.linkedin_source.not_null_stg_linkedin_ads__campaign_group_history_campaign_group_id.3888f3777d": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history"], "test.linkedin_source.not_null_stg_linkedin_ads__campaign_group_history_last_modified_at.a716e2a7ea": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history"], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_group_history_last_modified_at__campaign_group_id.e761ddb4da": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history"], "test.linkedin_source.not_null_stg_linkedin_ads__account_history_account_id.a9fa7f93c0": ["model.linkedin_source.stg_linkedin_ads__account_history"], "test.linkedin_source.not_null_stg_linkedin_ads__account_history_version_tag.58c46c5d81": ["model.linkedin_source.stg_linkedin_ads__account_history"], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__account_history_account_id__version_tag.9a655993ce": ["model.linkedin_source.stg_linkedin_ads__account_history"], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__url_report_date_day__account_id__campaign_id__ad_set_id__ad_id.03a7e82eb7": ["model.facebook_ads.facebook_ads__url_report"], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__ad_report_date_day__account_id__campaign_id__ad_set_id__ad_id.0a25b64738": ["model.facebook_ads.facebook_ads__ad_report"], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__ad_set_report_date_day__account_id__campaign_id__ad_set_id.3dd4da872f": ["model.facebook_ads.facebook_ads__ad_set_report"], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__campaign_report_date_day__account_id__campaign_id.7cd75107e6": ["model.facebook_ads.facebook_ads__campaign_report"], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__account_report_date_day__account_id.5a94423e40": ["model.facebook_ads.facebook_ads__account_report"], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__url_tags__fivetran_id__key__type.ba044777d3": ["model.facebook_ads.facebook_ads__url_tags"], "test.snapchat_ads.not_null_snapchat_ads__account_report_date_day.688d7ed260": ["model.snapchat_ads.snapchat_ads__account_report"], "test.snapchat_ads.not_null_snapchat_ads__account_report_ad_account_id.589c81966b": ["model.snapchat_ads.snapchat_ads__account_report"], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__account_report_ad_account_id__date_day.da5545b8e6": ["model.snapchat_ads.snapchat_ads__account_report"], "test.snapchat_ads.not_null_snapchat_ads__ad_report_date_day.7c5350c8fe": ["model.snapchat_ads.snapchat_ads__ad_report"], "test.snapchat_ads.not_null_snapchat_ads__ad_report_ad_id.9000850744": ["model.snapchat_ads.snapchat_ads__ad_report"], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__ad_report_ad_id__date_day.68c2c0de57": ["model.snapchat_ads.snapchat_ads__ad_report"], "test.snapchat_ads.not_null_snapchat_ads__campaign_report_date_day.4e4e31223b": ["model.snapchat_ads.snapchat_ads__campaign_report"], "test.snapchat_ads.not_null_snapchat_ads__campaign_report_campaign_id.19fd7135ac": ["model.snapchat_ads.snapchat_ads__campaign_report"], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__campaign_report_campaign_id__date_day.dfc5f7da4e": ["model.snapchat_ads.snapchat_ads__campaign_report"], "test.snapchat_ads.not_null_snapchat_ads__ad_squad_report_date_day.39118ca639": ["model.snapchat_ads.snapchat_ads__ad_squad_report"], "test.snapchat_ads.not_null_snapchat_ads__ad_squad_report_ad_squad_id.424c0bbffe": ["model.snapchat_ads.snapchat_ads__ad_squad_report"], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__ad_squad_report_ad_squad_id__date_day.027a518f3c": ["model.snapchat_ads.snapchat_ads__ad_squad_report"], "test.snapchat_ads.not_null_snapchat_ads__url_report_date_day.bcbe87a7f6": ["model.snapchat_ads.snapchat_ads__url_report"], "test.snapchat_ads.not_null_snapchat_ads__url_report_ad_id.ecbdfc0d78": ["model.snapchat_ads.snapchat_ads__url_report"], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__url_report_ad_id__date_day.54edc1b2be": ["model.snapchat_ads.snapchat_ads__url_report"], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__account_history_account_id__updated_at.19f35742f1": ["model.google_ads_source.stg_google_ads__account_history"], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_history_ad_group_id__updated_at.096e8da5fd": ["model.google_ads_source.stg_google_ads__ad_group_history"], "test.google_ads_source.dbt_expectations_expect_column_values_to_not_match_regex_list_stg_google_ads__ad_history_source_final_urls__any___.7dddbd81e7": ["model.google_ads_source.stg_google_ads__ad_history"], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_history_ad_id__ad_group_id__updated_at.0c065b0a0b": ["model.google_ads_source.stg_google_ads__ad_history"], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_stats_ad_id__ad_network_type__device__ad_group_id__date_day.c963f1863c": ["model.google_ads_source.stg_google_ads__ad_stats"], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_history_campaign_id__updated_at.8bf2733e86": ["model.google_ads_source.stg_google_ads__campaign_history"], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_criterion_history_criterion_id__ad_group_id__updated_at.197bbc6816": ["model.google_ads_source.stg_google_ads__ad_group_criterion_history"], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_stats_ad_group_id__device__ad_network_type__date_day.ed55af6020": ["model.google_ads_source.stg_google_ads__ad_group_stats"], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_stats_campaign_id__ad_network_type__device__date_day.69600f7d45": ["model.google_ads_source.stg_google_ads__campaign_stats"], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__keyword_stats_keyword_id__date_day.8f15198e68": ["model.google_ads_source.stg_google_ads__keyword_stats"], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__account_stats_account_id__device__ad_network_type__date_day.3019f8a860": ["model.google_ads_source.stg_google_ads__account_stats"], "test.apple_search_ads.not_null_apple_search_ads__ad_group_report_ad_group_id.60febec6b5": ["model.apple_search_ads.apple_search_ads__ad_group_report"], "test.apple_search_ads.not_null_apple_search_ads__ad_group_report_date_day.e6ffb30b3c": ["model.apple_search_ads.apple_search_ads__ad_group_report"], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__ad_group_report_organization_id__campaign_id__ad_group_id__date_day.19d180bab9": ["model.apple_search_ads.apple_search_ads__ad_group_report"], "test.apple_search_ads.not_null_apple_search_ads__ad_report_ad_id.0ab2c5075c": ["model.apple_search_ads.apple_search_ads__ad_report"], "test.apple_search_ads.not_null_apple_search_ads__ad_report_date_day.b86c049e17": ["model.apple_search_ads.apple_search_ads__ad_report"], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__ad_report_organization_id__campaign_id__ad_group_id__ad_id__date_day.54e27817a1": ["model.apple_search_ads.apple_search_ads__ad_report"], "test.apple_search_ads.not_null_apple_search_ads__campaign_report_campaign_id.e26ed1e146": ["model.apple_search_ads.apple_search_ads__campaign_report"], "test.apple_search_ads.not_null_apple_search_ads__campaign_report_date_day.35652b8d1a": ["model.apple_search_ads.apple_search_ads__campaign_report"], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__campaign_report_organization_id__campaign_id__date_day.647e56213f": ["model.apple_search_ads.apple_search_ads__campaign_report"], "test.apple_search_ads.not_null_apple_search_ads__keyword_report_keyword_id.ea493710db": ["model.apple_search_ads.apple_search_ads__keyword_report"], "test.apple_search_ads.not_null_apple_search_ads__keyword_report_date_day.3dec8d0e82": ["model.apple_search_ads.apple_search_ads__keyword_report"], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__keyword_report_organization_id__campaign_id__ad_group_id__keyword_id__date_day.78fb033a13": ["model.apple_search_ads.apple_search_ads__keyword_report"], "test.apple_search_ads.not_null_apple_search_ads__organization_report_organization_id.b6cf7d69f8": ["model.apple_search_ads.apple_search_ads__organization_report"], "test.apple_search_ads.not_null_apple_search_ads__organization_report_date_day.5784fed523": ["model.apple_search_ads.apple_search_ads__organization_report"], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__organization_report_organization_id__date_day.8bc84fccc3": ["model.apple_search_ads.apple_search_ads__organization_report"], "test.apple_search_ads.not_null_apple_search_ads__search_term_report_date_day.1bc3b0d57c": ["model.apple_search_ads.apple_search_ads__search_term_report"], "test.apple_search_ads.not_null_apple_search_ads__search_term_report_search_term_text.aecc7447f7": ["model.apple_search_ads.apple_search_ads__search_term_report"], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__search_term_report_search_term_text__date_day.e60fe79ec4": ["model.apple_search_ads.apple_search_ads__search_term_report"], "test.ad_reporting.not_null_ad_reporting__account_report_account_id.316a64c022": ["model.ad_reporting.ad_reporting__account_report"], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__account_report_platform__date_day__account_id.1cadcf1583": ["model.ad_reporting.ad_reporting__account_report"], "test.ad_reporting.not_null_ad_reporting__ad_group_report_ad_group_id.963e17e842": ["model.ad_reporting.ad_reporting__ad_group_report"], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__ad_group_report_platform__date_day__ad_group_id__campaign_id__account_id.2116e5a78a": ["model.ad_reporting.ad_reporting__ad_group_report"], "test.ad_reporting.not_null_ad_reporting__ad_report_ad_id.f3eb210152": ["model.ad_reporting.ad_reporting__ad_report"], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__ad_report_platform__date_day__ad_id__ad_group_id__campaign_id__account_id.3c5bc5ae55": ["model.ad_reporting.ad_reporting__ad_report"], "test.ad_reporting.not_null_ad_reporting__campaign_report_campaign_id.1cfaa7698b": ["model.ad_reporting.ad_reporting__campaign_report"], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__campaign_report_platform__date_day__campaign_id__account_id.4b3426da0f": ["model.ad_reporting.ad_reporting__campaign_report"], "test.ad_reporting.not_null_ad_reporting__keyword_report_keyword_text.5d9a007b6f": ["model.ad_reporting.ad_reporting__keyword_report"], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__keyword_report_platform__date_day__keyword_text__keyword_match_type__ad_group_id__campaign_id__account_id.45c0f2075a": ["model.ad_reporting.ad_reporting__keyword_report"], "test.ad_reporting.not_null_ad_reporting__search_report_search_query.ee2f0fcafb": ["model.ad_reporting.ad_reporting__search_report"], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__search_report_platform__date_day__search_query__search_match_type__keyword_id__ad_group_id__campaign_id__account_id.4efd457bbf": ["model.ad_reporting.ad_reporting__search_report"], "test.ad_reporting.not_null_ad_reporting__url_report_base_url.a29864e5b6": ["model.ad_reporting.ad_reporting__url_report"], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__url_report_platform__date_day__ad_group_id__campaign_id__account_id__base_url__url_host__url_path__utm_campaign__utm_content__utm_medium__utm_source__utm_term.cd216b1424": ["model.ad_reporting.ad_reporting__url_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_history_modified_at.e5d65fa28f": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_history_ad_group_id.dc128eecb7": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history"], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_history_ad_group_id__modified_at.84af14c83b": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_report_ad_group_id.a115f9cfc1": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_report_date_day.4dfd46a43b": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report"], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_report_ad_group_id__date_day.a0fcc4e33c": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_history_modified_at.2eea7e006d": ["model.apple_search_ads_source.stg_apple_search_ads__ad_history"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_history_ad_id.4ad3bde32a": ["model.apple_search_ads_source.stg_apple_search_ads__ad_history"], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_history_ad_id__modified_at.38599b8cba": ["model.apple_search_ads_source.stg_apple_search_ads__ad_history"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_date_day.e6252346d8": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_ad_group_id.a397755e9f": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_ad_id.d08e760c58": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report"], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_report_ad_id__date_day__ad_group_id.0d8d23c516": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_history_modified_at.f34a7a97c9": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_history_campaign_id.3f0f7502b8": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history"], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_history_campaign_id__modified_at.317f970af9": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_report_campaign_id.b83941e728": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_report_date_day.c8dc10a6f3": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report"], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_report_campaign_id__date_day.bad41b0481": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_history_modified_at.42fde5a287": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_history"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_history_keyword_id.889f83cfd2": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_history"], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_history_keyword_id__modified_at.7b06162d24": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_history"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_report_keyword_id.501725b09e": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_report_date_day.16098db928": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report"], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_report_keyword_id__date_day.9f0099cff8": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__organization_organization_id.b013ce33cb": ["model.apple_search_ads_source.stg_apple_search_ads__organization"], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__organization_organization_id.8647048f7a": ["model.apple_search_ads_source.stg_apple_search_ads__organization"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__search_term_report__fivetran_id.aa430d1dad": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report"], "test.apple_search_ads_source.not_null_stg_apple_search_ads__search_term_report_date_day.fd93df3302": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report"], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__search_term_report__fivetran_id__date_day.aad2a48344": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report"], "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_ad_group_id.220c6220be": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_history_ad_group_id___fivetran_synced.1132e1f339": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"], "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_campaign_id.60cb10d341": ["model.pinterest_source.stg_pinterest_ads__campaign_history"], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_history_campaign_id___fivetran_synced.eff7196b87": ["model.pinterest_source.stg_pinterest_ads__campaign_history"], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_pin_promotion_id.171995cd34": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_history__fivetran_synced__pin_promotion_id.8e9ab31ea9": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_date_day.ed272212a1": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_pin_promotion_id.9c3c9f71ab": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_report_date_day__pin_promotion_id__ad_group_id__campaign_id__advertiser_id.7ea04e6024": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_report_date_day.80e8904c4c": ["model.pinterest_source.stg_pinterest_ads__ad_group_report"], "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_report_ad_group_id.bb8cf3c471": ["model.pinterest_source.stg_pinterest_ads__ad_group_report"], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_report_date_day__ad_group_id__campaign_id__advertiser_id.3800c02b0e": ["model.pinterest_source.stg_pinterest_ads__ad_group_report"], "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_history_advertiser_id.7d24f665fb": ["model.pinterest_source.stg_pinterest_ads__advertiser_history"], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_history_updated_at__advertiser_id.94e8f4de4b": ["model.pinterest_source.stg_pinterest_ads__advertiser_history"], "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_report_date_day.153bd03c95": ["model.pinterest_source.stg_pinterest_ads__advertiser_report"], "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_report_advertiser_id.1b16ed73ff": ["model.pinterest_source.stg_pinterest_ads__advertiser_report"], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_report_date_day__advertiser_id.e92ce8a9c0": ["model.pinterest_source.stg_pinterest_ads__advertiser_report"], "test.pinterest_source.not_null_stg_pinterest_ads__campaign_report_date_day.7ef5fb1238": ["model.pinterest_source.stg_pinterest_ads__campaign_report"], "test.pinterest_source.not_null_stg_pinterest_ads__campaign_report_campaign_id.a287eba0fc": ["model.pinterest_source.stg_pinterest_ads__campaign_report"], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_report_date_day__campaign_id__advertiser_id.ff47cb8abc": ["model.pinterest_source.stg_pinterest_ads__campaign_report"], "test.pinterest_source.not_null_stg_pinterest_ads__keyword_history_keyword_id.246889377a": ["model.pinterest_source.stg_pinterest_ads__keyword_history"], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_history_keyword_id__ad_group_id___fivetran_synced.d122faa877": ["model.pinterest_source.stg_pinterest_ads__keyword_history"], "test.pinterest_source.not_null_stg_pinterest_ads__keyword_report_date_day.9937216300": ["model.pinterest_source.stg_pinterest_ads__keyword_report"], "test.pinterest_source.not_null_stg_pinterest_ads__keyword_report_keyword_id.5f00679c48": ["model.pinterest_source.stg_pinterest_ads__keyword_report"], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_report_date_day__keyword_id__ad_group_id__campaign_id__advertiser_id.3ac101cc13": ["model.pinterest_source.stg_pinterest_ads__keyword_report"], "test.tiktok_ads_source.unique_stg_tiktok_ads__advertiser_advertiser_id.078391ba66": ["model.tiktok_ads_source.stg_tiktok_ads__advertiser"], "test.tiktok_ads_source.not_null_stg_tiktok_ads__advertiser_advertiser_id.5deab92def": ["model.tiktok_ads_source.stg_tiktok_ads__advertiser"], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_history_ad_group_id.04778d7fad": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history"], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_history_ad_group_id__updated_at.cec78c01de": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history"], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_history_ad_id.4ffd05b23a": ["model.tiktok_ads_source.stg_tiktok_ads__ad_history"], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_history_ad_id__updated_at.66b86b4dd1": ["model.tiktok_ads_source.stg_tiktok_ads__ad_history"], "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_history_campaign_id.7f9147d1e1": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_history"], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_history_campaign_id__updated_at.72bf07011b": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_history"], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_report_hourly_ad_id.ee84d783ed": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly"], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_report_hourly_stat_time_hour.9e2a2dca81": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly"], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_report_hourly_ad_id__stat_time_hour.e70f8cef6d": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly"], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_report_hourly_ad_group_id.8da17119f1": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly"], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_report_hourly_stat_time_hour.ca4b495127": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly"], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_report_hourly_ad_group_id__stat_time_hour.1aeaeb71ad": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly"], "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_report_hourly_campaign_id.ef898379fb": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly"], "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_report_hourly_stat_time_hour.e75e13184c": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly"], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_report_hourly_campaign_id__stat_time_hour.8e4a1e4b34": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly"], "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f": ["model.facebook_ads_source.stg_facebook_ads__account_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__account_history__fivetran_synced.0570e35e1f": ["model.facebook_ads_source.stg_facebook_ads__account_history"], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__account_history_account_id___fivetran_synced.f9b4d28fa2": ["model.facebook_ads_source.stg_facebook_ads__account_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064": ["model.facebook_ads_source.stg_facebook_ads__ad_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_updated_at.250a5a84e4": ["model.facebook_ads_source.stg_facebook_ads__ad_history"], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_history_ad_id__updated_at.2922c18b58": ["model.facebook_ads_source.stg_facebook_ads__ad_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_updated_at.ef7fafe0fa": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_set_history_ad_set_id__updated_at.0a60ad0fef": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_updated_at.9e59f99270": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__campaign_history_campaign_id__updated_at.7437b392c2": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history__fivetran_synced.3b0593cb4f": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_creative_id___fivetran_synced.69ddc26562": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__basic_ad_ad_id.2611b250fc": ["model.facebook_ads_source.stg_facebook_ads__basic_ad"], "test.facebook_ads_source.not_null_stg_facebook_ads__basic_ad_account_id.d06f6d861b": ["model.facebook_ads_source.stg_facebook_ads__basic_ad"], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__basic_ad_date_day__ad_id__account_id.bd909529e7": ["model.facebook_ads_source.stg_facebook_ads__basic_ad"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_account_history__fivetran_synced.2d5dd77824": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_account_history_ad_account_id.426d71d605": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_account_history_ad_account_id___fivetran_synced.cd4fd6b0be": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_history__fivetran_synced.1607c70fda": ["model.snapchat_ads_source.stg_snapchat_ads__ad_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_history_ad_id.e9d367fd15": ["model.snapchat_ads_source.stg_snapchat_ads__ad_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_history_ad_id___fivetran_synced.f84924f13b": ["model.snapchat_ads_source.stg_snapchat_ads__ad_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_hourly_report_ad_id.7e763de19d": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_hourly_report_date_hour.666cda1cd7": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_hourly_report_ad_id__date_hour.1a4ef6182a": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_history__fivetran_synced.7ed7d105ae": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_history_ad_squad_id.71c7122278": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_history_ad_squad_id___fivetran_synced.200b225a27": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id.ab16aa72c9": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_hourly_report_date_hour.6f0b63a9cb": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id__date_hour.774a407e69": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_history__fivetran_synced.55bc48b3ec": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_history_campaign_id.f74a0fb8c0": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_history_campaign_id___fivetran_synced.31b9fb6777": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_hourly_report_campaign_id.f255c38a3e": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_hourly_report_date_hour.0bc4218ac8": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_hourly_report_campaign_id__date_hour.64293afa9c": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_history__fivetran_synced.b9c95b4380": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_history_creative_id.09c83690f4": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_history_creative_id___fivetran_synced.c6f6c78b99": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_url_tag_history_creative_id.7ff6bb9c1b": ["model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history"], "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_url_tag_history_updated_at.894b86a924": ["model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_url_tag_history_creative_id__param_key__updated_at.cc3fa6acbe": ["model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history"], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__account_report_date_day__account_id__device_os__device_type__network__currency_code.2d5faac68f": ["model.microsoft_ads.microsoft_ads__account_report"], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__ad_group_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__currency_code.87353ef6b3": ["model.microsoft_ads.microsoft_ads__ad_group_report"], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__ad_report_date_day__account_id__campaign_id__ad_group_id__ad_id__ad_type__device_os__device_type__network__currency_code.4b91f31686": ["model.microsoft_ads.microsoft_ads__ad_report"], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__campaign_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code.d7e35aaa9b": ["model.microsoft_ads.microsoft_ads__campaign_report"], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__keyword_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__currency_code.9ddafdcbe9": ["model.microsoft_ads.microsoft_ads__keyword_report"], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__search_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network.99029c3602": ["model.microsoft_ads.microsoft_ads__search_report"], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__url_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__currency_code.070da99eb7": ["model.microsoft_ads.microsoft_ads__url_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__account_history_account_id.66fb3601e2": ["model.twitter_ads_source.stg_twitter_ads__account_history"], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__account_history_account_id__updated_timestamp.2725b1ff40": ["model.twitter_ads_source.stg_twitter_ads__account_history"], "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_history_campaign_id.51218487ce": ["model.twitter_ads_source.stg_twitter_ads__campaign_history"], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_history_campaign_id__updated_timestamp.c7054e5b55": ["model.twitter_ads_source.stg_twitter_ads__campaign_history"], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_history_line_item_id.2cef040809": ["model.twitter_ads_source.stg_twitter_ads__line_item_history"], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_history_line_item_id__updated_timestamp.b12672e022": ["model.twitter_ads_source.stg_twitter_ads__line_item_history"], "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id.f447a1cd09": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history"], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id__updated_timestamp.dddc4a21ef": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history"], "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_date_day.c4c46a5894": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id.6028694598": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_placement.c1b1f648b3": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement.7028206273": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_url_index.e998fb67be": ["model.twitter_ads_source.stg_twitter_ads__tweet_url"], "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_url_tweet_id.f7e1670218": ["model.twitter_ads_source.stg_twitter_ads__tweet_url"], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__tweet_url_index__tweet_id.eab5b85d74": ["model.twitter_ads_source.stg_twitter_ads__tweet_url"], "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_date_day.053c09786c": ["model.twitter_ads_source.stg_twitter_ads__campaign_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_campaign_id.a63b62981f": ["model.twitter_ads_source.stg_twitter_ads__campaign_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_placement.5067d8c4f4": ["model.twitter_ads_source.stg_twitter_ads__campaign_report"], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_report_date_day__campaign_id__placement.71102d8fdb": ["model.twitter_ads_source.stg_twitter_ads__campaign_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_date_day.0f4d8cc8fe": ["model.twitter_ads_source.stg_twitter_ads__line_item_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_line_item_id.9f5a4860b7": ["model.twitter_ads_source.stg_twitter_ads__line_item_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_placement.cd7e77e0eb": ["model.twitter_ads_source.stg_twitter_ads__line_item_report"], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_report_date_day__line_item_id__placement.251e077e6b": ["model.twitter_ads_source.stg_twitter_ads__line_item_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_date_day.c7e7155b13": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_line_item_id.e4f3fa2e5c": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_keyword.02bb211fa0": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_placement.f5bb738cac": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_keywords_report_date_day__line_item_id__keyword__placement.c47c820cc3": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"], "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_tweet_id.a0427f37cd": ["model.twitter_ads_source.stg_twitter_ads__tweet"], "test.twitter_ads_source.unique_stg_twitter_ads__tweet_tweet_id.7e44536c95": ["model.twitter_ads_source.stg_twitter_ads__tweet"], "test.linkedin.not_null_linkedin_ads__account_report_account_id.0c34ea1842": ["model.linkedin.linkedin_ads__account_report"], "test.linkedin.not_null_linkedin_ads__account_report_date_day.c4b33f8f53": ["model.linkedin.linkedin_ads__account_report"], "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__account_report_date_day__account_id.a2dcede91c": ["model.linkedin.linkedin_ads__account_report"], "test.linkedin.not_null_linkedin_ads__campaign_report_date_day.8d320b88b1": ["model.linkedin.linkedin_ads__campaign_report"], "test.linkedin.not_null_linkedin_ads__campaign_report_campaign_id.bf43964b15": ["model.linkedin.linkedin_ads__campaign_report"], "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_report_date_day__campaign_id__account_id__campaign_group_id.0b09b4b3f3": ["model.linkedin.linkedin_ads__campaign_report"], "test.linkedin.not_null_linkedin_ads__campaign_group_report_date_day.2676a1f76b": ["model.linkedin.linkedin_ads__campaign_group_report"], "test.linkedin.not_null_linkedin_ads__campaign_group_report_campaign_group_id.39b448cdaf": ["model.linkedin.linkedin_ads__campaign_group_report"], "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_group_report_date_day__campaign_group_id__account_id.f60989a7a6": ["model.linkedin.linkedin_ads__campaign_group_report"], "test.linkedin.not_null_linkedin_ads__creative_report_date_day.0c6338b020": ["model.linkedin.linkedin_ads__creative_report"], "test.linkedin.not_null_linkedin_ads__creative_report_creative_id.096d93f889": ["model.linkedin.linkedin_ads__creative_report"], "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__creative_report_date_day__creative_id__campaign_id__campaign_group_id__account_id.5c000e925f": ["model.linkedin.linkedin_ads__creative_report"], "test.linkedin.not_null_linkedin_ads__url_report_date_day.48b540f315": ["model.linkedin.linkedin_ads__url_report"], "test.linkedin.not_null_linkedin_ads__url_report_creative_id.83967fe9d2": ["model.linkedin.linkedin_ads__url_report"], "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__url_report_date_day__creative_id__campaign_id__campaign_group_id__account_id.d00d4a104d": ["model.linkedin.linkedin_ads__url_report"], "source.microsoft_ads_source.microsoft_ads.account_history": [], "source.microsoft_ads_source.microsoft_ads.account_performance_daily_report": [], "source.microsoft_ads_source.microsoft_ads.ad_group_history": [], "source.microsoft_ads_source.microsoft_ads.ad_group_performance_daily_report": [], "source.microsoft_ads_source.microsoft_ads.ad_history": [], "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report": [], "source.microsoft_ads_source.microsoft_ads.campaign_history": [], "source.microsoft_ads_source.microsoft_ads.campaign_performance_daily_report": [], "source.microsoft_ads_source.microsoft_ads.keyword_history": [], "source.microsoft_ads_source.microsoft_ads.keyword_performance_daily_report": [], "source.microsoft_ads_source.microsoft_ads.search_query_performance_daily_report": [], "source.linkedin_source.linkedin.ad_analytics_by_creative": [], "source.linkedin_source.linkedin.creative_history": [], "source.linkedin_source.linkedin.campaign_history": [], "source.linkedin_source.linkedin.campaign_group_history": [], "source.linkedin_source.linkedin.account_history": [], "source.linkedin_source.linkedin.ad_analytics_by_campaign": [], "source.google_ads_source.google_ads.ad_stats": [], "source.google_ads_source.google_ads.ad_history": [], "source.google_ads_source.google_ads.ad_group_history": [], "source.google_ads_source.google_ads.campaign_history": [], "source.google_ads_source.google_ads.account_history": [], "source.google_ads_source.google_ads.ad_group_criterion_history": [], "source.google_ads_source.google_ads.ad_group_stats": [], "source.google_ads_source.google_ads.campaign_stats": [], "source.google_ads_source.google_ads.keyword_stats": [], "source.google_ads_source.google_ads.account_stats": [], "source.apple_search_ads_source.apple_search_ads.ad_group_history": [], "source.apple_search_ads_source.apple_search_ads.ad_group_report": [], "source.apple_search_ads_source.apple_search_ads.ad_history": [], "source.apple_search_ads_source.apple_search_ads.ad_level_report": [], "source.apple_search_ads_source.apple_search_ads.campaign_history": [], "source.apple_search_ads_source.apple_search_ads.campaign_report": [], "source.apple_search_ads_source.apple_search_ads.keyword_history": [], "source.apple_search_ads_source.apple_search_ads.keyword_report": [], "source.apple_search_ads_source.apple_search_ads.organization": [], "source.apple_search_ads_source.apple_search_ads.search_term_report": [], "source.pinterest_source.pinterest_ads.pin_promotion_report": [], "source.pinterest_source.pinterest_ads.pin_promotion_history": [], "source.pinterest_source.pinterest_ads.campaign_history": [], "source.pinterest_source.pinterest_ads.ad_group_history": [], "source.pinterest_source.pinterest_ads.ad_group_report": [], "source.pinterest_source.pinterest_ads.advertiser_history": [], "source.pinterest_source.pinterest_ads.advertiser_report": [], "source.pinterest_source.pinterest_ads.campaign_report": [], "source.pinterest_source.pinterest_ads.keyword_history": [], "source.pinterest_source.pinterest_ads.keyword_report": [], "source.tiktok_ads_source.tiktok_ads.advertiser": [], "source.tiktok_ads_source.tiktok_ads.campaign_history": [], "source.tiktok_ads_source.tiktok_ads.adgroup_history": [], "source.tiktok_ads_source.tiktok_ads.ad_history": [], "source.tiktok_ads_source.tiktok_ads.ad_report_hourly": [], "source.tiktok_ads_source.tiktok_ads.campaign_report_hourly": [], "source.tiktok_ads_source.tiktok_ads.adgroup_report_hourly": [], "source.facebook_ads_source.facebook_ads.account_history": [], "source.facebook_ads_source.facebook_ads.ad_history": [], "source.facebook_ads_source.facebook_ads.ad_set_history": [], "source.facebook_ads_source.facebook_ads.basic_ad": [], "source.facebook_ads_source.facebook_ads.campaign_history": [], "source.facebook_ads_source.facebook_ads.creative_history": [], "source.snapchat_ads_source.snapchat_ads.ad_account_history": [], "source.snapchat_ads_source.snapchat_ads.ad_history": [], "source.snapchat_ads_source.snapchat_ads.ad_hourly_report": [], "source.snapchat_ads_source.snapchat_ads.ad_squad_history": [], "source.snapchat_ads_source.snapchat_ads.ad_squad_hourly_report": [], "source.snapchat_ads_source.snapchat_ads.campaign_history": [], "source.snapchat_ads_source.snapchat_ads.campaign_hourly_report": [], "source.snapchat_ads_source.snapchat_ads.creative_history": [], "source.snapchat_ads_source.snapchat_ads.creative_url_tag_history": [], "source.twitter_ads_source.twitter_ads.account_history": [], "source.twitter_ads_source.twitter_ads.campaign_history": [], "source.twitter_ads_source.twitter_ads.line_item_history": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_history": [], "source.twitter_ads_source.twitter_ads.tweet_url": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_report": [], "source.twitter_ads_source.twitter_ads.tweet": [], "source.twitter_ads_source.twitter_ads.campaign_report": [], "source.twitter_ads_source.twitter_ads.line_item_report": [], "source.twitter_ads_source.twitter_ads.line_item_keywords_report": []}, "child_map": {"seed.ad_reporting_integration_tests.twitter_line_item_history_data": ["model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp"], "seed.ad_reporting_integration_tests.apple_ad_group_history_data": [], "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"], "seed.ad_reporting_integration_tests.linkedin_account_history_data": ["model.linkedin_source.stg_linkedin_ads__account_history_tmp"], "seed.ad_reporting_integration_tests.apple_campaign_history_data": [], "seed.ad_reporting_integration_tests.linkedin_campaign_history_data": ["model.linkedin_source.stg_linkedin_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data": [], "seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp"], "seed.ad_reporting_integration_tests.twitter_campaign_history_data": ["model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.apple_keyword_history_data": [], "seed.ad_reporting_integration_tests.linkedin_creative_history_data": ["model.linkedin_source.stg_linkedin_ads__creative_history_tmp"], "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__account_history_tmp"], "seed.ad_reporting_integration_tests.tiktok_ad_history_data": ["model.tiktok_ads_source.stg_tiktok_ads__ad_history_tmp"], "seed.ad_reporting_integration_tests.pin_promotion_history_data": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"], "seed.ad_reporting_integration_tests.tiktok_adgroup_report_hourly_data": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly_tmp"], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp"], "seed.ad_reporting_integration_tests.tiktok_campaign_history_data": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.tiktok_advertiser_data": ["model.tiktok_ads_source.stg_tiktok_ads__advertiser_tmp"], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp"], "seed.ad_reporting_integration_tests.apple_ad_report_data": [], "seed.ad_reporting_integration_tests.google_ads_ad_stats_data": [], "seed.ad_reporting_integration_tests.ad_group_history_data": ["model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp"], "seed.ad_reporting_integration_tests.google_ads_account_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.twitter_tweet_url_data": ["model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp"], "seed.ad_reporting_integration_tests.campaign_history_data": ["model.pinterest_source.stg_pinterest_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.google_ads_campaign_history_data": [], "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative_tmp"], "seed.ad_reporting_integration_tests.snapchat_ad_history_data": ["model.snapchat_ads_source.stg_snapchat_ads__ad_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_account_history_data": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp"], "seed.ad_reporting_integration_tests.google_ads_ad_group_history_data": [], "seed.ad_reporting_integration_tests.snapchat_campaign_history_data": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"], "seed.ad_reporting_integration_tests.tiktok_ad_report_hourly_data": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly_tmp"], "seed.ad_reporting_integration_tests.google_ads_click_performance_data": [], "seed.ad_reporting_integration_tests.twitter_account_history_data": ["model.twitter_ads_source.stg_twitter_ads__account_history_tmp"], "seed.ad_reporting_integration_tests.snapchat_creative_history_data": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history_tmp"], "seed.ad_reporting_integration_tests.apple_keyword_report_data": [], "seed.ad_reporting_integration_tests.google_ads_ad_history_data": [], "seed.ad_reporting_integration_tests.apple_search_term_report_data": [], "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"], "seed.ad_reporting_integration_tests.apple_ad_group_report_data": [], "seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp"], "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data": ["model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp"], "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history_tmp"], "seed.ad_reporting_integration_tests.snapchat_ad_account_history_data": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp"], "seed.ad_reporting_integration_tests.apple_campaign_report_data": [], "seed.ad_reporting_integration_tests.pin_promotion_report_data": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp"], "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data": [], "seed.ad_reporting_integration_tests.apple_organization_data": [], "seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data": ["model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp"], "seed.ad_reporting_integration_tests.tiktok_campaign_report_hourly_data": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly_tmp"], "seed.ad_reporting_integration_tests.apple_ad_history_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp"], "seed.ad_reporting_integration_tests.tiktok_adgroup_history_data": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history_tmp"], "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report": ["model.microsoft_ads.microsoft_ads__account_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_daily_report_date_day__account_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.85ae65d69a", "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_daily_report_account_id.b17f45fe79"], "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report": ["model.microsoft_ads.microsoft_ads__search_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__search_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network__language__bid_match_type__delivered_match_type__top_vs_other.03cf031d0c", "test.microsoft_ads_source.not_null_stg_microsoft_ads__search_daily_report_search_query.57f687adcc"], "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report": ["model.microsoft_ads.microsoft_ads__keyword_report", "model.microsoft_ads.microsoft_ads__url_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.c6f46d202a", "test.microsoft_ads_source.not_null_stg_microsoft_ads__keyword_daily_report_keyword_id.e16b8c5047"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report": ["model.microsoft_ads.microsoft_ads__campaign_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_daily_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.f6a43acb95", "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_daily_report_campaign_id.8ac0418e84"], "model.microsoft_ads_source.stg_microsoft_ads__keyword_history": ["model.microsoft_ads.microsoft_ads__keyword_report", "model.microsoft_ads.microsoft_ads__search_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_history_keyword_id__modified_at.e1c525286c", "test.microsoft_ads_source.not_null_stg_microsoft_ads__keyword_history_keyword_id.19164a6209"], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report": ["model.microsoft_ads.microsoft_ads__ad_group_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_daily_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.8792b4adf4", "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_daily_report_ad_group_id.3e03e6eff7"], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history": ["model.microsoft_ads.microsoft_ads__ad_group_report", "model.microsoft_ads.microsoft_ads__ad_report", "model.microsoft_ads.microsoft_ads__keyword_report", "model.microsoft_ads.microsoft_ads__search_report", "model.microsoft_ads.microsoft_ads__url_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_history_ad_group_id__modified_at.12004c9de0", "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_id.c8353342b7"], "model.microsoft_ads_source.stg_microsoft_ads__ad_history": ["model.microsoft_ads.microsoft_ads__ad_report", "model.microsoft_ads.microsoft_ads__keyword_report", "model.microsoft_ads.microsoft_ads__search_report", "model.microsoft_ads.microsoft_ads__url_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_history_ad_id__modified_at.1f05b4ee6f", "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_id.6d02c26574"], "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report": ["model.microsoft_ads.microsoft_ads__ad_report", "model.microsoft_ads.microsoft_ads__url_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.80e8146841", "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_daily_report_ad_id.1ed6689aa8"], "model.microsoft_ads_source.stg_microsoft_ads__account_history": ["model.microsoft_ads.microsoft_ads__account_report", "model.microsoft_ads.microsoft_ads__ad_group_report", "model.microsoft_ads.microsoft_ads__ad_report", "model.microsoft_ads.microsoft_ads__campaign_report", "model.microsoft_ads.microsoft_ads__keyword_report", "model.microsoft_ads.microsoft_ads__search_report", "model.microsoft_ads.microsoft_ads__url_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_history_account_id__modified_at.5975327479", "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_id.cc273ee54e"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_history": ["model.microsoft_ads.microsoft_ads__ad_group_report", "model.microsoft_ads.microsoft_ads__ad_report", "model.microsoft_ads.microsoft_ads__campaign_report", "model.microsoft_ads.microsoft_ads__keyword_report", "model.microsoft_ads.microsoft_ads__search_report", "model.microsoft_ads.microsoft_ads__url_report", "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_history_campaign_id__modified_at.d2a9279427", "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_id.ee080a2122"], "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__search_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__search_daily_report"], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report"], "model.microsoft_ads_source.stg_microsoft_ads__ad_history_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_history"], "model.microsoft_ads_source.stg_microsoft_ads__account_history_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__account_history", "model.microsoft_ads_source.stg_microsoft_ads__account_history"], "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report"], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report"], "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report"], "model.microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_history", "model.microsoft_ads_source.stg_microsoft_ads__keyword_history"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp": ["model.microsoft_ads_source.stg_microsoft_ads__account_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__account_daily_report"], "model.tiktok_ads.tiktok_ads__ad_group_report": ["model.ad_reporting.int_ad_reporting__ad_group_report", "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__ad_group_report_ad_group_id__campaign_id__advertiser_id__date_day.ecd611f27e", "test.tiktok_ads.not_null_tiktok_ads__ad_group_report_ad_group_id.17fb8710f4", "test.tiktok_ads.not_null_tiktok_ads__ad_group_report_date_day.e39164964e"], "model.tiktok_ads.tiktok_ads__url_report": ["model.ad_reporting.int_ad_reporting__url_report", "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__url_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day.cf95489e47", "test.tiktok_ads.not_null_tiktok_ads__url_report_ad_id.6c41067bd0", "test.tiktok_ads.not_null_tiktok_ads__url_report_date_day.d593573eff"], "model.tiktok_ads.tiktok_ads__campaign_report": ["model.ad_reporting.int_ad_reporting__campaign_report", "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__campaign_report_campaign_id__advertiser_id__date_day.03c4f86b19", "test.tiktok_ads.not_null_tiktok_ads__campaign_report_campaign_id.8a2b0c8ef8", "test.tiktok_ads.not_null_tiktok_ads__campaign_report_date_day.3807b0e836"], "model.tiktok_ads.tiktok_ads__ad_report": ["model.ad_reporting.int_ad_reporting__ad_report", "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__ad_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day.3a887710fb", "test.tiktok_ads.not_null_tiktok_ads__ad_report_ad_id.2d8166e707", "test.tiktok_ads.not_null_tiktok_ads__ad_report_date_day.d61ee4a5ed"], "model.tiktok_ads.tiktok_ads__advertiser_report": ["model.ad_reporting.int_ad_reporting__account_report", "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__advertiser_report_advertiser_id__date_day.d298bb3cf9", "test.tiktok_ads.not_null_tiktok_ads__advertiser_report_advertiser_id.f956c568ce", "test.tiktok_ads.not_null_tiktok_ads__advertiser_report_date_day.1276998c99"], "model.twitter_ads.twitter_ads__account_report": ["model.ad_reporting.int_ad_reporting__account_report", "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__account_report_date_day__account_id__placement.a29cf85a4f", "test.twitter_ads.not_null_twitter_ads__account_report_account_id.90d5808908", "test.twitter_ads.not_null_twitter_ads__account_report_date_day.84896c5846", "test.twitter_ads.not_null_twitter_ads__account_report_placement.157dcb6194"], "model.twitter_ads.twitter_ads__campaign_report": ["model.ad_reporting.int_ad_reporting__campaign_report", "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__campaign_report_date_day__campaign_id__placement__account_id.2b09fa5421", "test.twitter_ads.not_null_twitter_ads__campaign_report_campaign_id.03b1c451b8", "test.twitter_ads.not_null_twitter_ads__campaign_report_date_day.2b30b279b0", "test.twitter_ads.not_null_twitter_ads__campaign_report_placement.c66d252e82"], "model.twitter_ads.twitter_ads__url_report": ["test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__url_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id.30b826d8ff", "test.twitter_ads.not_null_twitter_ads__url_report_date_day.33fcb7e04b", "test.twitter_ads.not_null_twitter_ads__url_report_placement.92ca3b192e", "test.twitter_ads.not_null_twitter_ads__url_report_promoted_tweet_id.d690f99143"], "model.twitter_ads.twitter_ads__promoted_tweet_report": ["model.ad_reporting.int_ad_reporting__ad_report", "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id.a46b1b4082", "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_placement.d89c9b27e5", "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.5df08e154e"], "model.twitter_ads.twitter_ads__line_item_report": ["model.ad_reporting.int_ad_reporting__ad_group_report", "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__line_item_report_date_day__line_item_id__placement__campaign_id__account_id.0e972e010a", "test.twitter_ads.not_null_twitter_ads__line_item_report_date_day.86c934e8ce", "test.twitter_ads.not_null_twitter_ads__line_item_report_line_item_id.0462d58211", "test.twitter_ads.not_null_twitter_ads__line_item_report_placement.f103369312"], "model.twitter_ads.twitter_ads__keyword_report": ["model.ad_reporting.int_ad_reporting__keyword_report", "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__keyword_report_date_day__line_item_id__keyword__placement__account_id__campaign_id.66e2c0d578", "test.twitter_ads.not_null_twitter_ads__keyword_report_date_day.e0ce90c1ec", "test.twitter_ads.not_null_twitter_ads__keyword_report_keyword.7f254683d7", "test.twitter_ads.not_null_twitter_ads__keyword_report_line_item_id.4982336b04", "test.twitter_ads.not_null_twitter_ads__keyword_report_placement.1cf3231796"], "model.pinterest.pinterest_ads__url_report": ["model.ad_reporting.int_ad_reporting__url_report", "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__url_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day.bd87b032c8", "test.pinterest.not_null_pinterest_ads__url_report_date_day.b09048037e", "test.pinterest.not_null_pinterest_ads__url_report_pin_promotion_id.0da711ad6a"], "model.pinterest.pinterest_ads__campaign_report": ["model.ad_reporting.int_ad_reporting__campaign_report", "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__campaign_report_campaign_id__advertiser_id__date_day.b5752d5279", "test.pinterest.not_null_pinterest_ads__campaign_report_campaign_id.8001ea60f2", "test.pinterest.not_null_pinterest_ads__campaign_report_date_day.10ac8272bf"], "model.pinterest.pinterest_ads__keyword_report": ["model.ad_reporting.int_ad_reporting__keyword_report", "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__keyword_report_keyword_id__ad_group_id__campaign_id__advertiser_id__date_day.b7517b039d", "test.pinterest.not_null_pinterest_ads__keyword_report_date_day.23130e9fba", "test.pinterest.not_null_pinterest_ads__keyword_report_keyword_id.0d73460198"], "model.pinterest.pinterest_ads__advertiser_report": ["model.ad_reporting.int_ad_reporting__account_report", "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__advertiser_report_advertiser_id__date_day.990badbc11", "test.pinterest.not_null_pinterest_ads__advertiser_report_advertiser_id.13380f0672", "test.pinterest.not_null_pinterest_ads__advertiser_report_date_day.aedeceeeca"], "model.pinterest.pinterest_ads__pin_promotion_report": ["model.ad_reporting.int_ad_reporting__ad_report", "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__pin_promotion_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day.1db3ffb1b3", "test.pinterest.not_null_pinterest_ads__pin_promotion_report_date_day.3128d28cfd", "test.pinterest.not_null_pinterest_ads__pin_promotion_report_pin_promotion_id.2540e0a561"], "model.pinterest.pinterest_ads__ad_group_report": ["model.ad_reporting.int_ad_reporting__ad_group_report", "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__ad_group_report_ad_group_id__advertiser_id__campaign_id__date_day.d207b7d69d", "test.pinterest.not_null_pinterest_ads__ad_group_report_ad_group_id.134f9ac6c2", "test.pinterest.not_null_pinterest_ads__ad_group_report_date_day.ed7c27b8a7"], "model.google_ads.google_ads__keyword_report": ["model.ad_reporting.int_ad_reporting__keyword_report", "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__keyword_report_ad_group_id__criterion_id__date_day.214ff3497d"], "model.google_ads.google_ads__campaign_report": ["model.ad_reporting.int_ad_reporting__campaign_report", "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__campaign_report_campaign_id__advertising_channel_type__advertising_channel_subtype__date_day.f735cda469"], "model.google_ads.google_ads__url_report": ["model.ad_reporting.int_ad_reporting__url_report", "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__url_report_ad_id__ad_group_id__date_day.a59b8e007f"], "model.google_ads.google_ads__ad_report": ["model.ad_reporting.int_ad_reporting__ad_report", "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__ad_report_ad_id__ad_group_id__date_day.fe37ea1a7b"], "model.google_ads.google_ads__ad_group_report": ["model.ad_reporting.int_ad_reporting__ad_group_report", "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__ad_group_report_ad_group_id__date_day.7c8e1c1a2f"], "model.google_ads.google_ads__account_report": ["model.ad_reporting.int_ad_reporting__account_report", "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__account_report_account_id__date_day.c52089771e"], "model.linkedin_source.stg_linkedin_ads__creative_history": ["model.linkedin.linkedin_ads__creative_report", "model.linkedin.linkedin_ads__url_report", "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__creative_history_version_tag__creative_id.cc02e6aa66", "test.linkedin_source.not_null_stg_linkedin_ads__creative_history_creative_id.4d51d55474", "test.linkedin_source.not_null_stg_linkedin_ads__creative_history_version_tag.d3f8e73227"], "model.linkedin_source.stg_linkedin_ads__campaign_history": ["model.linkedin.linkedin_ads__account_report", "model.linkedin.linkedin_ads__campaign_group_report", "model.linkedin.linkedin_ads__campaign_report", "model.linkedin.linkedin_ads__creative_report", "model.linkedin.linkedin_ads__url_report", "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_history_version_tag__campaign_id.2d20780793", "test.linkedin_source.not_null_stg_linkedin_ads__campaign_history_campaign_id.b026971ca2", "test.linkedin_source.not_null_stg_linkedin_ads__campaign_history_version_tag.64954cc469"], "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign": ["model.linkedin.linkedin_ads__account_report", "model.linkedin.linkedin_ads__campaign_group_report", "model.linkedin.linkedin_ads__campaign_report", "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_campaign_date_day__campaign_id.b03f3dc81d", "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_campaign_campaign_id.d6ae242f1a", "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_campaign_date_day.ef97bed766"], "model.linkedin_source.stg_linkedin_ads__campaign_group_history": ["model.linkedin.linkedin_ads__campaign_group_report", "model.linkedin.linkedin_ads__campaign_report", "model.linkedin.linkedin_ads__creative_report", "model.linkedin.linkedin_ads__url_report", "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_group_history_last_modified_at__campaign_group_id.e761ddb4da", "test.linkedin_source.not_null_stg_linkedin_ads__campaign_group_history_campaign_group_id.3888f3777d", "test.linkedin_source.not_null_stg_linkedin_ads__campaign_group_history_last_modified_at.a716e2a7ea"], "model.linkedin_source.stg_linkedin_ads__account_history": ["model.linkedin.linkedin_ads__account_report", "model.linkedin.linkedin_ads__campaign_group_report", "model.linkedin.linkedin_ads__campaign_report", "model.linkedin.linkedin_ads__creative_report", "model.linkedin.linkedin_ads__url_report", "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__account_history_account_id__version_tag.9a655993ce", "test.linkedin_source.not_null_stg_linkedin_ads__account_history_account_id.a9fa7f93c0", "test.linkedin_source.not_null_stg_linkedin_ads__account_history_version_tag.58c46c5d81"], "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative": ["model.linkedin.linkedin_ads__creative_report", "model.linkedin.linkedin_ads__url_report", "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_creative_date_day__creative_id.973a01e410", "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_creative_creative_id.062abfe14b", "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_creative_date_day.cb81bc4766"], "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative_tmp": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative"], "model.linkedin_source.stg_linkedin_ads__campaign_history_tmp": ["model.linkedin_source.stg_linkedin_ads__campaign_history", "model.linkedin_source.stg_linkedin_ads__campaign_history"], "model.linkedin_source.stg_linkedin_ads__account_history_tmp": ["model.linkedin_source.stg_linkedin_ads__account_history", "model.linkedin_source.stg_linkedin_ads__account_history"], "model.linkedin_source.stg_linkedin_ads__campaign_group_history_tmp": ["model.linkedin_source.stg_linkedin_ads__campaign_group_history", "model.linkedin_source.stg_linkedin_ads__campaign_group_history"], "model.linkedin_source.stg_linkedin_ads__creative_history_tmp": ["model.linkedin_source.stg_linkedin_ads__creative_history", "model.linkedin_source.stg_linkedin_ads__creative_history"], "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign", "model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign"], "model.facebook_ads.facebook_ads__url_report": ["model.ad_reporting.int_ad_reporting__url_report", "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__url_report_date_day__account_id__campaign_id__ad_set_id__ad_id.03a7e82eb7"], "model.facebook_ads.facebook_ads__url_tags": ["model.facebook_ads.int_facebook_ads__creative_history", "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__url_tags__fivetran_id__key__type.ba044777d3"], "model.facebook_ads.facebook_ads__campaign_report": ["model.ad_reporting.int_ad_reporting__campaign_report", "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__campaign_report_date_day__account_id__campaign_id.7cd75107e6"], "model.facebook_ads.facebook_ads__account_report": ["model.ad_reporting.int_ad_reporting__account_report", "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__account_report_date_day__account_id.5a94423e40"], "model.facebook_ads.facebook_ads__ad_report": ["model.ad_reporting.int_ad_reporting__ad_report", "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__ad_report_date_day__account_id__campaign_id__ad_set_id__ad_id.0a25b64738"], "model.facebook_ads.facebook_ads__ad_set_report": ["model.ad_reporting.int_ad_reporting__ad_group_report", "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__ad_set_report_date_day__account_id__campaign_id__ad_set_id.3dd4da872f"], "model.facebook_ads.int_facebook_ads__creative_history": ["model.facebook_ads.facebook_ads__url_report"], "model.snapchat_ads.snapchat_ads__ad_report": ["model.ad_reporting.int_ad_reporting__ad_report", "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__ad_report_ad_id__date_day.68c2c0de57", "test.snapchat_ads.not_null_snapchat_ads__ad_report_ad_id.9000850744", "test.snapchat_ads.not_null_snapchat_ads__ad_report_date_day.7c5350c8fe"], "model.snapchat_ads.snapchat_ads__url_report": ["model.ad_reporting.int_ad_reporting__url_report", "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__url_report_ad_id__date_day.54edc1b2be", "test.snapchat_ads.not_null_snapchat_ads__url_report_ad_id.ecbdfc0d78", "test.snapchat_ads.not_null_snapchat_ads__url_report_date_day.bcbe87a7f6"], "model.snapchat_ads.snapchat_ads__account_report": ["model.ad_reporting.int_ad_reporting__account_report", "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__account_report_ad_account_id__date_day.da5545b8e6", "test.snapchat_ads.not_null_snapchat_ads__account_report_ad_account_id.589c81966b", "test.snapchat_ads.not_null_snapchat_ads__account_report_date_day.688d7ed260"], "model.snapchat_ads.snapchat_ads__ad_squad_report": ["model.ad_reporting.int_ad_reporting__ad_group_report", "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__ad_squad_report_ad_squad_id__date_day.027a518f3c", "test.snapchat_ads.not_null_snapchat_ads__ad_squad_report_ad_squad_id.424c0bbffe", "test.snapchat_ads.not_null_snapchat_ads__ad_squad_report_date_day.39118ca639"], "model.snapchat_ads.snapchat_ads__campaign_report": ["model.ad_reporting.int_ad_reporting__campaign_report", "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__campaign_report_campaign_id__date_day.dfc5f7da4e", "test.snapchat_ads.not_null_snapchat_ads__campaign_report_campaign_id.19fd7135ac", "test.snapchat_ads.not_null_snapchat_ads__campaign_report_date_day.4e4e31223b"], "model.snapchat_ads.snapchat_ads__creative_history_prep": ["model.snapchat_ads.snapchat_ads__ad_report", "model.snapchat_ads.snapchat_ads__url_report"], "model.google_ads_source.stg_google_ads__ad_group_stats": ["model.google_ads.google_ads__ad_group_report", "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_stats_ad_group_id__device__ad_network_type__date_day.ed55af6020"], "model.google_ads_source.stg_google_ads__account_stats": ["model.google_ads.google_ads__account_report", "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__account_stats_account_id__device__ad_network_type__date_day.3019f8a860"], "model.google_ads_source.stg_google_ads__ad_group_history": ["model.google_ads.google_ads__ad_group_report", "model.google_ads.google_ads__ad_report", "model.google_ads.google_ads__keyword_report", "model.google_ads.google_ads__url_report", "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_history_ad_group_id__updated_at.096e8da5fd"], "model.google_ads_source.stg_google_ads__ad_history": ["model.google_ads.google_ads__ad_report", "model.google_ads.google_ads__url_report", "test.google_ads_source.dbt_expectations_expect_column_values_to_not_match_regex_list_stg_google_ads__ad_history_source_final_urls__any___.7dddbd81e7", "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_history_ad_id__ad_group_id__updated_at.0c065b0a0b"], "model.google_ads_source.stg_google_ads__keyword_stats": ["model.google_ads.google_ads__keyword_report", "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__keyword_stats_keyword_id__date_day.8f15198e68"], "model.google_ads_source.stg_google_ads__ad_stats": ["model.google_ads.google_ads__ad_report", "model.google_ads.google_ads__url_report", "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_stats_ad_id__ad_network_type__device__ad_group_id__date_day.c963f1863c"], "model.google_ads_source.stg_google_ads__ad_group_criterion_history": ["model.google_ads.google_ads__keyword_report", "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_criterion_history_criterion_id__ad_group_id__updated_at.197bbc6816"], "model.google_ads_source.stg_google_ads__campaign_stats": ["model.google_ads.google_ads__campaign_report", "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_stats_campaign_id__ad_network_type__device__date_day.69600f7d45"], "model.google_ads_source.stg_google_ads__campaign_history": ["model.google_ads.google_ads__ad_group_report", "model.google_ads.google_ads__ad_report", "model.google_ads.google_ads__campaign_report", "model.google_ads.google_ads__keyword_report", "model.google_ads.google_ads__url_report", "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_history_campaign_id__updated_at.8bf2733e86"], "model.google_ads_source.stg_google_ads__account_history": ["model.google_ads.google_ads__account_report", "model.google_ads.google_ads__ad_group_report", "model.google_ads.google_ads__ad_report", "model.google_ads.google_ads__campaign_report", "model.google_ads.google_ads__keyword_report", "model.google_ads.google_ads__url_report", "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__account_history_account_id__updated_at.19f35742f1"], "model.google_ads_source.stg_google_ads__account_stats_tmp": ["model.google_ads_source.stg_google_ads__account_stats", "model.google_ads_source.stg_google_ads__account_stats"], "model.google_ads_source.stg_google_ads__ad_group_history_tmp": ["model.google_ads_source.stg_google_ads__ad_group_history", "model.google_ads_source.stg_google_ads__ad_group_history"], "model.google_ads_source.stg_google_ads__campaign_stats_tmp": ["model.google_ads_source.stg_google_ads__campaign_stats", "model.google_ads_source.stg_google_ads__campaign_stats"], "model.google_ads_source.stg_google_ads__ad_stats_tmp": ["model.google_ads_source.stg_google_ads__ad_stats", "model.google_ads_source.stg_google_ads__ad_stats"], "model.google_ads_source.stg_google_ads__campaign_history_tmp": ["model.google_ads_source.stg_google_ads__campaign_history", "model.google_ads_source.stg_google_ads__campaign_history"], "model.google_ads_source.stg_google_ads__ad_group_criterion_history_tmp": ["model.google_ads_source.stg_google_ads__ad_group_criterion_history", "model.google_ads_source.stg_google_ads__ad_group_criterion_history"], "model.google_ads_source.stg_google_ads__ad_group_stats_tmp": ["model.google_ads_source.stg_google_ads__ad_group_stats", "model.google_ads_source.stg_google_ads__ad_group_stats"], "model.google_ads_source.stg_google_ads__keyword_stats_tmp": ["model.google_ads_source.stg_google_ads__keyword_stats", "model.google_ads_source.stg_google_ads__keyword_stats"], "model.google_ads_source.stg_google_ads__ad_history_tmp": ["model.google_ads_source.stg_google_ads__ad_history", "model.google_ads_source.stg_google_ads__ad_history"], "model.google_ads_source.stg_google_ads__account_history_tmp": ["model.google_ads_source.stg_google_ads__account_history", "model.google_ads_source.stg_google_ads__account_history"], "model.apple_search_ads.apple_search_ads__ad_report": ["model.ad_reporting.int_ad_reporting__ad_report", "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__ad_report_organization_id__campaign_id__ad_group_id__ad_id__date_day.54e27817a1", "test.apple_search_ads.not_null_apple_search_ads__ad_report_ad_id.0ab2c5075c", "test.apple_search_ads.not_null_apple_search_ads__ad_report_date_day.b86c049e17"], "model.apple_search_ads.apple_search_ads__ad_group_report": ["model.ad_reporting.int_ad_reporting__ad_group_report", "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__ad_group_report_organization_id__campaign_id__ad_group_id__date_day.19d180bab9", "test.apple_search_ads.not_null_apple_search_ads__ad_group_report_ad_group_id.60febec6b5", "test.apple_search_ads.not_null_apple_search_ads__ad_group_report_date_day.e6ffb30b3c"], "model.apple_search_ads.apple_search_ads__keyword_report": ["model.ad_reporting.int_ad_reporting__keyword_report", "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__keyword_report_organization_id__campaign_id__ad_group_id__keyword_id__date_day.78fb033a13", "test.apple_search_ads.not_null_apple_search_ads__keyword_report_date_day.3dec8d0e82", "test.apple_search_ads.not_null_apple_search_ads__keyword_report_keyword_id.ea493710db"], "model.apple_search_ads.apple_search_ads__search_term_report": ["model.ad_reporting.int_ad_reporting__search_report", "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__search_term_report_search_term_text__date_day.e60fe79ec4", "test.apple_search_ads.not_null_apple_search_ads__search_term_report_date_day.1bc3b0d57c", "test.apple_search_ads.not_null_apple_search_ads__search_term_report_search_term_text.aecc7447f7"], "model.apple_search_ads.apple_search_ads__campaign_report": ["model.ad_reporting.int_ad_reporting__campaign_report", "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__campaign_report_organization_id__campaign_id__date_day.647e56213f", "test.apple_search_ads.not_null_apple_search_ads__campaign_report_campaign_id.e26ed1e146", "test.apple_search_ads.not_null_apple_search_ads__campaign_report_date_day.35652b8d1a"], "model.apple_search_ads.apple_search_ads__organization_report": ["model.ad_reporting.int_ad_reporting__account_report", "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__organization_report_organization_id__date_day.8bc84fccc3", "test.apple_search_ads.not_null_apple_search_ads__organization_report_date_day.5784fed523", "test.apple_search_ads.not_null_apple_search_ads__organization_report_organization_id.b6cf7d69f8"], "model.ad_reporting.ad_reporting__campaign_report": ["test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__campaign_report_platform__date_day__campaign_id__account_id.4b3426da0f", "test.ad_reporting.not_null_ad_reporting__campaign_report_campaign_id.1cfaa7698b"], "model.ad_reporting.ad_reporting__account_report": ["test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__account_report_platform__date_day__account_id.1cadcf1583", "test.ad_reporting.not_null_ad_reporting__account_report_account_id.316a64c022"], "model.ad_reporting.ad_reporting__ad_group_report": ["test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__ad_group_report_platform__date_day__ad_group_id__campaign_id__account_id.2116e5a78a", "test.ad_reporting.not_null_ad_reporting__ad_group_report_ad_group_id.963e17e842"], "model.ad_reporting.ad_reporting__search_report": ["test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__search_report_platform__date_day__search_query__search_match_type__keyword_id__ad_group_id__campaign_id__account_id.4efd457bbf", "test.ad_reporting.not_null_ad_reporting__search_report_search_query.ee2f0fcafb"], "model.ad_reporting.ad_reporting__ad_report": ["test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__ad_report_platform__date_day__ad_id__ad_group_id__campaign_id__account_id.3c5bc5ae55", "test.ad_reporting.not_null_ad_reporting__ad_report_ad_id.f3eb210152"], "model.ad_reporting.ad_reporting__url_report": ["test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__url_report_platform__date_day__ad_group_id__campaign_id__account_id__base_url__url_host__url_path__utm_campaign__utm_content__utm_medium__utm_source__utm_term.cd216b1424", "test.ad_reporting.not_null_ad_reporting__url_report_base_url.a29864e5b6"], "model.ad_reporting.ad_reporting__keyword_report": ["test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__keyword_report_platform__date_day__keyword_text__keyword_match_type__ad_group_id__campaign_id__account_id.45c0f2075a", "test.ad_reporting.not_null_ad_reporting__keyword_report_keyword_text.5d9a007b6f"], "model.ad_reporting.int_ad_reporting__campaign_report": ["model.ad_reporting.ad_reporting__campaign_report"], "model.ad_reporting.int_ad_reporting__keyword_report": ["model.ad_reporting.ad_reporting__keyword_report"], "model.ad_reporting.int_ad_reporting__ad_report": ["model.ad_reporting.ad_reporting__ad_report"], "model.ad_reporting.int_ad_reporting__account_report": ["model.ad_reporting.ad_reporting__account_report"], "model.ad_reporting.int_ad_reporting__url_report": ["model.ad_reporting.ad_reporting__url_report"], "model.ad_reporting.int_ad_reporting__search_report": ["model.ad_reporting.ad_reporting__search_report"], "model.ad_reporting.int_ad_reporting__ad_group_report": ["model.ad_reporting.ad_reporting__ad_group_report"], "model.apple_search_ads_source.stg_apple_search_ads__campaign_history": ["model.apple_search_ads.apple_search_ads__ad_group_report", "model.apple_search_ads.apple_search_ads__ad_report", "model.apple_search_ads.apple_search_ads__campaign_report", "model.apple_search_ads.apple_search_ads__keyword_report", "model.apple_search_ads.apple_search_ads__organization_report", "model.apple_search_ads.apple_search_ads__search_term_report", "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_history_campaign_id__modified_at.317f970af9", "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_history_campaign_id.3f0f7502b8", "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_history_modified_at.f34a7a97c9"], "model.apple_search_ads_source.stg_apple_search_ads__ad_report": ["model.apple_search_ads.apple_search_ads__ad_report", "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_report_ad_id__date_day__ad_group_id.0d8d23c516", "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_ad_group_id.a397755e9f", "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_ad_id.d08e760c58", "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_date_day.e6252346d8"], "model.apple_search_ads_source.stg_apple_search_ads__campaign_report": ["model.apple_search_ads.apple_search_ads__campaign_report", "model.apple_search_ads.apple_search_ads__organization_report", "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_report_campaign_id__date_day.bad41b0481", "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_report_campaign_id.b83941e728", "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_report_date_day.c8dc10a6f3"], "model.apple_search_ads_source.stg_apple_search_ads__organization": ["model.apple_search_ads.apple_search_ads__ad_group_report", "model.apple_search_ads.apple_search_ads__ad_report", "model.apple_search_ads.apple_search_ads__campaign_report", "model.apple_search_ads.apple_search_ads__keyword_report", "model.apple_search_ads.apple_search_ads__organization_report", "model.apple_search_ads.apple_search_ads__search_term_report", "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__organization_organization_id.8647048f7a", "test.apple_search_ads_source.not_null_stg_apple_search_ads__organization_organization_id.b013ce33cb"], "model.apple_search_ads_source.stg_apple_search_ads__keyword_report": ["model.apple_search_ads.apple_search_ads__keyword_report", "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_report_keyword_id__date_day.9f0099cff8", "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_report_date_day.16098db928", "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_report_keyword_id.501725b09e"], "model.apple_search_ads_source.stg_apple_search_ads__keyword_history": ["model.apple_search_ads.apple_search_ads__keyword_report", "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_history_keyword_id__modified_at.7b06162d24", "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_history_keyword_id.889f83cfd2", "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_history_modified_at.42fde5a287"], "model.apple_search_ads_source.stg_apple_search_ads__search_term_report": ["model.apple_search_ads.apple_search_ads__search_term_report", "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__search_term_report__fivetran_id__date_day.aad2a48344", "test.apple_search_ads_source.not_null_stg_apple_search_ads__search_term_report__fivetran_id.aa430d1dad", "test.apple_search_ads_source.not_null_stg_apple_search_ads__search_term_report_date_day.fd93df3302"], "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history": ["model.apple_search_ads.apple_search_ads__ad_group_report", "model.apple_search_ads.apple_search_ads__ad_report", "model.apple_search_ads.apple_search_ads__keyword_report", "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_history_ad_group_id__modified_at.84af14c83b", "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_history_ad_group_id.dc128eecb7", "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_history_modified_at.e5d65fa28f"], "model.apple_search_ads_source.stg_apple_search_ads__ad_history": ["model.apple_search_ads.apple_search_ads__ad_report", "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_history_ad_id__modified_at.38599b8cba", "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_history_ad_id.4ad3bde32a", "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_history_modified_at.2eea7e006d"], "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report": ["model.apple_search_ads.apple_search_ads__ad_group_report", "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_report_ad_group_id__date_day.a0fcc4e33c", "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_report_ad_group_id.a115f9cfc1", "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_report_date_day.4dfd46a43b"], "model.apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report", "model.apple_search_ads_source.stg_apple_search_ads__search_term_report"], "model.apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history", "model.apple_search_ads_source.stg_apple_search_ads__campaign_history"], "model.apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_history", "model.apple_search_ads_source.stg_apple_search_ads__keyword_history"], "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history", "model.apple_search_ads_source.stg_apple_search_ads__ad_group_history"], "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report", "model.apple_search_ads_source.stg_apple_search_ads__ad_group_report"], "model.apple_search_ads_source.stg_apple_search_ads__ad_history_tmp": ["model.apple_search_ads_source.stg_apple_search_ads__ad_history", "model.apple_search_ads_source.stg_apple_search_ads__ad_history"], "model.apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report", "model.apple_search_ads_source.stg_apple_search_ads__campaign_report"], "model.apple_search_ads_source.stg_apple_search_ads__organization_tmp": ["model.apple_search_ads_source.stg_apple_search_ads__organization", "model.apple_search_ads_source.stg_apple_search_ads__organization"], "model.apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report", "model.apple_search_ads_source.stg_apple_search_ads__keyword_report"], "model.apple_search_ads_source.stg_apple_search_ads__ad_report_tmp": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report", "model.apple_search_ads_source.stg_apple_search_ads__ad_report"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history": ["model.pinterest.pinterest_ads__pin_promotion_report", "model.pinterest.pinterest_ads__url_report", "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_history__fivetran_synced__pin_promotion_id.8e9ab31ea9", "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_pin_promotion_id.171995cd34"], "model.pinterest_source.stg_pinterest_ads__keyword_report": ["model.pinterest.pinterest_ads__keyword_report", "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_report_date_day__keyword_id__ad_group_id__campaign_id__advertiser_id.3ac101cc13", "test.pinterest_source.not_null_stg_pinterest_ads__keyword_report_date_day.9937216300", "test.pinterest_source.not_null_stg_pinterest_ads__keyword_report_keyword_id.5f00679c48"], "model.pinterest_source.stg_pinterest_ads__ad_group_report": ["model.pinterest.pinterest_ads__ad_group_report", "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_report_date_day__ad_group_id__campaign_id__advertiser_id.3800c02b0e", "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_report_ad_group_id.bb8cf3c471", "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_report_date_day.80e8904c4c"], "model.pinterest_source.stg_pinterest_ads__campaign_history": ["model.pinterest.pinterest_ads__ad_group_report", "model.pinterest.pinterest_ads__campaign_report", "model.pinterest.pinterest_ads__keyword_report", "model.pinterest.pinterest_ads__pin_promotion_report", "model.pinterest.pinterest_ads__url_report", "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_history_campaign_id___fivetran_synced.eff7196b87", "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_campaign_id.60cb10d341"], "model.pinterest_source.stg_pinterest_ads__advertiser_report": ["model.pinterest.pinterest_ads__advertiser_report", "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_report_date_day__advertiser_id.e92ce8a9c0", "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_report_advertiser_id.1b16ed73ff", "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_report_date_day.153bd03c95"], "model.pinterest_source.stg_pinterest_ads__advertiser_history": ["model.pinterest.pinterest_ads__ad_group_report", "model.pinterest.pinterest_ads__advertiser_report", "model.pinterest.pinterest_ads__campaign_report", "model.pinterest.pinterest_ads__keyword_report", "model.pinterest.pinterest_ads__pin_promotion_report", "model.pinterest.pinterest_ads__url_report", "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_history_updated_at__advertiser_id.94e8f4de4b", "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_history_advertiser_id.7d24f665fb"], "model.pinterest_source.stg_pinterest_ads__campaign_report": ["model.pinterest.pinterest_ads__campaign_report", "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_report_date_day__campaign_id__advertiser_id.ff47cb8abc", "test.pinterest_source.not_null_stg_pinterest_ads__campaign_report_campaign_id.a287eba0fc", "test.pinterest_source.not_null_stg_pinterest_ads__campaign_report_date_day.7ef5fb1238"], "model.pinterest_source.stg_pinterest_ads__keyword_history": ["model.pinterest.pinterest_ads__keyword_report", "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_history_keyword_id__ad_group_id___fivetran_synced.d122faa877", "test.pinterest_source.not_null_stg_pinterest_ads__keyword_history_keyword_id.246889377a"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report": ["model.pinterest.pinterest_ads__pin_promotion_report", "model.pinterest.pinterest_ads__url_report", "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_report_date_day__pin_promotion_id__ad_group_id__campaign_id__advertiser_id.7ea04e6024", "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_date_day.ed272212a1", "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_pin_promotion_id.9c3c9f71ab"], "model.pinterest_source.stg_pinterest_ads__ad_group_history": ["model.pinterest.pinterest_ads__ad_group_report", "model.pinterest.pinterest_ads__keyword_report", "model.pinterest.pinterest_ads__pin_promotion_report", "model.pinterest.pinterest_ads__url_report", "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_history_ad_group_id___fivetran_synced.1132e1f339", "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_ad_group_id.220c6220be"], "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp": ["model.pinterest_source.stg_pinterest_ads__advertiser_history", "model.pinterest_source.stg_pinterest_ads__advertiser_history"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "model.pinterest_source.stg_pinterest_ads__campaign_report_tmp": ["model.pinterest_source.stg_pinterest_ads__campaign_report", "model.pinterest_source.stg_pinterest_ads__campaign_report"], "model.pinterest_source.stg_pinterest_ads__advertiser_report_tmp": ["model.pinterest_source.stg_pinterest_ads__advertiser_report", "model.pinterest_source.stg_pinterest_ads__advertiser_report"], "model.pinterest_source.stg_pinterest_ads__keyword_report_tmp": ["model.pinterest_source.stg_pinterest_ads__keyword_report", "model.pinterest_source.stg_pinterest_ads__keyword_report"], "model.pinterest_source.stg_pinterest_ads__ad_group_report_tmp": ["model.pinterest_source.stg_pinterest_ads__ad_group_report", "model.pinterest_source.stg_pinterest_ads__ad_group_report"], "model.pinterest_source.stg_pinterest_ads__keyword_history_tmp": ["model.pinterest_source.stg_pinterest_ads__keyword_history", "model.pinterest_source.stg_pinterest_ads__keyword_history"], "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp": ["model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__campaign_history"], "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp": ["model.pinterest_source.stg_pinterest_ads__ad_group_history", "model.pinterest_source.stg_pinterest_ads__ad_group_history"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly": ["model.tiktok_ads.tiktok_ads__campaign_report", "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_report_hourly_campaign_id__stat_time_hour.8e4a1e4b34", "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_report_hourly_campaign_id.ef898379fb", "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_report_hourly_stat_time_hour.e75e13184c"], "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly": ["model.tiktok_ads.tiktok_ads__ad_group_report", "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_report_hourly_ad_group_id__stat_time_hour.1aeaeb71ad", "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_report_hourly_ad_group_id.8da17119f1", "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_report_hourly_stat_time_hour.ca4b495127"], "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history": ["model.tiktok_ads.tiktok_ads__ad_group_report", "model.tiktok_ads.tiktok_ads__ad_report", "model.tiktok_ads.tiktok_ads__url_report", "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_history_ad_group_id__updated_at.cec78c01de", "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_history_ad_group_id.04778d7fad"], "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly": ["model.tiktok_ads.tiktok_ads__ad_report", "model.tiktok_ads.tiktok_ads__advertiser_report", "model.tiktok_ads.tiktok_ads__url_report", "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_report_hourly_ad_id__stat_time_hour.e70f8cef6d", "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_report_hourly_ad_id.ee84d783ed", "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_report_hourly_stat_time_hour.9e2a2dca81"], "model.tiktok_ads_source.stg_tiktok_ads__advertiser": ["model.tiktok_ads.tiktok_ads__ad_group_report", "model.tiktok_ads.tiktok_ads__ad_report", "model.tiktok_ads.tiktok_ads__advertiser_report", "model.tiktok_ads.tiktok_ads__campaign_report", "model.tiktok_ads.tiktok_ads__url_report", "test.tiktok_ads_source.not_null_stg_tiktok_ads__advertiser_advertiser_id.5deab92def", "test.tiktok_ads_source.unique_stg_tiktok_ads__advertiser_advertiser_id.078391ba66"], "model.tiktok_ads_source.stg_tiktok_ads__ad_history": ["model.tiktok_ads.tiktok_ads__ad_report", "model.tiktok_ads.tiktok_ads__advertiser_report", "model.tiktok_ads.tiktok_ads__url_report", "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_history_ad_id__updated_at.66b86b4dd1", "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_history_ad_id.4ffd05b23a"], "model.tiktok_ads_source.stg_tiktok_ads__campaign_history": ["model.tiktok_ads.tiktok_ads__ad_group_report", "model.tiktok_ads.tiktok_ads__ad_report", "model.tiktok_ads.tiktok_ads__campaign_report", "model.tiktok_ads.tiktok_ads__url_report", "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_history_campaign_id__updated_at.72bf07011b", "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_history_campaign_id.7f9147d1e1"], "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly_tmp": ["model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly"], "model.tiktok_ads_source.stg_tiktok_ads__ad_history_tmp": ["model.tiktok_ads_source.stg_tiktok_ads__ad_history", "model.tiktok_ads_source.stg_tiktok_ads__ad_history"], "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history_tmp": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_history", "model.tiktok_ads_source.stg_tiktok_ads__ad_group_history"], "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly_tmp": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly"], "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly_tmp": ["model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly", "model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly"], "model.tiktok_ads_source.stg_tiktok_ads__campaign_history_tmp": ["model.tiktok_ads_source.stg_tiktok_ads__campaign_history", "model.tiktok_ads_source.stg_tiktok_ads__campaign_history"], "model.tiktok_ads_source.stg_tiktok_ads__advertiser_tmp": ["model.tiktok_ads_source.stg_tiktok_ads__advertiser", "model.tiktok_ads_source.stg_tiktok_ads__advertiser"], "model.facebook_ads_source.stg_facebook_ads__basic_ad": ["model.facebook_ads.facebook_ads__account_report", "model.facebook_ads.facebook_ads__ad_report", "model.facebook_ads.facebook_ads__ad_set_report", "model.facebook_ads.facebook_ads__campaign_report", "model.facebook_ads.facebook_ads__url_report", "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__basic_ad_date_day__ad_id__account_id.bd909529e7", "test.facebook_ads_source.not_null_stg_facebook_ads__basic_ad_account_id.d06f6d861b", "test.facebook_ads_source.not_null_stg_facebook_ads__basic_ad_ad_id.2611b250fc"], "model.facebook_ads_source.stg_facebook_ads__creative_history": ["model.facebook_ads.facebook_ads__url_tags", "model.facebook_ads.int_facebook_ads__creative_history", "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_creative_id___fivetran_synced.69ddc26562", "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history__fivetran_synced.3b0593cb4f", "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261"], "model.facebook_ads_source.stg_facebook_ads__campaign_history": ["model.facebook_ads.facebook_ads__ad_report", "model.facebook_ads.facebook_ads__ad_set_report", "model.facebook_ads.facebook_ads__campaign_report", "model.facebook_ads.facebook_ads__url_report", "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__campaign_history_campaign_id__updated_at.7437b392c2", "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852", "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_updated_at.9e59f99270"], "model.facebook_ads_source.stg_facebook_ads__account_history": ["model.facebook_ads.facebook_ads__account_report", "model.facebook_ads.facebook_ads__ad_report", "model.facebook_ads.facebook_ads__ad_set_report", "model.facebook_ads.facebook_ads__campaign_report", "model.facebook_ads.facebook_ads__url_report", "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__account_history_account_id___fivetran_synced.f9b4d28fa2", "test.facebook_ads_source.not_null_stg_facebook_ads__account_history__fivetran_synced.0570e35e1f", "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f"], "model.facebook_ads_source.stg_facebook_ads__ad_history": ["model.facebook_ads.facebook_ads__ad_report", "model.facebook_ads.facebook_ads__ad_set_report", "model.facebook_ads.facebook_ads__campaign_report", "model.facebook_ads.facebook_ads__url_report", "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_history_ad_id__updated_at.2922c18b58", "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064", "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_updated_at.250a5a84e4"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history": ["model.facebook_ads.facebook_ads__ad_report", "model.facebook_ads.facebook_ads__ad_set_report", "model.facebook_ads.facebook_ads__url_report", "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_set_history_ad_set_id__updated_at.0a60ad0fef", "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb", "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_updated_at.ef7fafe0fa"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history"], "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__basic_ad"], "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_history"], "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__campaign_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history"], "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__creative_history", "model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__account_history"], "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report": ["model.snapchat_ads.snapchat_ads__ad_squad_report", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id__date_hour.774a407e69", "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id.ab16aa72c9", "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_hourly_report_date_hour.6f0b63a9cb"], "model.snapchat_ads_source.stg_snapchat_ads__ad_history": ["model.snapchat_ads.snapchat_ads__account_report", "model.snapchat_ads.snapchat_ads__ad_report", "model.snapchat_ads.snapchat_ads__url_report", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_history_ad_id___fivetran_synced.f84924f13b", "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_history__fivetran_synced.1607c70fda", "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_history_ad_id.e9d367fd15"], "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history": ["model.snapchat_ads.snapchat_ads__account_report", "model.snapchat_ads.snapchat_ads__ad_squad_report", "model.snapchat_ads.snapchat_ads__url_report", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_history_ad_squad_id___fivetran_synced.200b225a27", "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_history__fivetran_synced.7ed7d105ae", "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_history_ad_squad_id.71c7122278"], "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report": ["model.snapchat_ads.snapchat_ads__account_report", "model.snapchat_ads.snapchat_ads__ad_report", "model.snapchat_ads.snapchat_ads__url_report", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_hourly_report_ad_id__date_hour.1a4ef6182a", "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_hourly_report_ad_id.7e763de19d", "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_hourly_report_date_hour.666cda1cd7"], "model.snapchat_ads_source.stg_snapchat_ads__creative_history": ["model.snapchat_ads.snapchat_ads__creative_history_prep", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_history_creative_id___fivetran_synced.c6f6c78b99", "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_history__fivetran_synced.b9c95b4380", "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_history_creative_id.09c83690f4"], "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history": ["model.snapchat_ads.snapchat_ads__creative_history_prep", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_url_tag_history_creative_id__param_key__updated_at.cc3fa6acbe", "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_url_tag_history_creative_id.7ff6bb9c1b", "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_url_tag_history_updated_at.894b86a924"], "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history": ["model.snapchat_ads.snapchat_ads__account_report", "model.snapchat_ads.snapchat_ads__ad_report", "model.snapchat_ads.snapchat_ads__ad_squad_report", "model.snapchat_ads.snapchat_ads__campaign_report", "model.snapchat_ads.snapchat_ads__url_report", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_account_history_ad_account_id___fivetran_synced.cd4fd6b0be", "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_account_history__fivetran_synced.2d5dd77824", "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_account_history_ad_account_id.426d71d605"], "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report": ["model.snapchat_ads.snapchat_ads__campaign_report", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_hourly_report_campaign_id__date_hour.64293afa9c", "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_hourly_report_campaign_id.f255c38a3e", "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_hourly_report_date_hour.0bc4218ac8"], "model.snapchat_ads_source.stg_snapchat_ads__campaign_history": ["model.snapchat_ads.snapchat_ads__account_report", "model.snapchat_ads.snapchat_ads__ad_squad_report", "model.snapchat_ads.snapchat_ads__campaign_report", "model.snapchat_ads.snapchat_ads__url_report", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_history_campaign_id___fivetran_synced.31b9fb6777", "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_history__fivetran_synced.55bc48b3ec", "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_history_campaign_id.f74a0fb8c0"], "model.snapchat_ads_source.stg_snapchat_ads__creative_history_tmp": ["model.snapchat_ads_source.stg_snapchat_ads__creative_history", "model.snapchat_ads_source.stg_snapchat_ads__creative_history"], "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp": ["model.snapchat_ads_source.stg_snapchat_ads__ad_account_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_account_history"], "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp": ["model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report", "model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report"], "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp": ["model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history", "model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history"], "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report"], "model.snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_history", "model.snapchat_ads_source.stg_snapchat_ads__campaign_history"], "model.snapchat_ads_source.stg_snapchat_ads__ad_history_tmp": ["model.snapchat_ads_source.stg_snapchat_ads__ad_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_history"], "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history", "model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history"], "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report", "model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report"], "model.microsoft_ads.microsoft_ads__ad_report": ["model.ad_reporting.int_ad_reporting__ad_report", "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__ad_report_date_day__account_id__campaign_id__ad_group_id__ad_id__ad_type__device_os__device_type__network__currency_code.4b91f31686"], "model.microsoft_ads.microsoft_ads__ad_group_report": ["model.ad_reporting.int_ad_reporting__ad_group_report", "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__ad_group_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__currency_code.87353ef6b3"], "model.microsoft_ads.microsoft_ads__keyword_report": ["model.ad_reporting.int_ad_reporting__keyword_report", "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__keyword_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__currency_code.9ddafdcbe9"], "model.microsoft_ads.microsoft_ads__url_report": ["model.ad_reporting.int_ad_reporting__url_report", "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__url_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__currency_code.070da99eb7"], "model.microsoft_ads.microsoft_ads__account_report": ["model.ad_reporting.int_ad_reporting__account_report", "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__account_report_date_day__account_id__device_os__device_type__network__currency_code.2d5faac68f"], "model.microsoft_ads.microsoft_ads__search_report": ["model.ad_reporting.int_ad_reporting__search_report", "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__search_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network.99029c3602"], "model.microsoft_ads.microsoft_ads__campaign_report": ["model.ad_reporting.int_ad_reporting__campaign_report", "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__campaign_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code.d7e35aaa9b"], "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report": ["model.twitter_ads.twitter_ads__keyword_report", "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_keywords_report_date_day__line_item_id__keyword__placement.c47c820cc3", "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_date_day.c7e7155b13", "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_keyword.02bb211fa0", "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_line_item_id.e4f3fa2e5c", "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_placement.f5bb738cac"], "model.twitter_ads_source.stg_twitter_ads__campaign_report": ["model.twitter_ads.twitter_ads__campaign_report", "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_report_date_day__campaign_id__placement.71102d8fdb", "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_campaign_id.a63b62981f", "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_date_day.053c09786c", "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_placement.5067d8c4f4"], "model.twitter_ads_source.stg_twitter_ads__line_item_history": ["model.twitter_ads.twitter_ads__keyword_report", "model.twitter_ads.twitter_ads__line_item_report", "model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_history_line_item_id__updated_timestamp.b12672e022", "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_history_line_item_id.2cef040809"], "model.twitter_ads_source.stg_twitter_ads__line_item_report": ["model.twitter_ads.twitter_ads__line_item_report", "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_report_date_day__line_item_id__placement.251e077e6b", "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_date_day.0f4d8cc8fe", "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_line_item_id.9f5a4860b7", "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_placement.cd7e77e0eb"], "model.twitter_ads_source.stg_twitter_ads__campaign_history": ["model.twitter_ads.twitter_ads__campaign_report", "model.twitter_ads.twitter_ads__keyword_report", "model.twitter_ads.twitter_ads__line_item_report", "model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_history_campaign_id__updated_timestamp.c7054e5b55", "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_history_campaign_id.51218487ce"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report": ["model.twitter_ads.twitter_ads__account_report", "model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement.7028206273", "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_date_day.c4c46a5894", "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_placement.c1b1f648b3", "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id.6028694598"], "model.twitter_ads_source.stg_twitter_ads__tweet": ["model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_tweet_id.a0427f37cd", "test.twitter_ads_source.unique_stg_twitter_ads__tweet_tweet_id.7e44536c95"], "model.twitter_ads_source.stg_twitter_ads__account_history": ["model.twitter_ads.twitter_ads__account_report", "model.twitter_ads.twitter_ads__campaign_report", "model.twitter_ads.twitter_ads__keyword_report", "model.twitter_ads.twitter_ads__line_item_report", "model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__account_history_account_id__updated_timestamp.2725b1ff40", "test.twitter_ads_source.not_null_stg_twitter_ads__account_history_account_id.66fb3601e2"], "model.twitter_ads_source.stg_twitter_ads__tweet_url": ["model.twitter_ads.twitter_ads__url_report", "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__tweet_url_index__tweet_id.eab5b85d74", "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_url_index.e998fb67be", "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_url_tweet_id.f7e1670218"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history": ["model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id__updated_timestamp.dddc4a21ef", "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id.f447a1cd09"], "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp": ["model.twitter_ads_source.stg_twitter_ads__tweet_url", "model.twitter_ads_source.stg_twitter_ads__tweet_url"], "model.twitter_ads_source.stg_twitter_ads__tweet_tmp": ["model.twitter_ads_source.stg_twitter_ads__tweet", "model.twitter_ads_source.stg_twitter_ads__tweet"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"], "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history"], "model.twitter_ads_source.stg_twitter_ads__campaign_report_tmp": ["model.twitter_ads_source.stg_twitter_ads__campaign_report", "model.twitter_ads_source.stg_twitter_ads__campaign_report"], "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history"], "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report", "model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report"], "model.twitter_ads_source.stg_twitter_ads__line_item_report_tmp": ["model.twitter_ads_source.stg_twitter_ads__line_item_report", "model.twitter_ads_source.stg_twitter_ads__line_item_report"], "model.twitter_ads_source.stg_twitter_ads__account_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__account_history"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history"], "model.linkedin.linkedin_ads__campaign_group_report": ["model.ad_reporting.int_ad_reporting__campaign_report", "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_group_report_date_day__campaign_group_id__account_id.f60989a7a6", "test.linkedin.not_null_linkedin_ads__campaign_group_report_campaign_group_id.39b448cdaf", "test.linkedin.not_null_linkedin_ads__campaign_group_report_date_day.2676a1f76b"], "model.linkedin.linkedin_ads__creative_report": ["model.ad_reporting.int_ad_reporting__ad_report", "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__creative_report_date_day__creative_id__campaign_id__campaign_group_id__account_id.5c000e925f", "test.linkedin.not_null_linkedin_ads__creative_report_creative_id.096d93f889", "test.linkedin.not_null_linkedin_ads__creative_report_date_day.0c6338b020"], "model.linkedin.linkedin_ads__campaign_report": ["model.ad_reporting.int_ad_reporting__ad_group_report", "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_report_date_day__campaign_id__account_id__campaign_group_id.0b09b4b3f3", "test.linkedin.not_null_linkedin_ads__campaign_report_campaign_id.bf43964b15", "test.linkedin.not_null_linkedin_ads__campaign_report_date_day.8d320b88b1"], "model.linkedin.linkedin_ads__account_report": ["model.ad_reporting.int_ad_reporting__account_report", "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__account_report_date_day__account_id.a2dcede91c", "test.linkedin.not_null_linkedin_ads__account_report_account_id.0c34ea1842", "test.linkedin.not_null_linkedin_ads__account_report_date_day.c4b33f8f53"], "model.linkedin.linkedin_ads__url_report": ["test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__url_report_date_day__creative_id__campaign_id__campaign_group_id__account_id.d00d4a104d", "test.linkedin.not_null_linkedin_ads__url_report_creative_id.83967fe9d2", "test.linkedin.not_null_linkedin_ads__url_report_date_day.48b540f315"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_id.cc273ee54e": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_history_account_id__modified_at.5975327479": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_daily_report_account_id.b17f45fe79": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__account_daily_report_date_day__account_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.85ae65d69a": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_id.c8353342b7": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_history_ad_group_id__modified_at.12004c9de0": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_daily_report_ad_group_id.3e03e6eff7": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_group_daily_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.8792b4adf4": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_id.6d02c26574": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_history_ad_id__modified_at.1f05b4ee6f": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_daily_report_ad_id.1ed6689aa8": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__ad_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.80e8146841": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_id.ee080a2122": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_history_campaign_id__modified_at.d2a9279427": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_daily_report_campaign_id.8ac0418e84": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__campaign_daily_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.f6a43acb95": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__keyword_history_keyword_id.19164a6209": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_history_keyword_id__modified_at.e1c525286c": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__keyword_daily_report_keyword_id.e16b8c5047": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__keyword_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__language__currency_code__ad_distribution__bid_match_type__delivered_match_type__top_vs_other.c6f46d202a": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__search_daily_report_search_query.57f687adcc": [], "test.microsoft_ads_source.dbt_utils_unique_combination_of_columns_stg_microsoft_ads__search_daily_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network__language__bid_match_type__delivered_match_type__top_vs_other.03cf031d0c": [], "test.tiktok_ads.not_null_tiktok_ads__advertiser_report_date_day.1276998c99": [], "test.tiktok_ads.not_null_tiktok_ads__advertiser_report_advertiser_id.f956c568ce": [], "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__advertiser_report_advertiser_id__date_day.d298bb3cf9": [], "test.tiktok_ads.not_null_tiktok_ads__ad_report_date_day.d61ee4a5ed": [], "test.tiktok_ads.not_null_tiktok_ads__ad_report_ad_id.2d8166e707": [], "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__ad_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day.3a887710fb": [], "test.tiktok_ads.not_null_tiktok_ads__ad_group_report_date_day.e39164964e": [], "test.tiktok_ads.not_null_tiktok_ads__ad_group_report_ad_group_id.17fb8710f4": [], "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__ad_group_report_ad_group_id__campaign_id__advertiser_id__date_day.ecd611f27e": [], "test.tiktok_ads.not_null_tiktok_ads__campaign_report_date_day.3807b0e836": [], "test.tiktok_ads.not_null_tiktok_ads__campaign_report_campaign_id.8a2b0c8ef8": [], "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__campaign_report_campaign_id__advertiser_id__date_day.03c4f86b19": [], "test.tiktok_ads.not_null_tiktok_ads__url_report_date_day.d593573eff": [], "test.tiktok_ads.not_null_tiktok_ads__url_report_ad_id.6c41067bd0": [], "test.tiktok_ads.dbt_utils_unique_combination_of_columns_tiktok_ads__url_report_ad_id__ad_group_id__campaign_id__advertiser_id__date_day.cf95489e47": [], "test.twitter_ads.not_null_twitter_ads__campaign_report_campaign_id.03b1c451b8": [], "test.twitter_ads.not_null_twitter_ads__campaign_report_date_day.2b30b279b0": [], "test.twitter_ads.not_null_twitter_ads__campaign_report_placement.c66d252e82": [], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__campaign_report_date_day__campaign_id__placement__account_id.2b09fa5421": [], "test.twitter_ads.not_null_twitter_ads__line_item_report_date_day.86c934e8ce": [], "test.twitter_ads.not_null_twitter_ads__line_item_report_line_item_id.0462d58211": [], "test.twitter_ads.not_null_twitter_ads__line_item_report_placement.f103369312": [], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__line_item_report_date_day__line_item_id__placement__campaign_id__account_id.0e972e010a": [], "test.twitter_ads.not_null_twitter_ads__account_report_date_day.84896c5846": [], "test.twitter_ads.not_null_twitter_ads__account_report_placement.157dcb6194": [], "test.twitter_ads.not_null_twitter_ads__account_report_account_id.90d5808908": [], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__account_report_date_day__account_id__placement.a29cf85a4f": [], "test.twitter_ads.not_null_twitter_ads__keyword_report_date_day.e0ce90c1ec": [], "test.twitter_ads.not_null_twitter_ads__keyword_report_line_item_id.4982336b04": [], "test.twitter_ads.not_null_twitter_ads__keyword_report_keyword.7f254683d7": [], "test.twitter_ads.not_null_twitter_ads__keyword_report_placement.1cf3231796": [], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__keyword_report_date_day__line_item_id__keyword__placement__account_id__campaign_id.66e2c0d578": [], "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_placement.d89c9b27e5": [], "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.5df08e154e": [], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id.a46b1b4082": [], "test.twitter_ads.not_null_twitter_ads__url_report_date_day.33fcb7e04b": [], "test.twitter_ads.not_null_twitter_ads__url_report_placement.92ca3b192e": [], "test.twitter_ads.not_null_twitter_ads__url_report_promoted_tweet_id.d690f99143": [], "test.twitter_ads.dbt_utils_unique_combination_of_columns_twitter_ads__url_report_date_day__promoted_tweet_id__placement__line_item_id__campaign_id__account_id.30b826d8ff": [], "test.pinterest.not_null_pinterest_ads__url_report_date_day.b09048037e": [], "test.pinterest.not_null_pinterest_ads__url_report_pin_promotion_id.0da711ad6a": [], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__url_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day.bd87b032c8": [], "test.pinterest.not_null_pinterest_ads__ad_group_report_date_day.ed7c27b8a7": [], "test.pinterest.not_null_pinterest_ads__ad_group_report_ad_group_id.134f9ac6c2": [], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__ad_group_report_ad_group_id__advertiser_id__campaign_id__date_day.d207b7d69d": [], "test.pinterest.not_null_pinterest_ads__campaign_report_date_day.10ac8272bf": [], "test.pinterest.not_null_pinterest_ads__campaign_report_campaign_id.8001ea60f2": [], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__campaign_report_campaign_id__advertiser_id__date_day.b5752d5279": [], "test.pinterest.not_null_pinterest_ads__advertiser_report_date_day.aedeceeeca": [], "test.pinterest.not_null_pinterest_ads__advertiser_report_advertiser_id.13380f0672": [], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__advertiser_report_advertiser_id__date_day.990badbc11": [], "test.pinterest.not_null_pinterest_ads__keyword_report_date_day.23130e9fba": [], "test.pinterest.not_null_pinterest_ads__keyword_report_keyword_id.0d73460198": [], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__keyword_report_keyword_id__ad_group_id__campaign_id__advertiser_id__date_day.b7517b039d": [], "test.pinterest.not_null_pinterest_ads__pin_promotion_report_date_day.3128d28cfd": [], "test.pinterest.not_null_pinterest_ads__pin_promotion_report_pin_promotion_id.2540e0a561": [], "test.pinterest.dbt_utils_unique_combination_of_columns_pinterest_ads__pin_promotion_report_pin_promotion_id__ad_group_id__campaign_id__advertiser_id__date_day.1db3ffb1b3": [], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__url_report_ad_id__ad_group_id__date_day.a59b8e007f": [], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__account_report_account_id__date_day.c52089771e": [], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__ad_group_report_ad_group_id__date_day.7c8e1c1a2f": [], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__ad_report_ad_id__ad_group_id__date_day.fe37ea1a7b": [], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__campaign_report_campaign_id__advertising_channel_type__advertising_channel_subtype__date_day.f735cda469": [], "test.google_ads.dbt_utils_unique_combination_of_columns_google_ads__keyword_report_ad_group_id__criterion_id__date_day.214ff3497d": [], "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_creative_creative_id.062abfe14b": [], "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_creative_date_day.cb81bc4766": [], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_creative_date_day__creative_id.973a01e410": [], "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_campaign_campaign_id.d6ae242f1a": [], "test.linkedin_source.not_null_stg_linkedin_ads__ad_analytics_by_campaign_date_day.ef97bed766": [], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__ad_analytics_by_campaign_date_day__campaign_id.b03f3dc81d": [], "test.linkedin_source.not_null_stg_linkedin_ads__creative_history_creative_id.4d51d55474": [], "test.linkedin_source.not_null_stg_linkedin_ads__creative_history_version_tag.d3f8e73227": [], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__creative_history_version_tag__creative_id.cc02e6aa66": [], "test.linkedin_source.not_null_stg_linkedin_ads__campaign_history_campaign_id.b026971ca2": [], "test.linkedin_source.not_null_stg_linkedin_ads__campaign_history_version_tag.64954cc469": [], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_history_version_tag__campaign_id.2d20780793": [], "test.linkedin_source.not_null_stg_linkedin_ads__campaign_group_history_campaign_group_id.3888f3777d": [], "test.linkedin_source.not_null_stg_linkedin_ads__campaign_group_history_last_modified_at.a716e2a7ea": [], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__campaign_group_history_last_modified_at__campaign_group_id.e761ddb4da": [], "test.linkedin_source.not_null_stg_linkedin_ads__account_history_account_id.a9fa7f93c0": [], "test.linkedin_source.not_null_stg_linkedin_ads__account_history_version_tag.58c46c5d81": [], "test.linkedin_source.dbt_utils_unique_combination_of_columns_stg_linkedin_ads__account_history_account_id__version_tag.9a655993ce": [], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__url_report_date_day__account_id__campaign_id__ad_set_id__ad_id.03a7e82eb7": [], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__ad_report_date_day__account_id__campaign_id__ad_set_id__ad_id.0a25b64738": [], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__ad_set_report_date_day__account_id__campaign_id__ad_set_id.3dd4da872f": [], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__campaign_report_date_day__account_id__campaign_id.7cd75107e6": [], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__account_report_date_day__account_id.5a94423e40": [], "test.facebook_ads.dbt_utils_unique_combination_of_columns_facebook_ads__url_tags__fivetran_id__key__type.ba044777d3": [], "test.snapchat_ads.not_null_snapchat_ads__account_report_date_day.688d7ed260": [], "test.snapchat_ads.not_null_snapchat_ads__account_report_ad_account_id.589c81966b": [], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__account_report_ad_account_id__date_day.da5545b8e6": [], "test.snapchat_ads.not_null_snapchat_ads__ad_report_date_day.7c5350c8fe": [], "test.snapchat_ads.not_null_snapchat_ads__ad_report_ad_id.9000850744": [], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__ad_report_ad_id__date_day.68c2c0de57": [], "test.snapchat_ads.not_null_snapchat_ads__campaign_report_date_day.4e4e31223b": [], "test.snapchat_ads.not_null_snapchat_ads__campaign_report_campaign_id.19fd7135ac": [], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__campaign_report_campaign_id__date_day.dfc5f7da4e": [], "test.snapchat_ads.not_null_snapchat_ads__ad_squad_report_date_day.39118ca639": [], "test.snapchat_ads.not_null_snapchat_ads__ad_squad_report_ad_squad_id.424c0bbffe": [], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__ad_squad_report_ad_squad_id__date_day.027a518f3c": [], "test.snapchat_ads.not_null_snapchat_ads__url_report_date_day.bcbe87a7f6": [], "test.snapchat_ads.not_null_snapchat_ads__url_report_ad_id.ecbdfc0d78": [], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat_ads__url_report_ad_id__date_day.54edc1b2be": [], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__account_history_account_id__updated_at.19f35742f1": [], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_history_ad_group_id__updated_at.096e8da5fd": [], "test.google_ads_source.dbt_expectations_expect_column_values_to_not_match_regex_list_stg_google_ads__ad_history_source_final_urls__any___.7dddbd81e7": [], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_history_ad_id__ad_group_id__updated_at.0c065b0a0b": [], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_stats_ad_id__ad_network_type__device__ad_group_id__date_day.c963f1863c": [], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_history_campaign_id__updated_at.8bf2733e86": [], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_criterion_history_criterion_id__ad_group_id__updated_at.197bbc6816": [], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__ad_group_stats_ad_group_id__device__ad_network_type__date_day.ed55af6020": [], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__campaign_stats_campaign_id__ad_network_type__device__date_day.69600f7d45": [], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__keyword_stats_keyword_id__date_day.8f15198e68": [], "test.google_ads_source.dbt_utils_unique_combination_of_columns_stg_google_ads__account_stats_account_id__device__ad_network_type__date_day.3019f8a860": [], "test.apple_search_ads.not_null_apple_search_ads__ad_group_report_ad_group_id.60febec6b5": [], "test.apple_search_ads.not_null_apple_search_ads__ad_group_report_date_day.e6ffb30b3c": [], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__ad_group_report_organization_id__campaign_id__ad_group_id__date_day.19d180bab9": [], "test.apple_search_ads.not_null_apple_search_ads__ad_report_ad_id.0ab2c5075c": [], "test.apple_search_ads.not_null_apple_search_ads__ad_report_date_day.b86c049e17": [], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__ad_report_organization_id__campaign_id__ad_group_id__ad_id__date_day.54e27817a1": [], "test.apple_search_ads.not_null_apple_search_ads__campaign_report_campaign_id.e26ed1e146": [], "test.apple_search_ads.not_null_apple_search_ads__campaign_report_date_day.35652b8d1a": [], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__campaign_report_organization_id__campaign_id__date_day.647e56213f": [], "test.apple_search_ads.not_null_apple_search_ads__keyword_report_keyword_id.ea493710db": [], "test.apple_search_ads.not_null_apple_search_ads__keyword_report_date_day.3dec8d0e82": [], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__keyword_report_organization_id__campaign_id__ad_group_id__keyword_id__date_day.78fb033a13": [], "test.apple_search_ads.not_null_apple_search_ads__organization_report_organization_id.b6cf7d69f8": [], "test.apple_search_ads.not_null_apple_search_ads__organization_report_date_day.5784fed523": [], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__organization_report_organization_id__date_day.8bc84fccc3": [], "test.apple_search_ads.not_null_apple_search_ads__search_term_report_date_day.1bc3b0d57c": [], "test.apple_search_ads.not_null_apple_search_ads__search_term_report_search_term_text.aecc7447f7": [], "test.apple_search_ads.dbt_utils_unique_combination_of_columns_apple_search_ads__search_term_report_search_term_text__date_day.e60fe79ec4": [], "test.ad_reporting.not_null_ad_reporting__account_report_account_id.316a64c022": [], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__account_report_platform__date_day__account_id.1cadcf1583": [], "test.ad_reporting.not_null_ad_reporting__ad_group_report_ad_group_id.963e17e842": [], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__ad_group_report_platform__date_day__ad_group_id__campaign_id__account_id.2116e5a78a": [], "test.ad_reporting.not_null_ad_reporting__ad_report_ad_id.f3eb210152": [], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__ad_report_platform__date_day__ad_id__ad_group_id__campaign_id__account_id.3c5bc5ae55": [], "test.ad_reporting.not_null_ad_reporting__campaign_report_campaign_id.1cfaa7698b": [], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__campaign_report_platform__date_day__campaign_id__account_id.4b3426da0f": [], "test.ad_reporting.not_null_ad_reporting__keyword_report_keyword_text.5d9a007b6f": [], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__keyword_report_platform__date_day__keyword_text__keyword_match_type__ad_group_id__campaign_id__account_id.45c0f2075a": [], "test.ad_reporting.not_null_ad_reporting__search_report_search_query.ee2f0fcafb": [], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__search_report_platform__date_day__search_query__search_match_type__keyword_id__ad_group_id__campaign_id__account_id.4efd457bbf": [], "test.ad_reporting.not_null_ad_reporting__url_report_base_url.a29864e5b6": [], "test.ad_reporting.dbt_utils_unique_combination_of_columns_ad_reporting__url_report_platform__date_day__ad_group_id__campaign_id__account_id__base_url__url_host__url_path__utm_campaign__utm_content__utm_medium__utm_source__utm_term.cd216b1424": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_history_modified_at.e5d65fa28f": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_history_ad_group_id.dc128eecb7": [], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_history_ad_group_id__modified_at.84af14c83b": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_report_ad_group_id.a115f9cfc1": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_group_report_date_day.4dfd46a43b": [], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_group_report_ad_group_id__date_day.a0fcc4e33c": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_history_modified_at.2eea7e006d": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_history_ad_id.4ad3bde32a": [], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_history_ad_id__modified_at.38599b8cba": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_date_day.e6252346d8": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_ad_group_id.a397755e9f": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__ad_report_ad_id.d08e760c58": [], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__ad_report_ad_id__date_day__ad_group_id.0d8d23c516": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_history_modified_at.f34a7a97c9": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_history_campaign_id.3f0f7502b8": [], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_history_campaign_id__modified_at.317f970af9": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_report_campaign_id.b83941e728": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__campaign_report_date_day.c8dc10a6f3": [], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__campaign_report_campaign_id__date_day.bad41b0481": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_history_modified_at.42fde5a287": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_history_keyword_id.889f83cfd2": [], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_history_keyword_id__modified_at.7b06162d24": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_report_keyword_id.501725b09e": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__keyword_report_date_day.16098db928": [], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__keyword_report_keyword_id__date_day.9f0099cff8": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__organization_organization_id.b013ce33cb": [], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__organization_organization_id.8647048f7a": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__search_term_report__fivetran_id.aa430d1dad": [], "test.apple_search_ads_source.not_null_stg_apple_search_ads__search_term_report_date_day.fd93df3302": [], "test.apple_search_ads_source.dbt_utils_unique_combination_of_columns_stg_apple_search_ads__search_term_report__fivetran_id__date_day.aad2a48344": [], "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_ad_group_id.220c6220be": [], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_history_ad_group_id___fivetran_synced.1132e1f339": [], "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_campaign_id.60cb10d341": [], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_history_campaign_id___fivetran_synced.eff7196b87": [], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_pin_promotion_id.171995cd34": [], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_history__fivetran_synced__pin_promotion_id.8e9ab31ea9": [], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_date_day.ed272212a1": [], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_pin_promotion_id.9c3c9f71ab": [], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__pin_promotion_report_date_day__pin_promotion_id__ad_group_id__campaign_id__advertiser_id.7ea04e6024": [], "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_report_date_day.80e8904c4c": [], "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_report_ad_group_id.bb8cf3c471": [], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__ad_group_report_date_day__ad_group_id__campaign_id__advertiser_id.3800c02b0e": [], "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_history_advertiser_id.7d24f665fb": [], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_history_updated_at__advertiser_id.94e8f4de4b": [], "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_report_date_day.153bd03c95": [], "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_report_advertiser_id.1b16ed73ff": [], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__advertiser_report_date_day__advertiser_id.e92ce8a9c0": [], "test.pinterest_source.not_null_stg_pinterest_ads__campaign_report_date_day.7ef5fb1238": [], "test.pinterest_source.not_null_stg_pinterest_ads__campaign_report_campaign_id.a287eba0fc": [], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__campaign_report_date_day__campaign_id__advertiser_id.ff47cb8abc": [], "test.pinterest_source.not_null_stg_pinterest_ads__keyword_history_keyword_id.246889377a": [], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_history_keyword_id__ad_group_id___fivetran_synced.d122faa877": [], "test.pinterest_source.not_null_stg_pinterest_ads__keyword_report_date_day.9937216300": [], "test.pinterest_source.not_null_stg_pinterest_ads__keyword_report_keyword_id.5f00679c48": [], "test.pinterest_source.dbt_utils_unique_combination_of_columns_stg_pinterest_ads__keyword_report_date_day__keyword_id__ad_group_id__campaign_id__advertiser_id.3ac101cc13": [], "test.tiktok_ads_source.unique_stg_tiktok_ads__advertiser_advertiser_id.078391ba66": [], "test.tiktok_ads_source.not_null_stg_tiktok_ads__advertiser_advertiser_id.5deab92def": [], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_history_ad_group_id.04778d7fad": [], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_history_ad_group_id__updated_at.cec78c01de": [], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_history_ad_id.4ffd05b23a": [], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_history_ad_id__updated_at.66b86b4dd1": [], "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_history_campaign_id.7f9147d1e1": [], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_history_campaign_id__updated_at.72bf07011b": [], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_report_hourly_ad_id.ee84d783ed": [], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_report_hourly_stat_time_hour.9e2a2dca81": [], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_report_hourly_ad_id__stat_time_hour.e70f8cef6d": [], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_report_hourly_ad_group_id.8da17119f1": [], "test.tiktok_ads_source.not_null_stg_tiktok_ads__ad_group_report_hourly_stat_time_hour.ca4b495127": [], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__ad_group_report_hourly_ad_group_id__stat_time_hour.1aeaeb71ad": [], "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_report_hourly_campaign_id.ef898379fb": [], "test.tiktok_ads_source.not_null_stg_tiktok_ads__campaign_report_hourly_stat_time_hour.e75e13184c": [], "test.tiktok_ads_source.dbt_utils_unique_combination_of_columns_stg_tiktok_ads__campaign_report_hourly_campaign_id__stat_time_hour.8e4a1e4b34": [], "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f": [], "test.facebook_ads_source.not_null_stg_facebook_ads__account_history__fivetran_synced.0570e35e1f": [], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__account_history_account_id___fivetran_synced.f9b4d28fa2": [], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064": [], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_updated_at.250a5a84e4": [], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_history_ad_id__updated_at.2922c18b58": [], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb": [], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_updated_at.ef7fafe0fa": [], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__ad_set_history_ad_set_id__updated_at.0a60ad0fef": [], "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852": [], "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_updated_at.9e59f99270": [], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__campaign_history_campaign_id__updated_at.7437b392c2": [], "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history__fivetran_synced.3b0593cb4f": [], "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261": [], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_creative_id___fivetran_synced.69ddc26562": [], "test.facebook_ads_source.not_null_stg_facebook_ads__basic_ad_ad_id.2611b250fc": [], "test.facebook_ads_source.not_null_stg_facebook_ads__basic_ad_account_id.d06f6d861b": [], "test.facebook_ads_source.dbt_utils_unique_combination_of_columns_stg_facebook_ads__basic_ad_date_day__ad_id__account_id.bd909529e7": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_account_history__fivetran_synced.2d5dd77824": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_account_history_ad_account_id.426d71d605": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_account_history_ad_account_id___fivetran_synced.cd4fd6b0be": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_history__fivetran_synced.1607c70fda": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_history_ad_id.e9d367fd15": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_history_ad_id___fivetran_synced.f84924f13b": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_hourly_report_ad_id.7e763de19d": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_hourly_report_date_hour.666cda1cd7": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_hourly_report_ad_id__date_hour.1a4ef6182a": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_history__fivetran_synced.7ed7d105ae": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_history_ad_squad_id.71c7122278": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_history_ad_squad_id___fivetran_synced.200b225a27": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id.ab16aa72c9": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__ad_squad_hourly_report_date_hour.6f0b63a9cb": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__ad_squad_hourly_report_ad_squad_id__date_hour.774a407e69": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_history__fivetran_synced.55bc48b3ec": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_history_campaign_id.f74a0fb8c0": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_history_campaign_id___fivetran_synced.31b9fb6777": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_hourly_report_campaign_id.f255c38a3e": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__campaign_hourly_report_date_hour.0bc4218ac8": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__campaign_hourly_report_campaign_id__date_hour.64293afa9c": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_history__fivetran_synced.b9c95b4380": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_history_creative_id.09c83690f4": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_history_creative_id___fivetran_synced.c6f6c78b99": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_url_tag_history_creative_id.7ff6bb9c1b": [], "test.snapchat_ads_source.not_null_stg_snapchat_ads__creative_url_tag_history_updated_at.894b86a924": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat_ads__creative_url_tag_history_creative_id__param_key__updated_at.cc3fa6acbe": [], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__account_report_date_day__account_id__device_os__device_type__network__currency_code.2d5faac68f": [], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__ad_group_report_date_day__account_id__campaign_id__ad_group_id__device_os__device_type__network__currency_code.87353ef6b3": [], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__ad_report_date_day__account_id__campaign_id__ad_group_id__ad_id__ad_type__device_os__device_type__network__currency_code.4b91f31686": [], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__campaign_report_date_day__account_id__campaign_id__device_os__device_type__network__currency_code.d7e35aaa9b": [], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__keyword_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__device_os__device_type__network__currency_code.9ddafdcbe9": [], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__search_report_date_day__account_id__campaign_id__ad_group_id__ad_id__keyword_id__search_query__device_os__device_type__network.99029c3602": [], "test.microsoft_ads.dbt_utils_unique_combination_of_columns_microsoft_ads__url_report_date_day__account_id__campaign_id__ad_group_id__ad_id__device_os__device_type__network__currency_code.070da99eb7": [], "test.twitter_ads_source.not_null_stg_twitter_ads__account_history_account_id.66fb3601e2": [], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__account_history_account_id__updated_timestamp.2725b1ff40": [], "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_history_campaign_id.51218487ce": [], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_history_campaign_id__updated_timestamp.c7054e5b55": [], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_history_line_item_id.2cef040809": [], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_history_line_item_id__updated_timestamp.b12672e022": [], "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id.f447a1cd09": [], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id__updated_timestamp.dddc4a21ef": [], "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_date_day.c4c46a5894": [], "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id.6028694598": [], "test.twitter_ads_source.not_null_stg_twitter_ads__promoted_tweet_report_placement.c1b1f648b3": [], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__promoted_tweet_report_date_day__promoted_tweet_id__placement.7028206273": [], "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_url_index.e998fb67be": [], "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_url_tweet_id.f7e1670218": [], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__tweet_url_index__tweet_id.eab5b85d74": [], "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_date_day.053c09786c": [], "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_campaign_id.a63b62981f": [], "test.twitter_ads_source.not_null_stg_twitter_ads__campaign_report_placement.5067d8c4f4": [], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__campaign_report_date_day__campaign_id__placement.71102d8fdb": [], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_date_day.0f4d8cc8fe": [], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_line_item_id.9f5a4860b7": [], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_report_placement.cd7e77e0eb": [], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_report_date_day__line_item_id__placement.251e077e6b": [], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_date_day.c7e7155b13": [], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_line_item_id.e4f3fa2e5c": [], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_keyword.02bb211fa0": [], "test.twitter_ads_source.not_null_stg_twitter_ads__line_item_keywords_report_placement.f5bb738cac": [], "test.twitter_ads_source.dbt_utils_unique_combination_of_columns_stg_twitter_ads__line_item_keywords_report_date_day__line_item_id__keyword__placement.c47c820cc3": [], "test.twitter_ads_source.not_null_stg_twitter_ads__tweet_tweet_id.a0427f37cd": [], "test.twitter_ads_source.unique_stg_twitter_ads__tweet_tweet_id.7e44536c95": [], "test.linkedin.not_null_linkedin_ads__account_report_account_id.0c34ea1842": [], "test.linkedin.not_null_linkedin_ads__account_report_date_day.c4b33f8f53": [], "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__account_report_date_day__account_id.a2dcede91c": [], "test.linkedin.not_null_linkedin_ads__campaign_report_date_day.8d320b88b1": [], "test.linkedin.not_null_linkedin_ads__campaign_report_campaign_id.bf43964b15": [], "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_report_date_day__campaign_id__account_id__campaign_group_id.0b09b4b3f3": [], "test.linkedin.not_null_linkedin_ads__campaign_group_report_date_day.2676a1f76b": [], "test.linkedin.not_null_linkedin_ads__campaign_group_report_campaign_group_id.39b448cdaf": [], "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__campaign_group_report_date_day__campaign_group_id__account_id.f60989a7a6": [], "test.linkedin.not_null_linkedin_ads__creative_report_date_day.0c6338b020": [], "test.linkedin.not_null_linkedin_ads__creative_report_creative_id.096d93f889": [], "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__creative_report_date_day__creative_id__campaign_id__campaign_group_id__account_id.5c000e925f": [], "test.linkedin.not_null_linkedin_ads__url_report_date_day.48b540f315": [], "test.linkedin.not_null_linkedin_ads__url_report_creative_id.83967fe9d2": [], "test.linkedin.dbt_utils_unique_combination_of_columns_linkedin_ads__url_report_date_day__creative_id__campaign_id__campaign_group_id__account_id.d00d4a104d": [], "source.microsoft_ads_source.microsoft_ads.account_history": [], "source.microsoft_ads_source.microsoft_ads.account_performance_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp"], "source.microsoft_ads_source.microsoft_ads.ad_group_history": [], "source.microsoft_ads_source.microsoft_ads.ad_group_performance_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp"], "source.microsoft_ads_source.microsoft_ads.ad_history": [], "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report": [], "source.microsoft_ads_source.microsoft_ads.campaign_history": [], "source.microsoft_ads_source.microsoft_ads.campaign_performance_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp"], "source.microsoft_ads_source.microsoft_ads.keyword_history": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp"], "source.microsoft_ads_source.microsoft_ads.keyword_performance_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp"], "source.microsoft_ads_source.microsoft_ads.search_query_performance_daily_report": ["model.microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp"], "source.linkedin_source.linkedin.ad_analytics_by_creative": [], "source.linkedin_source.linkedin.creative_history": [], "source.linkedin_source.linkedin.campaign_history": [], "source.linkedin_source.linkedin.campaign_group_history": [], "source.linkedin_source.linkedin.account_history": [], "source.linkedin_source.linkedin.ad_analytics_by_campaign": ["model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp"], "source.google_ads_source.google_ads.ad_stats": ["model.google_ads_source.stg_google_ads__ad_stats_tmp"], "source.google_ads_source.google_ads.ad_history": ["model.google_ads_source.stg_google_ads__ad_history_tmp"], "source.google_ads_source.google_ads.ad_group_history": ["model.google_ads_source.stg_google_ads__ad_group_history_tmp"], "source.google_ads_source.google_ads.campaign_history": ["model.google_ads_source.stg_google_ads__campaign_history_tmp"], "source.google_ads_source.google_ads.account_history": ["model.google_ads_source.stg_google_ads__account_history_tmp"], "source.google_ads_source.google_ads.ad_group_criterion_history": ["model.google_ads_source.stg_google_ads__ad_group_criterion_history_tmp"], "source.google_ads_source.google_ads.ad_group_stats": ["model.google_ads_source.stg_google_ads__ad_group_stats_tmp"], "source.google_ads_source.google_ads.campaign_stats": ["model.google_ads_source.stg_google_ads__campaign_stats_tmp"], "source.google_ads_source.google_ads.keyword_stats": ["model.google_ads_source.stg_google_ads__keyword_stats_tmp"], "source.google_ads_source.google_ads.account_stats": ["model.google_ads_source.stg_google_ads__account_stats_tmp"], "source.apple_search_ads_source.apple_search_ads.ad_group_history": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp"], "source.apple_search_ads_source.apple_search_ads.ad_group_report": ["model.apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp"], "source.apple_search_ads_source.apple_search_ads.ad_history": ["model.apple_search_ads_source.stg_apple_search_ads__ad_history_tmp"], "source.apple_search_ads_source.apple_search_ads.ad_level_report": ["model.apple_search_ads_source.stg_apple_search_ads__ad_report_tmp"], "source.apple_search_ads_source.apple_search_ads.campaign_history": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp"], "source.apple_search_ads_source.apple_search_ads.campaign_report": ["model.apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp"], "source.apple_search_ads_source.apple_search_ads.keyword_history": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp"], "source.apple_search_ads_source.apple_search_ads.keyword_report": ["model.apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp"], "source.apple_search_ads_source.apple_search_ads.organization": ["model.apple_search_ads_source.stg_apple_search_ads__organization_tmp"], "source.apple_search_ads_source.apple_search_ads.search_term_report": ["model.apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp"], "source.pinterest_source.pinterest_ads.pin_promotion_report": [], "source.pinterest_source.pinterest_ads.pin_promotion_history": [], "source.pinterest_source.pinterest_ads.campaign_history": [], "source.pinterest_source.pinterest_ads.ad_group_history": [], "source.pinterest_source.pinterest_ads.ad_group_report": ["model.pinterest_source.stg_pinterest_ads__ad_group_report_tmp"], "source.pinterest_source.pinterest_ads.advertiser_history": ["model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp"], "source.pinterest_source.pinterest_ads.advertiser_report": ["model.pinterest_source.stg_pinterest_ads__advertiser_report_tmp"], "source.pinterest_source.pinterest_ads.campaign_report": ["model.pinterest_source.stg_pinterest_ads__campaign_report_tmp"], "source.pinterest_source.pinterest_ads.keyword_history": ["model.pinterest_source.stg_pinterest_ads__keyword_history_tmp"], "source.pinterest_source.pinterest_ads.keyword_report": ["model.pinterest_source.stg_pinterest_ads__keyword_report_tmp"], "source.tiktok_ads_source.tiktok_ads.advertiser": [], "source.tiktok_ads_source.tiktok_ads.campaign_history": [], "source.tiktok_ads_source.tiktok_ads.adgroup_history": [], "source.tiktok_ads_source.tiktok_ads.ad_history": [], "source.tiktok_ads_source.tiktok_ads.ad_report_hourly": [], "source.tiktok_ads_source.tiktok_ads.campaign_report_hourly": [], "source.tiktok_ads_source.tiktok_ads.adgroup_report_hourly": [], "source.facebook_ads_source.facebook_ads.account_history": [], "source.facebook_ads_source.facebook_ads.ad_history": [], "source.facebook_ads_source.facebook_ads.ad_set_history": [], "source.facebook_ads_source.facebook_ads.basic_ad": [], "source.facebook_ads_source.facebook_ads.campaign_history": [], "source.facebook_ads_source.facebook_ads.creative_history": [], "source.snapchat_ads_source.snapchat_ads.ad_account_history": [], "source.snapchat_ads_source.snapchat_ads.ad_history": [], "source.snapchat_ads_source.snapchat_ads.ad_hourly_report": [], "source.snapchat_ads_source.snapchat_ads.ad_squad_history": [], "source.snapchat_ads_source.snapchat_ads.ad_squad_hourly_report": ["model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp"], "source.snapchat_ads_source.snapchat_ads.campaign_history": [], "source.snapchat_ads_source.snapchat_ads.campaign_hourly_report": ["model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp"], "source.snapchat_ads_source.snapchat_ads.creative_history": [], "source.snapchat_ads_source.snapchat_ads.creative_url_tag_history": [], "source.twitter_ads_source.twitter_ads.account_history": [], "source.twitter_ads_source.twitter_ads.campaign_history": [], "source.twitter_ads_source.twitter_ads.line_item_history": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_history": [], "source.twitter_ads_source.twitter_ads.tweet_url": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_report": [], "source.twitter_ads_source.twitter_ads.tweet": ["model.twitter_ads_source.stg_twitter_ads__tweet_tmp"], "source.twitter_ads_source.twitter_ads.campaign_report": ["model.twitter_ads_source.stg_twitter_ads__campaign_report_tmp"], "source.twitter_ads_source.twitter_ads.line_item_report": ["model.twitter_ads_source.stg_twitter_ads__line_item_report_tmp"], "source.twitter_ads_source.twitter_ads.line_item_keywords_report": ["model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp"]}}